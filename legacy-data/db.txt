{"_id":"20-reasons-i-love-distance-running","title":"20 Reasons I Love Distance Running","content":"My race season is finished for the year. I'm not one of those sissies who won't run outside in the winter - I love a good snow run - but I've done three half marathons this year, had a couple minor foot injuries (okay, one was major), and lost about 20 pounds. I'm due for a little recovery time.\r\n\r\nFinishing my first full year back as a runner got me thinking about why I love running as a hobby and a sport. I'm not going to win races anytime soon, but I still love it, and here are the reasons why: \r\n\r\n1\\. It's physically challenging.\r\n\r\n2\\. It builds your self confidence.\r\n\r\n3\\. It relieves stress.\r\n\r\n4\\. It helps you keep your problems in perspective.\r\n\r\n5\\. It gives you energy.\r\n\r\n6\\. It's mentally challenging.\r\n\r\n7\\. People respect that you do it.\r\n\r\n8\\. You instantly join an unofficial club of runners worldwide.\r\n\r\n9\\. It's low-cost exercise.\r\n\r\n10\\. It makes you want to eat better.\r\n\r\n11\\. It makes you sleep better.\r\n\r\n12\\. It helps you keep away sickness.\r\n\r\n13\\. It's a great way to see new places when you travel.\r\n\r\n14\\. It's a great way to see new parts of your home town.\r\n\r\n15\\. You can see and track your progress easily.\r\n\r\n16\\. It makes you feel less bad about eating tons of food every now and then.\r\n\r\n17\\. It teaches you to deal with setbacks.\r\n\r\n18\\. It teaches you to learn the difference between soreness, pain, and injuries.\r\n\r\n19\\. There's never an \"end\" to running.\r\n\r\n20\\. It's fun.\r\n\r\nHappy running, friends!","createdAt":{"$$date":1416211228000},"updatedAt":{"$$date":1491913843604},"imageUrl":"https://i.imgur.com/9jXkBx5.jpg","postUrl":"http://www.karllhughes.com/?p=640","type":"blog","tags":[{"_id":"running"},{"_id":"health"}]}
{"_id":"2017-writing-goal","title":"My 2017 Writing Goal","content":"I've tried to write *something* every week for the past few years, but I'm not 100% consistent. It usually comes in waves where I spend a week or two cranking out several articles and then maybe a month without much output, but I'm going to up my consistency and hopefully volume in 2017.\r\n\r\n## My goal for 2017: Publish something every day.\r\n\r\nMost days won't be long, detailed posts, but I'm making it my mission to write and publish at least one piece of content every day. I've got a long backlog of blog post ideas, I've been writing news commentary on Medium, and I'm about to start editing and republishing old blog content as well.\r\n\r\nI hope to do a few things during this year while focusing on shorter, daily writing. First, I'd like to build the habit of writing every day. I have found that if I do something every day - run, write code, read the news, publish a blog post - I'm more invested in it and I tend to get better at it as well.\r\n\r\nSecond, I'm hoping to push myself outside of my typical topic range. By writing and publishing something every day, I'll need to come up with new ideas in order to keep myself from getting bored. I'd like to try doing some creative fiction and personal writing in addition to my usual tech op/ed style.\r\n\r\nFinally, I would like to improve myself. I feel that writing is one of the most valuable skills a technical leader can possess, and you don't have to be professionally trained for years to do it. I don't consider myself an especially skilled writer, but I enjoy it, and I want to get better by doing it every day.\r\n\r\n## My 2017 publishing calendar\r\nI'm going to record everything I publish in 2017 here. I will probably only update the list once per month or so, but I'm hoping that by the end of the year I'll have a nice collection of varied writing in this list.\r\n\r\n#### January\r\nIn January, I did a daily news journal on [my Medium account](https://medium.com/@karllhughes). Each article is a summary of one big story I read or the compilation of trends that I've noticed.\r\n\r\n- [2017 and Flying Cars](https://medium.com/@karllhughes/2017-and-flying-cars-443f4426ed2c#.lbvobfx57)\r\n- [What Happens When the President Fights the Intelligence Apparatus?](https://medium.com/@karllhughes/what-happens-when-the-president-fights-the-intelligence-apparatus-f4a7a99aab37#.p25awyfzq)\r\n- [Always Be Learning](https://medium.com/@karllhughes/abl-always-be-learning-97c23211a3a1#.t0n4u6iye)\r\n- [Hiring is Hard; Culture is Misleading](https://medium.com/@karllhughes/hiring-is-hard-culture-is-misleading-190237aa6043#.d9lybkexa)\r\n- [A \"Crazy\" Workplace isn't a Good Sign](https://medium.com/@karllhughes/a-crazy-workplace-isnt-a-good-sign-5988f54f6d37#.kusaqe1zg)\r\n- [Cars as a Service](https://medium.com/@karllhughes/cars-as-a-service-3ab758abdd1f#.64att561j)\r\n- [Globalism vs. Nationalism: the New Left and Right](https://medium.com/@karllhughes/globalism-vs-nationalism-the-new-left-and-right-45407a9acee3#.etw13cydr)\r\n- [Not Even Age Saves You From Student Loans](https://medium.com/@karllhughes/not-even-age-saves-you-from-student-loans-85b3cd970655#.q0a82qcq7)\r\n- [Nuclear's Future](https://medium.com/@karllhughes/nuclears-future-d54f78557b65#.55g4rozxg)\r\n- [Why Economists are Never Right](https://medium.com/@karllhughes/why-economists-are-never-right-ed7d5b40d12b#.1t7k9qo12)\r\n- [HTTP2 and the New Web](https://medium.com/@karllhughes/http2-and-the-new-web-1b55860e7827#.2dy1hjtnr)\r\n- [A New Lease on Healthcare](https://medium.com/@karllhughes/a-new-lease-on-healthcare-d505ee365e46#.tmz0doqr6)\r\n- [Are Colleges Realizing They're Overcharging](https://medium.com/@karllhughes/are-colleges-realizing-theyre-overcharging-7bf090d4865b#.t76eiyq0m)\r\n- [Thinking in Extremes](https://medium.com/@karllhughes/thinking-in-extremes-15542a8b7d4a#.tfz44f8oj)\r\n- [Sam Harris and Richard Dawkins](https://medium.com/@karllhughes/sam-harris-and-richard-dawkins-c1d12e880a79#.kif73acsa)\r\n- [Transportation and Cars](https://medium.com/@karllhughes/transportation-and-cars-877393415de9#.xcjum6szc)\r\n- [The Value of Well Built Side Projects](https://medium.com/@karllhughes/the-value-of-well-built-side-projects-ad9626e7011c#.fx0z1j9an)\r\n- [China as a Globalization Leader](https://medium.com/@karllhughes/china-as-a-globalization-leader-5cd440bbd2d2#.g6f8ouvhw)\r\n- [Student Debt is Crippling Half of Loan Holders](https://medium.com/@karllhughes/student-debt-is-crippling-half-of-loan-holders-1039e0d79a0a#.5b22j1lvt)\r\n- [How Large Tech Companies Stay Current](https://medium.com/@karllhughes/how-large-tech-companies-stay-current-bcb770b3369a#.d7s15crly)\r\n- [The Irony of Conservative Nationalism](https://medium.com/@karllhughes/the-irony-of-conservative-nationalism-7a48c682f324#.d540vpijp)\r\n- [RethinkDB: The Challenge of For-Profit Open Source](https://medium.com/@karllhughes/rethinkdb-the-challenge-of-for-profit-open-source-bf116cb89ff4#.a4ynw56y6)\r\n- [Freeing People Through UBI](https://medium.com/@karllhughes/freeing-people-through-ubi-438994bc29e3#.cwrn9b7zv)\r\n- [The Attraction of Paper is Flexibility](https://medium.com/@karllhughes/the-attraction-of-paper-is-flexibility-85a8c98d8bac#.5s5zgdayq)\r\n- [Building a New Healthcare System from First Principles](https://medium.com/@karllhughes/building-a-new-healthcare-system-from-first-principles-c8ab0f531687#.5uc6nc5vj)\r\n- [Harvard Endowment Going Outsourced](https://medium.com/@karllhughes/harvard-endowment-going-outsourced-4afb0fadf89#.d8ugw3691)\r\n- [The Truth is Bad Enough](https://medium.com/@karllhughes/the-truth-is-bad-enough-dd365d91a1ed#.1cyhseumw)\r\n- [Opinionated Software Development Frameworks](https://medium.com/@karllhughes/opinionated-software-development-frameworks-4ec3abe4daf3#.flgg8xsfm)\r\n- [How Far Will We Let the Government Go In the Name of Security?](https://medium.com/@karllhughes/how-far-will-we-let-the-government-go-in-the-name-of-security-94fd1ad61a8b#.rr7k5kqtu)\r\n- [Reactive Event-Based Programming](https://medium.com/@karllhughes/reactive-event-based-programming-43f16bd830c8#.2qsq7xu90)\r\n- [Misplaced Fear](https://medium.com/@karllhughes/misplaced-fear-4423f77bb27c#.s3776de8u)\r\n\r\n#### February\r\nThis month, I edited and republishing one old article from my blog every day. I've been writing here for over five years, so many of the older pieces have gotten a bit stale or the formatting has degraded as I've switched blogging platforms. Most of the updates I'm making are minor edits, but a few articles got some significant additions.\r\n\r\n- [How I built a following on Google+](https://www.karllhughes.com/posts/heres-how-i-got-6000-followers-on-google)\r\n- [College students: your blog sucks](https://www.karllhughes.com/posts/college-students-your-blog-sucks)\r\n- [Business blogging without the lies](https://www.karllhughes.com/posts/business-blogging-without-the-lies)\r\n- [A proposal for non-profit search engines](https://www.karllhughes.com/posts/a-proposal-for-non-profit-search-engines)\r\n- [Community is about engagement, not size](https://www.karllhughes.com/posts/community-is-about-engagement-not-size)\r\n- [Breaking Into the Online Publishing Industry](https://www.karllhughes.com/posts/breaking-into-the-online-publishing-industry)\r\n- [Success is in your attitude](https://www.karllhughes.com/posts/success-is-in-your-attitude)\r\n- [One Thing That Separates Successful People From Failures](https://www.karllhughes.com/posts/one-thing-that-separates-successful-people-from-failures)\r\n- [Training for Focus: 4 Ways to Keep Your Eyes on the Big Picture](https://www.karllhughes.com/posts/training-for-focus-four-ways-eyes-big-picture)\r\n- [What Will You Regret? 5 Ways to Live Without Any](https://www.karllhughes.com/posts/what-will-you-regret-5-ways-to-live-without-any)\r\n- [Where Have All the Business Models Gone? Did the Internet Kill the Need for One?](https://www.karllhughes.com/posts/internet-killing-good-business-models)\r\n- [My Beef With Twitter: Taking the Engagement Out of Social Media](https://www.karllhughes.com/posts/my-beef-with-twitter-taking-the-engagement-out-of-social-media)\r\n- [Writing - You Don't Need a Degree for it](https://www.karllhughes.com/posts/writing-you-dont-need-a-degree-for-it)\r\n- [Determining the Value of Online Data](https://www.karllhughes.com/posts/determining-the-value-of-online-data)\r\n- [Are You Placing the Blame Internally or Externally?](https://www.karllhughes.com/posts/are-you-placing-the-blame-internally-or-externally)\r\n- [Incremental Software Development with PHP Microservices](https://blog.codeship.com/incremental-software-development-with-php-microservices/)\r\n- [The Key to Success: Never Stop Learning](https://www.karllhughes.com/posts/the-key-to-success-never-stop-learning)\r\n- [What Being Made Up as a Swedish Drag Queen Taught Me About New Experiences](https://www.karllhughes.com/posts/what-being-made-u-as-a-swedish-drag-queen-taught-me-about-new-experiences)\r\n- [Stress a Little, It's Okay](https://www.karllhughes.com/posts/stress-a-little-its-okay)\r\n- [How Startups Know When They've Got the Technology Right](https://www.karllhughes.com/posts/how-startups-know-when-theyve-got-the-technology-right)\r\n- [Pursue Your Passion. Period.](https://www.karllhughes.com/posts/pursue-your-passion-period)\r\n- [The Power of Responsiveness - Web Design for Multiple Platforms](https://www.karllhughes.com/posts/the-power-of-responsiveness-web-design-for-multiple-platforms)\r\n- [Marketing isn't about Content Creation, it's about Platform Creation](https://www.karllhughes.com/posts/marketing-isnt-about-content-creation-its-about-platform-creation)\r\n- [Be Unique, and Don't Wait](https://www.karllhughes.com/posts/be-unique-and-dont-wait)\r\n- [Everybody's Got an Idea. Ideas Suck. Action Doesn't.](https://www.karllhughes.com/posts/everybodys-got-an-idea-ideas-suck-action-doesnt)\r\n- [America: The Country of Escape Artists](https://www.karllhughes.com/posts/america-the-country-of-escape-artists)\r\n\r\n#### March\r\nIn March I spent my daily writing time working on my open source book, [CTO Patterns](https://github.com/karllhughes/cto-patterns). The goal of the project is to define a set of patterns that startup and small company CTOs can use to help them be more successful.\r\n\r\nDuring the course of the month I worked on the following chapters:\r\n\r\n- [What is a CTO?](https://github.com/karllhughes/cto-patterns/blob/master/1-personal-efficiency/1-what-is-cto.md)\r\n- [Defining Success](https://github.com/karllhughes/cto-patterns/blob/master/1-personal-efficiency/2-defining-success.md)\r\n- [Dealing with Fear and Uncertainty](https://github.com/karllhughes/cto-patterns/blob/master/1-personal-efficiency/4-fear.md)\r\n- [Striking a Balance](https://github.com/karllhughes/cto-patterns/blob/master/1-personal-efficiency/5-balance.md)\r\n- [Networking](https://github.com/karllhughes/cto-patterns/blob/master/1-personal-efficiency/6-networking.md)\r\n- [Agile in a Nutshell](https://github.com/karllhughes/cto-patterns/blob/master/2-product-development/1-agile.md)\r\n\r\nI also republished a couple posts here on my blog:\r\n\r\n- [Health as a Long-Term Investment in Your Success](https://www.karllhughes.com/posts/health-investment-success)\r\n- [API and Database of Accredited Colleges in the United States](https://www.karllhughes.com/posts/database-of-accredited-colleges-in-the-united-states)\r\n\r\n#### April\r\nIn April I republished more posts here on my personal blog. I really enjoyed spending a month revisiting and cleaning up old posts in February, and I've still got a big backlog of posts that need some TLC.\r\n\r\n- [The Myth of the Hero](https://www.karllhughes.com/posts/hero-myth)\r\n- [The Key to Networking: Keeping in Touch](https://www.karllhughes.com/posts/the-key-to-networking-keeping-in-touch)\r\n- [Be Indispensable](https://www.karllhughes.com/posts/be-indispensable)\r\n- [Myths you'll here about working at a startup](https://www.karllhughes.com/posts/myths-working-engineer-startup)\r\n- [The Risk in Sending Your Startup's Technology Offshore](https://www.karllhughes.com/posts/risk-of-offshore-outsourcing)\r\n- [Why the Textbook Industry Needs a Technical Revolution](https://www.karllhughes.com/posts/textbook-industry-revolution)\r\n- [Innovation in Small Organizations](https://www.karllhughes.com/posts/innovation-small-organizations)\r\n- [What to Expect from a Developer \"Bootcamp\"](https://www.karllhughes.com/posts/dev-bootcamp-program)\r\n- [Contentment Comes from People not Things](https://www.karllhughes.com/posts/contentment)\r\n- [Working Hours, Burnout, Pacing](https://www.karllhughes.com/posts/working-hours)\r\n- [Keeping Goals Manageable](https://www.karllhughes.com/posts/manageable-goals)\r\n- [Trello as a Reading List](https://www.karllhughes.com/posts/trello-as-a-reading-list)\r\n- [Peopleware: All Technology Problems are Really People Problems](https://www.karllhughes.com/posts/peopleware)\r\n- [Roadblocks to Project Estimation](https://www.karllhughes.com/posts/roadblocks-project-estimation)\r\n- [Five Takeaways from Clean Code: A Handbook of Agile Software Craftsmanship](https://www.karllhughes.com/posts/five-takeaways-from-clean-code-a-handbook-of-agile-software-craftsmanship)\r\n- [Creating a Tech Startup without a Developer: the Lean Way](https://www.karllhughes.com/posts/creating-a-tech-startup-without-a-developer)\r\n- [Why I Gave Up Alcohol](https://www.karllhughes.com/posts/why-give-up-alcohol)\r\n- [Testing the Layers in a Microservice Architecture](https://www.karllhughes.com/posts/testing-layers)\r\n- I took a few days off to get married here...\r\n- [Know Your Competition When Hiring](https://www.karllhughes.com/posts/know-your-competition-when-hiring)\r\n- [When Student Loans Go Bad, We’re All on the Hook](https://medium.com/@karllhughes/when-student-loans-go-bad-were-all-on-the-hook-a31cbd62dd6e)\r\n- [Security for Engineers at Early Stage Startups](https://www.karllhughes.com/posts/security-tips-startups)\r\n- [Continuous Integration on a Budget](https://www.karllhughes.com/posts/continuous-integration)\r\n- [Knowing When Your Business is Ready to Launch](https://www.karllhughes.com/posts/when-to-launch)\r\n- [Guage Your Startup's Technical Maturity Level](https://www.karllhughes.com/posts/technical-maturity)\r\n- [Setting up a Remote Development Environment](https://www.karllhughes.com/posts/remote-development-environment)\r\n\r\n#### May\r\nIn May I am back to publishing my daily news commentary as I did in January:\r\n\r\n- [On-demand production and manufacturing](https://medium.com/@karllhughes/on-demand-production-d4c5a82e71ef)\r\n- [Building a PHP Command Line App with Docker](https://www.karllhughes.com/posts/php-docker-cli)\r\n- [Computer assisted prison terms](https://medium.com/@karllhughes/computer-assisted-prison-terms-15a584d8a54c)\r\n- [Trusting Security to the Internet of Things](https://medium.com/@karllhughes/trusting-security-to-the-internet-of-things-c55c302cb44e)\r\n- [The Economics of Restaurant Ownership](https://medium.com/@karllhughes/the-economics-of-restaurant-ownership-1a2b64728857)\r\n- [My First Weekend with Hyper.sh](https://www.karllhughes.com/posts/hyper-sh-weekend)\r\n- [The Age of Learning](https://medium.com/@karllhughes/the-age-of-learning-bceeb064ccb9)\r\n- [To Scale or Not To Scale?](https://medium.com/@karllhughes/to-scale-or-not-to-scale-37811aad9a70)\r\n- [When Humans and Robots are Indistinguishable](https://medium.com/@karllhughes/when-humans-and-robots-are-indistinguishable-1722a447646a)\r\n- [Home Ownership in 2017](https://medium.com/@karllhughes/home-ownership-in-2017-6c55163417c8)\r\n- [On Computer Science and Education](https://medium.com/@karllhughes/on-computer-science-and-education-68bb897ce50e)\r\n- [Explore vs. Exploit as an Architectural Choice](https://medium.com/@karllhughes/explore-vs-exploit-as-an-architectural-choice-e8893667b2f0)\r\n- [Disruption in Higher Education](https://medium.com/@karllhughes/disruption-in-higher-education-101e8843cc63)\r\n- [Continuous Integration and Deployment for PHP Command Line Apps](https://www.karllhughes.com/posts/php-docker-ci)\r\n- [\"Freemium\" Stock Trades](https://medium.com/@karllhughes/freemium-stock-trades-a19ec722b540)\r\n- [The Flattening Communication Pipelines](https://medium.com/@karllhughes/the-flattening-communication-pipelines-172101f21011)\r\n- [The Fine Line Between Impatience and Prudence](https://medium.com/@karllhughes/the-fine-line-between-impatience-and-prudence-559c337c69a4)\r\n- [The Value of Backups](https://medium.com/@karllhughes/the-value-of-backups-af49a3fa3155)\r\n- [The “Not my Fault” Mentality](https://medium.com/@karllhughes/the-not-my-fault-mentality-56e7565c13f4)\r\n- [Fitness as a Way of Life](https://medium.com/@karllhughes/fitness-as-a-way-of-life-ddcc40355071)\r\n- [Bad News for Patent Trolls](https://medium.com/@karllhughes/bad-news-for-patent-trolls-90aebd984fb)\r\n- [What Really Matters When Exploring New Technology](https://medium.com/@karllhughes/what-really-matters-when-exploring-new-technology-eb8e8ab54b9)\r\n- [The Age of Privacy is Over](https://medium.com/@karllhughes/the-age-of-privacy-is-over-23f5cc2644e7)\r\n- [Prioritization is Always Relative](https://www.karllhughes.com/posts/prioritization-relative)\r\n- [Every Company Must be a Technology Company](https://medium.com/@karllhughes/every-company-must-be-a-technology-company-4cda5b4ddb3)\r\n- [Rethinking the Role of the Postal Service](Rethinking the Role of the Postal Service)\r\n- [Writing a PHP Command Line Script](https://medium.com/shiphp/writing-a-php-command-line-script-31073babdef)\r\n- [Making Your First Website with PHP](https://medium.com/shiphp/making-your-first-website-with-php-98a75f64e625)\r\n- [Working with Arrays in PHP](https://medium.com/shiphp/working-with-arrays-in-php-71f45c80ea92)\r\n\r\n#### June\r\nIn June, I'm starting a new blog: [Shiphp](http://shiphp.com). Shiphp is a collection of PHP tutorials starting with simple things like arrays and functions, and moving into more advanced topics like using Docker with PHP.\r\n\r\n- [Writing a PHP Command Line Script](https://medium.com/shiphp/writing-a-php-command-line-script-31073babdef?source=---------22)\r\n- [Making your first website in PHP](https://medium.com/shiphp/making-your-first-website-with-php-98a75f64e625?source=---------21)\r\n- [Working with Arrays in PHP](https://medium.com/shiphp/working-with-arrays-in-php-71f45c80ea92?source=---------20)\r\n- [Introduction to Loops in PHP](https://medium.com/shiphp/introduction-to-loops-in-php-6e5d5e3ef96c)\r\n- [Functions in PHP](https://medium.com/shiphp/writing-functions-in-php-37e551b4807f?source=---------18)\r\n- [Type hinting and return types in PHP 7](https://medium.com/shiphp/type-hinting-and-return-types-in-php-7-ae1513c4da6d?source=---------17)\r\n- [Running a PHP script in a Docker container](https://medium.com/shiphp/running-a-php-script-in-a-docker-container-d9e6142bae11?source=---------16)\r\n- [File uploads in PHP](https://medium.com/shiphp/file-uploads-in-php-c035eeebd4a7?source=---------15)\r\n- [Classes in PHP](https://medium.com/shiphp/introduction-to-classes-in-php-57ca9569a2f3?source=---------14)\r\n- [Conditional operators](https://medium.com/shiphp/conditional-operators-in-php-8f528aec4c82)\r\n- [Running a PHP web application within a Docker container](https://medium.com/shiphp/running-a-php-web-app-in-a-docker-container-8df1ee15c019)\r\n- [Installing Composer packages using Docker containers](https://medium.com/shiphp/installing-php-packages-with-docker-and-composer-1fb907637863)\r\n- [Try/Catch blocks in PHP](https://medium.com/shiphp/try-catch-blocks-in-php-eb8029dd8d94)\r\n- [Using PHP environmental variables in Docker containers](https://medium.com/shiphp/environmental-variables-in-php-and-docker-cae58177e679)\r\n- [Running a PHP/MySQL application in Docker containers](https://medium.com/shiphp/using-docker-to-run-a-php-and-mysql-application-b89f89098cc5)\r\n- [Running a PHP/Postgres application in Docker containers](https://medium.com/shiphp/running-php-application-with-postgres-and-docker-9c2cb1b1168)\r\n- [Running PHPUnit tests in Docker containers](https://medium.com/shiphp/introduction-to-writing-unit-tests-in-php-with-phpunit-and-docker-f55931c985ee)\r\n- [Switch statements in PHP](https://medium.com/shiphp/switch-statements-in-php-d6261da7ee4a?source=---------5)\r\n- [Running a SlimPHP application in Docker containers](https://medium.com/shiphp/running-a-slimphp-application-in-docker-containers-d0c1c7d57b59?source=---------4)\r\n- [Array functions in PHP](https://medium.com/shiphp/array-functions-in-php-8866348f776?source=---------3)\r\n- [Interfaces and Abstract Classes](https://medium.com/shiphp/introduction-to-interfaces-and-abstract-classes-6609b73f5a80?source=---------2)\r\n- [Running Wordpress with Docker containers](https://medium.com/shiphp/running-wordpress-with-docker-containers-49b3cda55f49?source=---------1)\r\n- [Running a Laravel Application in Docker](https://medium.com/shiphp/running-a-laravel-application-in-docker-2c3f90fc4bef)\r\n\r\n#### July\r\nIn July, I continued to work on my book, [CTO Patterns](https://github.com/karllhughes/cto-patterns).\r\n\r\n#### August\r\nIn August, I worked on several new writing projects.\r\n\r\n- I reorganized my [CTO Patterns](https://github.com/karllhughes/cto-patterns) book outline and got some more work done on it.\r\n- I wrote 10,000 word eBook for [Shiphp.com](https://www.shiphp.com/) called \"Building PHP Applications in Docker\"\r\n- I wrote the [Side Project Marketing Checklist](https://www.sideprojectchecklist.com/) and a few blog posts related to it:\r\n  - [The Power of Marketing on Linkedin](https://www.linkedin.com/pulse/power-marketing-karl-hughes)\r\n  - [How the Side Project Checklist went viral](https://www.karllhughes.com/posts/side-project-checklist)\r\n  - [Why Side Projects Need Marketing](https://www.sideprojectchecklist.com/2017/why/)\r\n  - [Email Marketing Tools for Side Projects](https://www.sideprojectchecklist.com/2017/email-marketing-tools/)\r\n  - [How to Use the Side Project Marketing Checklist](https://www.sideprojectchecklist.com/2017/how-to-use/)\r\n  - [Survey Tools for Side Projects](https://www.sideprojectchecklist.com/2017/survey-tools/)\r\n  - [Contributing to the Side Project Marketing Checklist](https://www.sideprojectchecklist.com/2017/making-a-contribution/)\r\n  - [Landing page tools for side projects](https://www.sideprojectchecklist.com/2017/landing-page-tools/)\r\n- I wrote about my [upcoming presentation for the API Strat & Practice conference](https://www.karllhughes.com/posts/api-strat-2017-presentation)\r\n- I also wrote an article for php[architect] magazine that was [published in their September issue](https://www.phparch.com/magazine/2017-2/september/).\r\n\r\n#### September\r\nThis month, I'm working on a blog post for Codeship, more content for the Side Project Checklist, and more blog posts for Shiphp.com.\r\n\r\n#### October - December\r\nComing soon!\r\n\r\nI'll keep the lists above updated every month or so for my own accountability as well as for anyone who's interested. Thanks for reading, and if you get inspired to write something every day, [let me hear about it on Twitter](https://twitter.com/KarlLHughes).","type":"blog","imageUrl":"https://i.imgur.com/JiFNfkd.jpg","postUrl":"","tags":[{"_id":"writing"},{"_id":"goals"},{"_id":"productivity"}],"createdAt":{"$$date":1485715866466},"updatedAt":{"$$date":1504730912734}}
{"_id":"3d-printing-2012","title":"3D Printing and the Future of Manufacturing","content":"*I wrote this post in 2012 for PostDesk. You can read the entire article [on their archive](http://archive.postdesk.com/3d-printing-manufacturing-future).*\r\n\r\n-----\r\n\r\nImagine that you are preparing a dinner party, and you break one of your Great Aunt Sally’s 120 year old ceramic cups. You’ve got a set of 7, and 8 guests coming to dinner.  “No worries,” you think, “I’ll just scan one of the others and print a new one before they arrive!”\r\n\r\nIt may sound like science fiction, but it’s probably not as far off as you think. 3D printing is finally moving away from specialized prototyping and reaching the consumer market. I spoke with two leading minds in the industry about the potential they see in 3D printing, and the way that it will change the way goods are produced forever.","type":"link","imageUrl":"https://media.postdesk.com/wp-content/uploads/2012/05/3d-printing-buildings.jpg","postUrl":"http://archive.postdesk.com/3d-printing-manufacturing-future","tags":[{"_id":"manufacturing"},{"_id":"3d-printing"}],"createdAt":{"$$date":1493645828428},"updatedAt":{"$$date":1493645892725}}
{"_id":"7-traits-successful-startup-engineers-must-have","title":"7 Traits Successful Startup Engineers Must Have","content":"Last week I got my first article published in [the Daily Muse](https://www.themuse.com/advice/7-things-startups-want-in-engineers-besides-knowing-how-to-code). Here's a sample, but be sure to check out the link below for more:\r\n\r\n> It’s hard for an engineer to ignore the allure of [working for a small, agile startup](https://www.themuse.com/advice/is-a-startup-job-right-for-you)—especially if you’ve spent some time in the corporate world. Startups often provide an opportunity to be more involved the overall business, as well as less bureaucracy and a more flexible work environment. That said, the engineering skills and personality traits that made you successful in a more traditional career path aren’t necessarily the ones that will entice a startup to hire you.\r\n\r\nRead the rest of the article on The Daily Muse, and let me know what you think.","createdAt":{"$$date":1418630417000},"updatedAt":{"$$date":1492014626711},"imageUrl":"","postUrl":"https://www.themuse.com/advice/7-things-startups-want-in-engineers-besides-knowing-how-to-code","type":"link","tags":[{"_id":"the-muse"},{"_id":"startups"},{"_id":"programming"}]}
{"_id":"a-personal-update-for-those-who-are-interested","title":"A Personal Update for Those Who are Interested","content":"I've been in Chicago just over a year now, and it's crazy to think about how much I've learned and lived since I moved up here after graduation. This is just a personal update on my past year, so if that doesn't interest you, feel free to read something else. Go ahead, I won't be offended.\r\n\r\n## An Update on Uloop/UWire\r\n\r\n[I moved to Chicago](/posts/moving-to-a-new-place-my-first-post-in-chiago) to pursue a role with Uloop where I am now responsible for managing our social media, building our news organization (now 500+ writers strong), and other various marketing-related tasks. We recently downsized the company to three full-time employees, so I've taken on more work than ever. Still, I love it, and it's been eye-opening to see how down and dirty the \"real\" startup life can be.\r\n\r\nWe've also started to explore content marketing, which has been a great way to help us fund news production. This month, we landed our first big national contract with Kaplan Test Prep to help us sponsor even more student news. It's a great job, and they're sending me down to speak at the [National College Media Convention in New Orleans](http://nola13.org/) this year. It's been a while since I did any public speaking, so I'm pretty pumped to get back into it. Still, I'm ready to be back in something that _I_ run, so I've started to plan and carry out my next entrepreneurial venture...\r\n\r\n## Introducing JobBrander\r\n\r\nI have been recruiting, interviewing, and managing interns at Uloop for about two years now, and one thing I've learned is that I am passionate about helping young professionals find a job that gives them purpose. In January, I started a job hunting site at JobBrander.com, and in the past month, it was featured in [Crane's Chicago Business](http://www.chicagobusiness.com/article/20130723/NEWS07/130729951/party-booking-goes-online-fundraising-goes-social-and-more), I've set up meetings with several of Chicago's biggest employers, and I have established relationships with about two dozen college career services centers to help me find interns. The business model is simple: I'll find, interview, and pass along 5 awesome potential interns. You choose the one you want, and don't pay a dime until they start working for you. It's basically freelance recruiting for the internship job market. I've got the first couple test customers lined up, and am hoping to make this my full time job within 9 months.\r\n\r\n## Personal stuff in case you want that...\r\n\r\nPersonal life? What's that? Oh, you mean the 7 hours of sleep I get, yeah that's going well too (just kidding!).\r\n\r\nI made a commitment to start improving my health this year. I went vegetarian two months ago ([read why here](/posts/why-ive-decided-to-go-vegetarian/)), and while I don't \"work out,\" I do walk at least 4 miles every day. I feel better, eat healthier, and cook more. Beyond that, I've tried my hand at online dating, attended a number of interesting meetups, and gotten involved with as many tech startup events as I can. It's very hard to separate your business and personal lives when you're an entrepreneur, so most of my friends here double as business connections.","createdAt":{"$$date":1376620795000},"updatedAt":{"$$date":1487631546156},"imageUrl":"https://i.imgur.com/c3fpm2n.jpg","postUrl":"http://karllhughes.com/?p=479","type":"blog","tags":[{"_id":"personal"},{"_id":"chicago"}]}
{"_id":"a-proposal-for-non-profit-search-engines","title":"A Proposal for Non-Profit Search Engines","content":"*Ever since Google became a household name people have been worried about what they would start doing with our data. Back in 2012 when I wrote this, one solution that I was interested in was to create a non-profit, open-source search engine. The closest thing we have today is [DuckDuckGo](https://duckduckgo.com/), which is closed-source, but does not store personal data.*\r\n\r\n*This post is being republished as part of my [2017 writing project](https://www.karllhughes.com/posts/2017-writing-goal), but it was first posted here in March, 2012.*\r\n\r\n-----\r\n\r\nLately people have been making all sorts of noise about [Google's changes to their search engine](http://www.zdnet.co.uk/news/security/2012/02/23/consumer-group-takes-google-privacy-complaint-to-ftc-40095110/). As you probably know, Google is the [most widely-used search engine](http://www.comscore.com/Press_Events/Press_Releases/2012/2/comScore_Releases_January_2012_U.S._Search_Engine_Rankings) in the world, and the company now offers hundreds of other web based services to add value to their users.\r\n\r\nPersonally, I think Google has done a great job improving search over the past decade and a half, but we are reaching a point where Google's interests may collide with offering honest search results to users.\r\n\r\nFor example, Yelp's IPO statement cites Google as both its [biggest asset for gaining new users as well as its biggest competitor](http://seekingalpha.com/article/399831-yelp-has-a-google-problem). For those who don't know, Yelp is a local review site that recently [started trading publicly on the NYSE](https://www.google.com/finance?client=ob&q=NYSE:YELP). Because the site is the largest review website of its kind, it naturally gathers much of its traffic from users who use Google to search for local businesses - especially those without a website or strong social media presence. At the same time, Google has its own competing review aggregator, which means that if Google wanted, they could force their results to the top of the list every time. This could effectively _kill_ Yelp's ability to get new users, and raises a lot of questions about Google's monopoly on search and its effect on internet businesses. \r\n\r\n## The Wiki Model for Search\r\n\r\nFor the past year or two, Google's intentions to integrate search with its own services more deeply has become clear, and I've been considering what a non profit search engine might look like.\r\n\r\nA great model to look at for guidance is [Wikipedia](http://www.wikipedia.org/), the non-profit internet encyclopedia. Could having a crowdsourced, community-funded non-profit search engine be the way to save search engines from becoming cogs in a corporate advertising machine?\r\n\r\nEssentially, a non-profit search engine would allow users to drive improvements to the algorithm by reporting bad results or collaborating on improvements. I would envision a core team with many contributors - much like any open source project hosted on Github. While the basic functionality (crawling, link-tracking, etc.) would be the same as a search engine like Google, an impartial not for profit search engine could sidestep the obvious pitfalls like Google's [SPYW](http://searchengineland.com/googles-results-get-more-personal-with-search-plus-your-world-107285) and the aforementioned Yelp problem. Of course, there is room for abuse in this system as well, but the idea needs to be considered more seriously in the coming months or years.\r\n\r\nWhat do you think?  Should there be a major player in the search engine market that is not for profit? Would this actually help or is it even necessary? Let me hear your thoughts on [Twitter](https://twitter.com/KarlLHughes).","createdAt":{"$$date":1486216804000},"updatedAt":{"$$date":1487943604117},"imageUrl":"https://i.imgur.com/Gvh7XXo.jpg","postUrl":"http://karllhughes.com/?p=62","type":"blog","tags":[{"_id":"search"},{"_id":"google"},{"_id":"non-profits"}]}
{"_id":"a-strong-team-isnt-afraid-to-piss-each-other-off","title":"A Strong Team isn't Afraid to Piss Each Other Off","content":"Working in a small company can be quite taxing. We recently downsized to three full-time employees at Uloop, meaning that we all have more work and consequently more responsibilities and more stress. As you would expect, more stress also breeds higher tempers and shorter fuses - myself being no exception. If you've ever worked with me on something that I'm passionate about - as I am with [Uloop](http://www.uloop.com) - you'll know that I can be a bit brusque. It's hard not to think strongly about something when it is the controlling force in your life though. I mean, I left the engineering industry, my home state, and a lot of potential income by going the startup route, so it's pretty obvious why I want to see this thing succeed.\r\n\r\n### Just because there are fewer people in a startup doesn't mean that conflicts don't arise\r\n\r\nThe good thing about being in a startup with only three employees is that _everyone's opinion matters_. We _have_ a CEO, but the roles aren't that sharply defined. The reality is that all three of us need to be working together - regardless of our titles - in order to keep the train rolling, so when it comes to major company decisions, nobody is truly _in charge_. When we have conflicting opinions about the direction the business is heading, the emails we should be sending, or the partnerships we should be pursuing, there isn't one guy who makes all the decisions. We _all_ make the decisions, and there are plenty of times when we disagree. \r\n\r\n### The important thing is how you handle those conflicts\r\n\r\nSo when a major conflict comes up, what do you do? Do you call a vote? Do you diplomatically propose a give-and-take? Do you refuse to accept any answer besides your own? It depends. I believe that there are times when the decision is important enough to warrant a line in the sand. A lot of big-company conflict experts would disagree and say that we should always look for the win-win scenario, but when it comes to startups, that's just bull shit. There are plenty of times when somebody is wrong, and things don't get done fast when you compromise; they get done fast when someone makes them get done. \r\n\r\nFor example, one of Uloop's strengths in the past has been sales and customer acquisition. That's great! Getting new customers is awesome. It shows that your company is conveying its value proposition and that your pricing point is appropriate. What's not awesome is Uloop's customer service. So, knowing that we are a company who is very good at acquiring customers, but very bad at keeping them, I stood up in our last team meeting and put my foot down, \"We _will_ fail if we continue to pursue customers who we cannot adequately service.\" I went on to propose that we take no new business unless we can honestly provide more value than the customer expects of us. Period. No exceptions, and if we keep doing things the way we have been, I'll just leave because this company is doomed anyway. Addressing an issue that everyone knew, but no one really wanted to push was a room-silencer.\r\n\r\n### Throwing down the gauntlet is scary. Make sure you know when it's worth it\r\n\r\nAt that point, our CEO could have fired me. No doubt. I've only been with the company for a year and he's been at it since 2007. It would have been justified, and I wouldn't have been incredibly surprised. Fortunately, he's a good boss and he recognizes that passion is the reason I work 60+ hours per week. It's also the reason that I will get up and say something when I think it's necessary. After a couple more hours of going back and forth, we all agreed that Uloop needs to take a new direction: one focused on customers and users first. We didn't compromise; we completely shifted our priorities from making quick bucks to winning lifelong customers.\r\n\r\nThis was a massive shift in our company's mindset, and it happened because one of our three team members was going to walk out if we didn't do it. If you're going to take a stand for something, make sure that it's worth it. For me, customer service is worth taking a stand, even if it does piss some of my coworkers off. The mark of a good team isn't a lack of conflict, it's the ability to handle these conflicts; it's listening to even the smallest member of the company; it's turning passion into value. That's why I believe Uloop still has a shot, and that's why I believe in what I do every day.","createdAt":{"$$date":1367979755000},"updatedAt":{"$$date":1491403022057},"imageUrl":"https://i.imgur.com/PiYl6Mm.jpg","postUrl":"http://karllhughes.com/?p=426","type":"blog","tags":[{"_id":"teams"},{"_id":"startups"},{"_id":"uloop"}]}
{"_id":"access-job-apis-php","title":"Jobs Common: Making Access to Job Board APIs Effortless in PHP","content":"If you're a developer and you want to create a job board aggregator or supplement your own site's job listings with listings from other providers, here's a dead simple way to do it. \r\n\r\n## Jobs Common: Standardizing Job Board API calls in PHP\r\n\r\n[Jobs Common](http://code.jobbrander.com/) is a project that @[stevenmaguire](https://twitter.com/stevenmaguire) and I have been working on for the past year to make accessing job board API's in PHP easier and the data they return more standardized. It started with just four job boards in May of 2015, and since then it has ballooned to provide **support for 13 job boards** including Indeed, Careerbuilder, SimplyHired, and Ziprecruiter.\r\n\r\nThis week, I relaunched the [documentation site](https://www.jobapis.com/) and released [a new demo application](https://github.com/karllhughes/jobs-common-demo) to make it even easier for developers to get started. Let's take a look at how easy using Jobs Common is vs. accessing job board APIs directly.\r\n\r\n### Example 1: Getting Jobs from Dice the Hard Way\r\n\r\nLet's say that you want to get the latest 'product manager' jobs from Dice's API. First, you need to [read through their documentation](http://www.dice.com/common/content/util/apidoc/jobsearch.html). Next, you'll need to figure out a curl request to make. You'll probably come up with something like this:\r\n\r\n```\r\nhttp://service.dice.com/api/rest/jobsearch/v1/simple.json?text=product+manager&city=Chicago,+IL\r\n```\r\n\r\nThe results you get from Dice will look something like this:\r\n\r\n```\r\n{\r\n \"count\": 1581,\r\n \"firstDocument\": 1,\r\n \"lastDocument\": 50,\r\n \"nextUrl\": \"/api/rest/jobsearch/v1/simple.json?areacode=&country=&state=&skill=&city=Chicago%2C+IL&text=product+manager&ip=&diceid=&page=2\",\r\n \"resultItemList\": [\r\n {\r\n \"detailUrl\": \"http://www.dice.com/job/result/10267593/288598?src=19\",\r\n \"jobTitle\": \"Product Manager\",\r\n \"company\": \"Restaurant.com\",\r\n \"location\": \"Arlington Heights, IL\",\r\n \"date\": \"2015-12-18\"\r\n },...]}\r\n ```\r\n\r\nNow, you'll need to decode the JSON string Dice's API returns, and parse those results using a PHP script. You'll need to cast each item in the results list as your own type of job object, and figure out what to do next. Admittedly, it's not that bad, but what if you wanted to do it for 3, 4, or 5 different job boards? That's where Jobs Common really shows its value.\r\n\r\n### Example 2: Getting Jobs from Dice with Jobs Common\r\n\r\nAs you can see on the [documentation page for the Dice provider](https://www.jobapis.com/open-source/dice/), getting jobs in a standard format using our jobs-dice package is just a few lines of code:\r\n\r\n```\r\n$client = new JobBrander\\Jobs\\Client\\Providers\\Dice;\r\n\r\n$jobs = $client->setKeyword('product manager')\r\n    ->setCity('Chicago')\r\n    ->getJobs();\r\n```\r\n\r\nThis will get you a [standardized Schema.org JobPosting object](https://schema.org/JobPosting) that can now be compared with the results returned from Careerbuilder, SimplyHired, or Indeed's APIs. If you want more, check out the documentation on [all the providers we currently support](https://www.jobapis.com/open-source/#Jobs-Common-API-Clients), and feel free to jump in if you'd like to contribute your own!","createdAt":{"$$date":1450811724000},"updatedAt":{"$$date":1505264807367},"imageUrl":"","postUrl":"http://www.karllhughes.com/?p=840","type":"project","tags":[{"_id":"php"},{"_id":"programming"},{"_id":"open-source"}]}
{"_id":"agile-at-startup","title":"Agile at a Startup","content":"The thing I really like about Agile is that it's meant to be different for everyone - there's no single \"perfect\" implementation - so while our flavor works for us, it might not be right for your team. Here's the way I implemented Agile at Packback.","createdAt":"2015-07-29T05:00:00.000Z","updatedAt":"2015-07-29T05:00:00.000Z","imageUrl":"","postUrl":"https://www.linkedin.com/pulse/agile-startup-our-product-process-packback-karl-l-hughes","type":"link","tags":[{"_id":"packback"},{"_id":"agile"},{"_id":"startups"}]}
{"_id":"america-the-country-of-escape-artists","title":"America: The Country of Escape Artists","content":"*This post was originally published in December, 2012, but with the latest round of anti-immigration sentiment in America, it's still highly relevant today.*\r\n\r\n-----\r\n\r\n**Communities across America are experiencing injustice and turmoil, and all we want to do is \"get out.\"**\r\n\r\nWe have a serious problem here in America. We can't face up to our own problems. While this statement could reflect our personal lives, political shortcomings, or any number of issues, today I'm referring to the loss of the American community. \r\n\r\n## The typical city scenario\r\n\r\nLet me offer up a fictional story of a \"typical\" American city with historical evidence buried in thousands of cities across the country:\r\n\r\n### 1. The introduction of an unfamiliar group to a middle or upper-class neighborhood\r\n\r\nThe \"problem\" starts when a new group of people begins to migrate into a previously settled neighborhood. Sometimes, this move is facilitated by necessity (as in the case of many African Americans who moved into [urban centers as farming declined in the 1950's and 1960's in the US](http://en.wikipedia.org/wiki/Great_Migration_(African_American))), immigration from another country (as in the case of [Hispanics in Texas, Florida, and now throughout the United States](http://en.wikipedia.org/wiki/Mexico%E2%80%93United_States_border)), or government intervention (as in the case of the shameful case of our country's handling of the [American Indians during the 1800's](http://en.wikipedia.org/wiki/Native_Americans_in_the_United_States#Removals_and_reservations)).\r\n\r\n### 2. Disparity or differences become clear\r\n\r\nThe neighborhood's current residents may accept it at first. A few of the especially intolerant ones will immediately move out to greener pastures  but generally speaking, it will take a while for the differences to be fully perceived. Slowly, the immigrating group will go from being one or two families, to a considerable part of the population. Often times, this new group has different values, traditions, or family norms than the existing group. As these two groups collide, tensions will rise, and conversations about the \"problem\" will become more public. The issues are exacerbated by obvious income disparity, religious differences, and over-hyped criminal activity by the new group.\r\n\r\n### 3. The \"flight\" begins\r\n\r\nAs the original group sees their old neighbors move or die off only to be replaced by the new-comers, they get scared. With the rare exception of a desire for more land or space (which they probably don't really need), **fear is the only real explanation for leaving a previously adequate neighborhood for a new one.** The moving out of the old group expands exponentially as old group members fear financial loss, educational deficiencies, or crime. The fears, of course, would never become reality if no one from the old group bought into them, but as soon as the tidal wave begins, it's very hard to stop.\r\n\r\n## So why is this a problem?\r\n\r\nAs income levels between the poor and rich in America continue to diverge, we often hear debate between those who want more taxes on the rich in order to help the poor, and those who want fewer taxes on the rich in order to spurn job creation and investment. This debate is moot if a significant portion of Americans made a commitment to their community, but that's just not the case. Now, you may scream _Commie!_ at me around this point, but I am by no means advocating for forced government intervention into wealth redistribution. I think it's safe to say that the [Communist experiment has pretty much failed](http://www.experienceproject.com/stories/Hate-Communism/1428263). Mandating kindness and mutual dependency is degrading to humanity. Our societies have managed to thrive when they've been able to work together towards a common goal. No great achievement was made by a single man or woman in isolation, and no two people are exactly the same in any way, yet our differences are the reasons we continue to expand and grow. \r\n\r\n## The solution lies in every individual, especially those with influence\r\n\r\nUnfortunately, no _one_ person can fight the tidal wave of the crumbling community and turn the tide alone. But, there is a way to fix this problem, and it doesn't revolve around higher taxes or cutting government assistance. It just takes our most influential and recognized figures having the balls to take a stand and shift our perceptions.\r\n\r\nFor example, what would happen if Barack Obama moved the White House to [Anacosta](http://en.wikipedia.org/wiki/Anacostia)? What if Donald Trump built his next tower on the [South Side of Chicago](http://en.wikipedia.org/wiki/South_Side,_Chicago)? What if Herman Cain moved to [South Atlanta](http://en.wikipedia.org/wiki/South_Atlanta)? What if [David Koch](http://en.wikipedia.org/wiki/David_H._Koch) put his philanthropy into practice and built a home in [Brownsville](http://en.wikipedia.org/wiki/Brownsville,_Brooklyn)?\r\n\r\nThe move of those highly influential, wealthy, and noteworthy figures could be the turning point in the perception of certain areas. Imagine our best community members moving into our \"worst\" communities. I know, it's naive to think it will happen, but it's a blog post. I can dream, right?\r\n\r\n## But, what are _you_ doing to help?\r\n\r\nI've talked about what our world's top minds could do to change the perception of communities, but they're not reading this blog. _You are_. Even if you're just one individual, you do have a certain sphere of influence. How are you using it? Are you just looking for a way to get out of your \"shitty\" apartment, or are you looking for a way to make the place you live in better? Are you always looking at people around you in disgust, or are you looking at them for their potential? Do you talk about how you can make enough money to live like a king, or do you talk about how you want to help make a pauper into a tradesman?\r\n\r\n## My final challenge: Start making your community better. Don't just look for a way _out_.\r\n\r\nIt isn't easy. You'll be taking the road less traveled. That said, the feeling you get from helping another person succeed is better than that of making yourself succeed. Life isn't about accumulating the most stuff, it's about experiences. In the end, we'll all die and be forgotten, but the impact you have on others while you live will remain as long as humanity does.","createdAt":{"$$date":1488088816000},"updatedAt":{"$$date":1488116690571},"imageUrl":"https://i.imgur.com/rfwRZwg.jpg","postUrl":"http://karllhughes.com/?p=316","type":"blog","tags":[{"_id":"immigration"},{"_id":"politics"},{"_id":"america"}]}
{"_id":"api-strat-2017-presentation","title":"Presentation at API Strategy & Practice, 2017: Testing Layers","content":"This year, I decided to make speaking at a conference one of my goals (and [I made a big list of conferece CFP dates that you can use as well](https://www.karllhughes.com/posts/tech-conference-cfps)). A couple months ago I was invited to speak at the Linux Foundation's [API Strategy & Practice Conference](http://events.linuxfoundation.org/events/apistrat) in Portland, Oregon.\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NcQryexNKhM?rel=0&showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\n#### Links\r\n- [Watch on Youtube](https://www.youtube.com/watch?v=NcQryexNKhM)\r\n- [Get the slides](https://drive.google.com/open?id=1va2Ny5a5lEu1fKBa6w5XYDAqaE2otiBR6bZFgjncWxA)\r\n- [Talk information](https://apistrat17.sched.com/event/414b17fdda21239616cac543f54c542f)\r\n\r\n## About API Strategy & Practice\r\n\r\nI was [really excited about this conference]() even before getting chosen as a speaker. We've been building microservices with REST APIs here at The Graide Network since I joined last summer, and before that we used similar architecture at Packback. This conference is put on by the Linux Foundation and the [Open API Initiative](https://www.openapis.org/), both great organizations with a huge influence in the open source community. While I'm not building all my projects with the Open API spec (yet), I have used their specifications in Swagger and AWS's API Gateway.\r\n\r\nMy talk was about creating a test plan for distributed architectures.\r\n\r\n## What is unique about testing APIs?\r\n\r\nIf you're building software that is intended to be accessed over a REST API, you're most likely using HTTP as your border between applications or services. This means that in your automated testing, you need to test each API internally (through unit and integration tests) as well as how it interacts with its siblings and dependent services.\r\n\r\nI've actually [written a brief post on this topic here on my blog before](https://www.karllhughes.com/posts/testing-layers), but this presentation was a bit more generalized since my audience is using a variety of languages and frameworks. Plus, I had to get a lot of information into my 20 minute time slot.\r\n\r\n## Why do you need to test distributed systems?\r\n\r\nI'm glad you asked because in addition to addressing this question in the talk, I was invited to write a [blog post about it for Linux.org](https://www.linuxfoundation.org/blog/testing-important-distributed-software/).\r\n\r\nIf you have feedback for me on this talk or others, feel free to [find me on Twitter](https://twitter.com/karllhughes).","type":"speaking","imageUrl":"https://i.imgur.com/Pi78blE.jpg","postUrl":"","tags":[{"_id":"conferences"},{"_id":"presentations"},{"_id":"engineering"},{"_id":"apistrat"}],"createdAt":{"$$date":1509699618778},"updatedAt":{"$$date":1509725649169}}
{"_id":"api-strat-talks-excited","title":"5 Talks I'm Excited for at #APIStrat 2017","content":"This year [I'll be speaking](https://www.karllhughes.com/posts/api-strat-2017-presentation) at the [Linux Foundation's API Strategy and Practice conference](http://events.linuxfoundation.org/events/apistrat), but I'm not just excited to go as a speaker. There are some [great looking sessions on the schedule](https://apistrat17.sched.com/), so I figured I would take some time to highlight the talks I'm most excited about this year. If you've got others I should look out for, let me [know about them on Twitter](https://twitter.com/karllhughes).\r\n\r\n### 1. [Embracing JSON Schema](https://apistrat17.sched.com/event/BiDV) - Jeremy Whitlock, Google\r\nI've been considering a more sustainable redesign of our API interfaces at The Graide Network, and JSON Schema seems like a good standard to adopt. I'm looking forward to hearing more about it from a developer who's implemented it at a larger company like Google.\r\n\r\n### 2. [Breaking a Monolith](https://apistrat17.sched.com/event/BiDH) - Ryan Harrison, BioBright\r\nThis is basically [what I've been doing for the past year](https://www.thegraidenetwork.com/blog-all/2016/9/12/modernizing-legacy-code-at-the-graide-network) at The Graide Network. Ryan's experience sounds very similar, so I'm hoping to hear how he's been doing the refactor at BioBright and how it might help us in our journey towards microservices.\r\n\r\n### 3. [Building Serverless APIs](https://apistrat17.sched.com/event/CWLZ) - Sai Vennam, IBM\r\n\"Serverless\" is a buzzword, so while I take any talk about serverless applications with a grain of salt, I do see a lot of potential in this method of application development. I like the idea of moving more infrastructure responsibility to third party services, so hopefully this talk will give me a usable strategy for making it happen.\r\n\r\n### 4. [Pain-Free Microservices Integration Using Contract Tests](https://apistrat17.sched.com/event/BiDb) - Ama Asare & Danilo Sato, ThoughtWorks\r\nI'm a big nerd for testing and testing architectures - that's what my talk is about after all - so this one from Ama and Danilo at ThoughtWorks sounds like it will be right up my alley. I've never heard the term \"Contract Tests\" before, but I'm guessing it's similar to my method of integration testing service connections. I guess I'll see.\r\n\r\n### 5. [Building AI Powered APIs](https://apistrat17.sched.com/event/CAtJ) - Randall Hunt, Amazon Web Services\r\nI'm not very experienced in Machine Learning or Artificial Intelligence, so this talk sounds fascinating to me. I know that there's a lot of potential for this kind of application and the tools are getting much better, so I'm really looking forward to what Randall has to say on the topic.","type":"blog","imageUrl":"https://i.imgur.com/JbIHdHV.png","postUrl":"","tags":[{"_id":"speaking"},{"_id":"conferences"},{"_id":"apistrat"}],"createdAt":{"$$date":1508340180141},"updatedAt":{"$$date":1508340240134}}
{"_id":"are-you-going-to-be-a-good-ceo-heres-how-you-can-find-out","title":"Are You Going to be a Good CEO? Here's How You Can Find Out","content":"[Robert Scoble](http://scobleizer.com/) has always been one of my big influences. His job is to go around and interview CEO's and founders of interesting startups, so he's definitely got some know-how when it comes to business. He posted this answer on Quora, so I figured I would share. The original question was \"[What separates the top 10% of startup CEOs from the rest?](http://www.quora.com/Startup-Founders-and-Entrepreneurs/What-separates-the-top-10-of-startup-CEOs-from-the-rest)\"\r\n\r\nHere's [Robert's reply](http://www.quora.com/Startup-Founders-and-Entrepreneurs/What-separates-the-top-10-of-startup-CEOs-from-the-rest/answer/Robert-Scoble-1):\r\n\r\nI've interviewed thousands of CEOs and some things that stand out to me:\r\n\r\n**1. Good at hiring AND firing.** Whenever you find a really great CEO you find someone who has a knack for hiring. That means selling other people on your dream or your business. Especially when it doesn't seem all that important or seems very risky. I used to work for a CEO who was awesome at hiring, but couldn't fire anyone. Doomed the business. Many of the best CEOs get others to follow no matter what.\r\n\r\n**2. Builds a culture, not just a company.** The best CEOs, like Tony Hsieh at Zappos, build a culture that gives everyone a mission. They stand out in a sea of boring companies.\r\n\r\n**3. Listens and acts.** Many CEOs want to tell you what they are doing, but the best ones listen to feedback, and, even, do something with that feedback. My favorites even give credit back. Mike McCue, CEO of Flipboard, tells audiences that I was responsible for a couple of key features.\r\n\r\n**4. Is resilient.** AirBnB took 1,000 days for its business to start working. Imagine if they gave up on day 999? The best CEOs find a way to dig in and keep going even when it seems everything is going against them.\r\n\r\n**5. Has vision.** Let's be honest. There are a lot of nice CEOs but if you don't have the ability to build a product that matters to people, then no one will remember your name. Can you see a way to make billions with wearable computers? I guarantee some can and they are the CEOs who will bring me interesting new products.\r\n\r\n**6. Stays focused.** A friend who worked for Steve Jobs told me that what really made him different is that Jobs wouldn't let teams move off their tasks until they really finished them.\r\n\r\n**7. Speaks clearly.** A great CEO is clear, crisp, concise. Quotable. So many people just aren't good at telling a story in a way that's easy to remember. The best are awesome at this. Since it's the CEO's job to tell the company's story, it's extremely important that this person be able to clearly tell a story about the company and the product.\r\n\r\n**8. Is a customer advocate. **The best CEOs understand deeply what customers want and when they are making anti-customer choices.\r\n\r\n**9. Good at convincing other people.** CEOs have to deal with conflicting interest groups. Customers often want something investors don't. So, a good CEO is really great at convincing other people to get on board, even at changing people's opinions.\r\n\r\nExtra credit if you are:\r\n\r\n* **Nice.** Yeah, Steve Jobs wasn't always nice. But he was an exception in many ways. People remember assholes and try to avoid them. That's not something that's easy to work around.\r\n* **A builder.** Yeah, you can be a CEO if you aren't a builder, but you are swimming up stream. It's one reason I haven't run my own business. The CEOs that seem to work the best are ones who COULD write some code, or build a new design using a 3D printer.\r\n* **Integrity.** The best CEOs are survivors and it's really hard to survive if you have dirt in your closet or treat people differently behind closed doors than you do in public.\r\n\r\nWhat do you think? Is there anything you'd add to his list?","createdAt":{"$$date":1360797855000},"updatedAt":{"$$date":1488316116141},"imageUrl":"","postUrl":"http://karllhughes.com/?p=358","type":"blog","tags":[{"_id":"business"},{"_id":"ceo"},{"_id":"startups"}]}
{"_id":"are-you-placing-the-blame-internally-or-externally","title":"Are You Placing the Blame Internally or Externally?","content":"*I was less sympathetic when I wrote this in 2012 than I am now, but I stand by the overall message here. Placing blame for your problems on external sources is a bad habit, no matter how many of those external sources really are working against you.* \r\n\r\n*What I didn't say when I first published this, but now realize is that my perception is undoubtedly skewed. I've had it easy being a college-educated white male, so I don't know what it would be like to have the demographic deck stacked against me. That said, the most successful people I've known of any race, gender, or culture didn't sit around and accept that things were bad for them. They got out and took responsibility for making them better.*\r\n\r\n-----\r\n\r\nI've started to realize that there are two kinds of people in the world:\r\n\r\n1.  Those who take responsibility when they make mistakes\r\n2.  Those who place blame on others when they make mistakes\r\n\r\nSure, there are those rare few [who cross over from one to the other side](http://www.sixwise.com/newsletters/06/05/24/how-to-take-responsibility--amp-stop-blaming-others-even-if-others-are-to-blame.htm), but generally, most of us get established and don't ever change. So, what's the big deal? Who cares where you place your blame anyway? \r\n\r\n**_You_ should care** and here's why: _people who cannot accept responsibility for their life are doomed to be a victim of their circumstances._ You know [the excuses you hear people make](http://www.livestrong.com/article/14698-accepting-personal-responsibility/#ixzz20T3d24Is) (and maybe make yourself):\r\n\r\n*   It's not my fault I am the way I am.\r\n*   Life is unfair! There is no sense in trying to take control of my life.\r\n*   God has asked too much of me this time. There is no way I'll ever be able to handle this.\r\n*   My parents made me what I am today!\r\n*   My family influenced who I am and what I will be; I can't change that.\r\n*   Racism, bigotry, prejudice, sexism, ageism and closed-mindedness all stand in the way.\r\n*   No matter how hard I work, I will never get ahead.\r\n*   You have to accept the luck of the draw.\r\n\r\nI can tell you now that _every one of those excuses is bull shit._ If you believe that others are holding you down, they they always will, but if you believe you are more powerful than your circumstances, they _you_ will be in control. \r\n\r\n## Accepting responsibility means taking the good with the bad\r\n\r\nThe reason that people don't want to accept full responsibility for their actions is that they don't want to take the blame for their mistakes. Sure, everyone wants to take some credit for being a part of a successful team, venture, or decision, but taking the blame for failure is what makes a truly great person different.\r\n\r\n## How does this relate to business?\r\n\r\nWell, if you're an entrepreneur, _you_ are your business. Therefore, if you're the type of person who blames others for your failures, your business will never accept responsibility for its failures. You won't admit you were wrong to your customers; you won't admit that you missed that deadline for your taxes; you won't examine your own bad decisions when your business comes crashing down around you.\r\n\r\n_Passing on external blame is deadly for entrepreneurs._ So, next time you think that the things going wrong in your life are someone else's fault, stop. Take a minute to look internally, and ask yourself, \"how could _I_ have made this situation different?\" Nobody's perfect; making mistakes is natural. Success is determined by how you handle the mistakes you have made.","createdAt":{"$$date":1487138401000},"updatedAt":{"$$date":1487163230585},"imageUrl":"https://i.imgur.com/7BEUBEg.jpg","postUrl":"http://karllhughes.com/?p=216","type":"blog","tags":[{"_id":"entrepreneurship"},{"_id":"success"},{"_id":"accountability"}]}
{"_id":"ask-better-questions","title":"How We're Changing the World by Getting Students to Ask Better Questions","content":"![](https://i.imgur.com/TZOsRlwm.png)We've been shifting focus at Packback over the past year - it's what you do at a startup after all. When I first joined, we were all about textbooks, and while I think we still have a huge opportunity to disrupt that market, I'm really excited about changing the way students interact with each other because real learning doesn't happen by memorizing lists in a textbook; real learning happens when students are able to ask intelligent and informed questions, have difficult discussions, and interact with their peers. Here's a little more about what we've been working on at Packback and why it matters from my colleague Jessica Tenuta at TEDx in Normal, IL: https://youtu.be/SfhSrk2q-GA Let me hear [your thoughts on Twitter](http://twitter.com/karllhughes).","createdAt":"2015-12-14 06:12:51","updatedAt":"2015-12-14 06:12:51","imageUrl":"","postUrl":"http://www.karllhughes.com/?p=836","type":"blog"}
{"_id":"be-indispensable","title":"The Secret to Staying Employed: Be Indispensable","content":"*With everyone talking about [automation and the widespread job loss that it may lead to](https://www.nytimes.com/2016/12/21/upshot/the-long-term-jobs-killer-is-not-china-its-automation.html), making yourself indispensable is more important than ever. I was naive when I wrote this though. It oversimplifies complex industry trends, and puts a lot of responsibility on workers who were probably intentionally led to believe that their jobs were safe when they really weren't.*\r\n\r\n*That said, I do believe in personal responsibility, and I still believe that the people most likely to avoid career obsolescence are those who take it on themselves to get really good at something and then keep an eye out for trends that may change it.*\r\n\r\n-----\r\n\r\nPeople almost never think that they should have been fired, but it's often their fault for not making themselves _indispensable_.\r\n\r\nEmployers don't have an obligation to keep employees on the books. In fact, good companies trim waste regularly - including personnel. When an employee isn't delivering your company the value that you pay them in salary/benefits, it's time for them to go. It's simple economics, and while I realize that personal relationships might make the decision difficult, this is just the reality of a well-run company. Sometimes people aren't worth keeping. \r\n\r\nFortunately, you're reading this, so I'll let you in on a secret: _it doesn't have to be you_. \r\n\r\nA job is not a sure thing, and I don't care if you just graduated from college or you have 20 years of experience; if you think that you're 100% safe in your job, you're just naive. Now, you can _greatly_ decrease your likelihood of being terminated, but it takes a committed approach to do so. Here's how you can become indispensable at a job:\r\n\r\n## Objective #1: Find Your Niche\r\n\r\nOnce you have a job, your first priority should be to find a niche. For example, I have a friend who works for a large medical device manufacturer. At a big company, it's easy to get lost in the crowd as just another employee, but she's made a conscious effort to dig herself into an important piece of the company's strategy. Right before she came into her job as a technical writing intern, the company acquired a small startup with _very_ specialized technology, and she took this opportunity to carve her niche. Most of the seasoned writers and technicians didn't want to learn the new systems that came with the acquisition, so when they started handing their work off to her, she set her mind to becoming _the expert_ on this new part of the business. In just a few months, she has become the company's go-to woman in regards to training, documenting, and on-boarding new employees in that part of the business. She travels internationally to teach the technology to others, and has found a valuable niche in a massive industry that will ensure her career is safe for decades. \r\n\r\n## Objective #2: Be the Best\r\n\r\nEven if you find a specialized area within your current company, it won't matter if you let someone else outshine you. You have to be _the best_ at your trade in order to become indispensable.\r\n\r\nAnother friend of mine with a specialized skill set - purchasing for Japanese auto manufacturing companies - has spent years making sure that he is the best man for the job he has. An American born citizen, he has committed himself to not only mastering the Japanese language, but also immersing himself in their cultural nuances. In college, he would watch Japanese TV shows and listen to Japanese pop music.\r\n\r\nWhen he got a job with a local auto parts manufacturer, he learned the language and traditions of their business. Soon after he started his first job, he was headhunted by numerous employers before taking a lucrative offer with a competitor in a nearby city. The point is that he didn't settle. He didn't just take a couple years of Japanese to fill his language requirement in college and then never use it. He took a skill that many other people have - speaking a foreign language - and became a fluent, culturally aware part of his company's business. Because he's better than 99.9% of his American-born Japanese-speaking counterparts in the automotive industry, he'll always have a good job.\r\n\r\n## Objective #3: Stay on Top of the Trends\r\n\r\nI can't imagine how many people have stopped at Objective 2 only to find themselves out of work a few years later. Finding a niche and becoming the best at what you do will get you nowhere if you don't pay attention to where the market or technology is going.\r\n\r\nFor example, I used to work at an huge appliance manufacturer in Kentucky. When I was there in 2007, the housing market was at it's precarious peak, and business was booming. Only the most attentive economists saw the bubble starting to crack, but for most of my coworkers at the company, the imminent implosion was invisible.\r\n\r\nI should note that for appliance manufacturers, the housing market is of massive importance. Most new appliances (upwards of 60%, if I remember correctly) go into new houses, so a hit to the housing market means less demand for appliance manufacturers as well. I worked with some brilliant engineers and business leaders who knew the ins and outs of appliances like nobody else in the industry. The company also employed thousands of highly skilled line-workers who built the high end models right there in our factory.\r\n\r\nAfter I left the company in 2008, the bubble burst, and over half of the employees found themselves unexpectedly without a job. The appliance arm of the business was almost sold off, and hundreds of experts in the area of appliance design and manufacture were out of work. They may have been the best in their industry, but they were a part of an industry that just didn't need so many people anymore. I'm sure most of them have bounced back by now, but if they had followed the trends and seen the market's weakness just a few months earlier, they might have been able to preemptively dodge the fallout.\r\n\r\nIt isn't always easy, but if you know your market, know the technology, and see the trends before they turn, you stand a much better chance at keeping yourself indispensable.\r\n\r\n*This post was first published in August, 2014 and was edited and republished as part of my [2017 daily writing goal](https://www.karllhughes.com/posts/2017-writing-goal).*","createdAt":{"$$date":1491292811000},"updatedAt":{"$$date":1491315795857},"imageUrl":"https://i.imgur.com/X9af9xC.jpg","postUrl":"http://karllhughes.com/?p=376","type":"blog","tags":[{"_id":"automation"},{"_id":"advice"}]}
{"_id":"be-unique-and-dont-wait","title":"Be Unique, and Don't Wait","content":"*This is another post I'm republishing as part of my [2017 daily writing project](/posts/2017-writing-goal). Like many of the others originally published in 2012, I was focused on inspiring people to action. Reading this almost five years later is inspiring, but also exciting, and I hope it helps some readers remember to take a few risks in life.*\r\n\r\n-----\r\n\r\nSo many young, aspiring professionals and entrepreneurs talk about how they _would_ do something unique, exciting, and world-changing if only...\r\n\r\nFill in the blank with whatever you want - money, time, knowledge - the point remains the same. Rather than take the first steps to pursue their dream, they sit and worry about why they think they can't do it...not yet at least. \r\n\r\n## Excuses be damned. Get started now!\r\n\r\n> _This is your one opportunity to do something that no one has ever done before and that no one will copy throughout human existence. And if nothing else, you will be remembered as the one guy who ever did this. This one thing._ - Natalie Portman in Garden State\r\n\r\nThe above quote is one of my favorites from Zach Braff's _[Garden State](http://www.imdb.com/title/tt0333766/)_. The film goes through one young man's experience coping with the loss of his mother, meeting a new love, and finding something that he is _truly_ passionate about. Even if it's not your favorite movie, there is something to be taken from that quote. **Every moment you create is unique. You just have to appreciate it.**\r\n\r\nPeople who are young and ambitious, think that the only way to change the world is to build the next Facebook, make headlines, and become super-rich.  Let's get real though; plenty of the world's greatest creators weren't even recognized within their natural lifetimes. _And even if you do get rich, you don't do it by waiting around for someone to help you out, do you?_ Of course not.\r\n\r\nEvery person who made something great happen, did it because he or she wanted to do it, not because someone else made it happen for them. So, my final encouragement to my fellow young, aspiring entrepreneurs is this: **Go. Just Go. Do Things. Make Things Happen. Stop Making Excuses.**\r\n\r\nEven if your first stab at changing the world is a total miss, you'll be one stab ahead of everyone who was too scared to make it. No one will ever be able to give you a foolproof formula for success - and if they do, they're full of shit - but by making an attempt, you'll find yourself quickly advancing ahead of those who were too scared to try. The truth is that if you attempt to change the world in your 20's and you fail, you have a lifetime to make up for it and remain financially solvent. If you wait until you're 40 and have children, you're risking 100x more than you are now.\r\n\r\nSo, don't delay. Make big things happen today.","createdAt":{"$$date":1487830585000},"updatedAt":{"$$date":1487859982187},"imageUrl":"http://i.imgur.com/WZHD24r.jpg","postUrl":"http://karllhughes.com/?p=286","type":"blog","tags":[{"_id":"motivation"},{"_id":"success"}]}
{"_id":"bedrock-wordpress","title":"Bedrock: Bringing Modern PHP to Wordpress","content":"I cut my teeth writing websites in Wordpress, but I've fallen out of love with it over the past five years. Initially, Wordpress is exciting because within minutes you can bring a site up and make it live to the world. Even better, you can edit code straight from the dashboard and see your changes immediately right in the browser. Of course, it won't take long before you realize that this is a _terrible_ idea, and you'll either get lost in complexity or you'll have to start at square one learning [PHP the right way](http://www.phptherightway.com/). **What if Wordpress didn't have to be bad?** But what if a situation comes up where you want the ease of use of Wordpress _and _to use the best practices of modern PHP? That's where [Bedrock](https://github.com/roots/bedrock) comes in. ![bedrock for wordpress](https://i.imgur.com/oRh92Fb.png) Bedrock adds a few key features that make using Wordpress easier for developers without taking away the awesome features included in the platform for non-techies or the ecosystem of free themes and plugins. With Bedrock, you get:\n\n*   An improved folder structure that moves loading the app out of the root directory\n*   Theme and plugin management with [Composer](https://getcomposer.org/) (this is my favorite feature)\n*   Wordpress configuration with Dotenv files rather than a hardcoded php file\n\n**The Wordpress core** The powerful Wordpress core files are loaded in via Composer when you set up your first Bedrock app. What's nice about this is that upgrading Wordpress is as simple as redeploying your application. **Loading your own custom theme via Composer** Composer is PHP's go-to package manager. With the myriad themes and plugins available for Wordpress, it makes a ton of sense to use Composer as an easier way to manage them, but Bedrock is the first good implementation of this that I've seen. I implemented this in my blog by first creating my own theme as a Composer package and then including it in [my blog's composer.json file](https://github.com/karllhughes/KH-Blog/blob/master/composer.json#L22). Now when I make updates to the theme, they are pulled in via Composer rather than me trying to copy all the files manually. **Wordpress configs** Another weak point for Wordpress is the requirement that configuration variables (including your database connection) be either kept out of version control and manually added to a PHP file or checked into your app and modified on the server directly. [PHP's Dotenv project](https://github.com/vlucas/phpdotenv) has been integrated and it's a big improvement for development. If you'd like to try Bedrock out yourself, check out [my implementation on my personal blog](https://github.com/karllhughes/KH-Blog). I've also got a [theme you can use to get started](https://github.com/karllhughes/titeblog-theme) by loading it in your own composer file. Also, for more on improving Wordpress, check out my post on how I got my Wordpress site to [load in less than 1 second without upgrading the servers](https://www.karllhughes.com/2016/wordpress-1-second/).","createdAt":"2016-02-08 06:59:23","updatedAt":"2016-02-08 06:59:23","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=860","type":"blog"}
{"_id":"beginner-php","title":"Beginner PHP Resources","content":"I was recently asked by a new web developer what resources I would recommend for people just starting to learn PHP. While the resources available have changed a lot in the past few years, I have been keeping a list for just such a time. Below are a few of my favorite links for new PHP developers as well as some resources for any beginner programmer.\r\n\r\n## Beginner PHP Links\r\n\r\n- [PHP The Right Way](http://www.phptherightway.com/) is an opinionated (but I think correct) list of best practices for \"modern\" PHP. Lots of stuff on Stack Overflow is pretty dated, so read this before you mindlessly copy-paste your way into oblivion.\r\n- [The PHP FIG](http://www.php-fig.org/psr/) tries to enact standards in the language across many of the dominant frameworks. Some are overly technical for beginners, but PSR-1 and PSR-2 are pretty widely accepted as the \"right\" way to write PHP.\r\n- [Awesome PHP](https://github.com/ziadoz/awesome-php) is a great list of resources, packages, and tools for PHP developers. More and more web software is built by cobbling together tools and services from third parties, so before you reinvent the wheel, see if someone else has done it first.\r\n- As you get started working in any new language, it's good to work through some common challenges. [This list has a ton of them](https://github.com/karan/Projects).\r\n- [Project Euler](https://projecteuler.net/) is a fun way to start learning a new programming language and some basic algorithms.\r\n- [This list of free programming books](https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md#php) is huge, but check the publication dates. Anything > 3 years old is probably pretty outdated.\r\n- Shameless plug for [Shiphp, my own blog on PHP and Docker](https://www.shiphp.com/). A lot of the posts cover basic PHP stuff without Docker, so I hope it's helpful no matter your experience level.\r\n\r\n## Blog Posts for New Developers\r\nFinally, here are some articles that I think are good for junior devs:\r\n\r\n- [How to get hired as a junior web developer](https://medium.freecodecamp.org/how-to-get-hired-as-a-junior-web-developer-its-hard-but-you-can-do-it-f680c20f0285)\r\n- [Code is not enough](https://www.linkedin.com/pulse/code-notenough-karl-l-hughes/)\r\n- [The evolution of a software engineer](https://medium.com/@bfil/evolution-of-a-software-engineer-a9f88531084)\r\n- [Don't call yourself a programmer...and much more](http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/)\r\n\r\nHave questions about learning PHP? Are you a junior developer who's found resources that might be good for this list? [Let me hear about it on Twitter](https://twitter.com/karllhughes).","type":"blog","imageUrl":"https://i.imgur.com/AzJJjsn.jpg","postUrl":"","tags":[{"_id":"programming"},{"_id":"php"},{"_id":"developer-bootcamps"}],"createdAt":{"$$date":1509393396549},"updatedAt":{"$$date":1509393445529}}
{"_id":"breaking-into-the-online-publishing-industry","title":"Breaking Into the Online Publishing Industry","content":"*When I was managing college bloggers at Uloop, the most common question I got was about how I got my job there. I was not a typical journalist - having just graduated with a degree in Mechanical Engineering - but I had managed to get dozens of writers to work for me at the University of Tennessee and then hundreds at Uloop later. My advice here wasn't typical j-school advice, but it was a viable way to break into the business of being paid to write.*\r\n\r\n*This post was first published in March of 2012, and is being republished as part of my [2017 writing goal](https://www.karllhughes.com/posts/2017-writing-goal).*\r\n\r\n-----\r\n\r\nIn a recent article posted on Internships.com, I was asked about [tips that I have for college students looking to break into the online publishing industry](http://www.internships.com/eyeoftheintern/applying-2/employers-applying-2/5-5-karl-director-student-news-uloop/). I'll admit, I borrowed a little inspiration from my friend and fellow blogger, [Thomas Frank](http://thomasjfrank.com/) who was also [featured on Internships.com](http://www.internships.com/eyeoftheintern/applying-2/personal-branding-applying-2/building-successful-blog/) for his blog, [College Info Geek](http://collegeinfogeek.com/). \r\n\r\n## First, Why Publish Online?\r\n\r\nLet me back up for a minute. [Print is dying](https://plus.google.com/101080316492181821858/posts/evbsokzLAdw). If you want to get into the news delivery or publishing industry, your chances of being published in _real_ print are about as slim as writing the next Harry Potter...it _might_ happen, but it's unlikely. Now, I'm all about pursuing your dreams, so if you _really_ want to see your work in print the best way to get started is to _turn to the internet_.  Whether you go the traditional print route or not, your work will be out there for millions to see, and you'll start to see yourself in Google searches much more often. \r\n\r\n## Pick Up Your Keyboard Now\r\n\r\nThe first thing to do is to _start writing_...**now**.  [Buy your domain name](http://www.fourhourworkweek.com/blog/2009/02/27/how-to-buy-domain-names-like-a-pro-10-tips-from-the-founder-of-phonetagcom/), [install Wordpress](http://codex.wordpress.org/Installing_WordPress), and [start writing](http://technmarketing.com/2012/01/why-every-human-being-should-have-a-blog-yes-even-you/).  Skip using a third party service like Blogger or Tumblr because those won't give you nearly as much search engine visibility. Installing Wordpress is dead simple, and all the free themes mean that no coding is required to get a site up and running in an afternoon.\r\n\r\n## Don't Keep it to Yourself\r\n\r\nSelf publishing is a great place to start, but if you stop there, you'll never have enough readers to matter. Build a nice portfolio of 10-20 posts on your personal blog, and then start contributing to _as many websites as you can_.  Check out some of the [listings on ProBlogger](http://jobs.problogger.net/), send cold emails to blogs that you read, offer to write a guest post for free.  Most blogs are open to publishing guest content if you don't want to become a regular contributor. \r\n\r\n## Join the Community\r\n\r\nYou'll quickly find that bloggers are a friendly and welcoming group.  Use Twitter, Facebook, Google+, and LinkedIn to connect with like-minded writers, and trade stories or links as much as possible.  Building this network will help you come up with new content ideas and help you make a name for yourself on the internet. \r\n\r\n## Keep it up\r\n\r\nThe biggest mistake young bloggers make is _quitting too soon_.  Impatience is your enemy.  You _won't_ see results in three weeks, three months, or maybe even _three years_.  This is a career building tool, not an instant recipe for millions of dollars.  The good news is that if you start early, you'll have a much higher chance at making a living as a published writer down the line.","createdAt":{"$$date":1486387648073},"updatedAt":{"$$date":1486387648073},"imageUrl":"https://i.imgur.com/VrspzB9.jpg","postUrl":"http://karllhughes.com/?p=78","type":"blog","tags":[{"_id":"writing"},{"_id":"journalism"}]}
{"_id":"business-blogging-without-the-lies","title":"Business Blogging Without the Lies","content":"*This post was originally published in March of 2012, and since then the world of blogging, social media, and community building has changed quite a bit. That said, I stand by what I wrote here, and have republished it in its original form.*\r\n\r\n-----\r\n\r\nLet's be honest for a minute here. Blogging is _not_ a lucrative business practice.\r\n\r\nYou may host a company blog, a personal blog, and give every employee in your business a blog and never see any tangible results. Partly that's because most companies hear they need a blog so they set it up and ignore it, and partly it's because they don't give any incentives for visitors to join the conversation. **That said, blogging is _far_ from worthless.**\r\n\r\nBecause of the massive amount of content available, you shouldn't start blogging because you want to make a million dollars (as some charlatans will tell you that you can do) or instantly get a million new customers. Blogging _is_ important, but it is simply a small piece of building a community around your brand.\r\n\r\n## Blogging serves 4 primary functions\r\n\r\n1.  It lets customers know you're paying attention to the industry\r\n2.  It lets customers know what your business is doing to improve their experience\r\n3.  It gives your brand a personality through long-form writing\r\n4.  It _might_ help you with search engine visibility\r\n\r\n## So should my company even have a blog? \r\n\r\nMaybe.\r\n\r\nIf you are considering it, you better be committed to it because without commitment, your blog will be a worthless, money-wasting time suck. Only bad businesses would want that...Don't be a bad business.\r\n\r\n## Here are some questions to ask yourself _before_ you start a company blog\r\n\r\n1.  _Why_ do we need a blog?\r\n2.  _Who_ will be the voice of our company on the blog?\r\n3.  _When_ will we update the blog?\r\n4.  _What_ kind of content correctly reflects our company's brand?\r\n\r\nI'm going to make a bold statement here and say that **most small companies don't need a blog**. Social networks can be less time-consuming and more effective at reaching your customers. Remember, your customers are probably using Facebook, Twitter, Google+, or some other niche social network already. If you force them to visit your blog or website, that's one more element of friction between your followers and your message...Don't add friction.","createdAt":{"$$date":1486083245894},"updatedAt":{"$$date":1486083245894},"imageUrl":"https://i.imgur.com/c6KGcSE.jpg","postUrl":"http://www.karllhughes.com/?p=56","type":"blog","tags":[{"_id":"writing"},{"_id":"business"}]}
{"_id":"cloud-services","title":"The Age of Cloud Services","content":"Cloud based web hosting has enabled small startups to build and scale software applications that can compete with much larger companies, and now most large enterprises are [taking advantage of cloud hosting](https://www.forbes.com/sites/vmware/2017/04/07/cloud-2-0-companies-move-from-cloud-first-to-cloud-only/#9994cb44d5ed) as well. Businesses have embraced this move because it saves them money and makes it much faster to scale up or down their operations. While there are pockets or resistance, we're at the point where it's pretty much best practice _not_ to provision your own \"bare metal\" servers unless regulations require it or your scale is to the point where you _must_ create your own hosting services (eg: Amazon, Google).\r\n\r\nThis cloud-powered revolution has made a huge impact on the software development industry, but I think an even bigger change is on the horizon thanks to **third-party cloud services**.\r\n\r\n## What are Cloud Services?\r\n\r\n**Cloud hosting platforms** enable you to bring your own software (in the form of deployable `.exe`s, Docker images, or source code) to a vendor's infrastructure, saving you the time and trouble of keeping a server running.\r\n\r\n**Cloud services** handle a complete business function for you without the need to know exactly how they work under the hood. Often these services provide a [REST API](https://restfulapi.net/) that allows developers to hook into their functionality within their own applications.\r\n\r\n### Example: Email Sending Services\r\n\r\nIf the definition above didn't clarify things, hopefully some examples will.\r\n\r\nOne category of cloud service that many developers already lean on is **email sending services**. I have never wanted to go through the infamously challenging process of [setting up my own email server](https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server), and even if you are a glutton for punishment, it's probably not in your company's best interest for you to spend a portion of your time each month making sure that service is running and patched and that new best practices are applied.\r\n\r\nSo what most developers will do is use a service like [Sendgrid](https://sendgrid.com/), which will allow customers to send emails through their API. They take care of applying the right headers, rotating IPs when one is marked for spam, and even managing templates for you if you'd like. Most small and medium-sized businesses realize that sending emails is not a _core business function_ so they are okay paying someone else a monthly fee to handle email deliverability for them.\r\n\r\nThis realization in the realm of email is just the beginning of what cloud services can provide.\r\n\r\n## Why is this happening?\r\n\r\nBefore we explore some of the services that are available, let's explore some of the larger trends that are enabling cloud services to thrive.\r\n\r\n- **Makes engineers more focused/effective** - Speaking as a software engineer, I can tell you that I'm not excited when I have to implement a feature that's been done on 1000 other sites before. Most good developers want to face unique and interesting challenges that _can't be solved via Stack Overflow_, so having them implement an email server just to tell your customers that their order is on the way is not particularly exciting. Developers who push secondary concerns off to third party services can be more effective and contribute more business value than those who don't.\r\n- **Lower cost** - From a business perspective, it's also usually cheaper to use third party, specialized services rather than to hire engineers. There are currently limits to this - at some point Sendgrid might be more expensive than hiring a team of engineers to maintain a network of email servers - but like the cloud hosting problem above, that's a unique and rare situation.\r\n- **Easier to start [SaaS](https://en.wikipedia.org/wiki/Software_as_a_service) businesses** - Because the tools for starting a software as a service business have gotten better, more people are starting and succeeding with their own niche software as a service businesses. This is a self-fueled cycle, which makes the growth curve for SaaS tools exponential (at least until the market is flooded with options).\r\n- **Cultural shifts** - With the widespread adoption of [Agile](http://agilemanifesto.org/) best practices, companies are moving to shorter iteration cycles, building \"lean\" products, and using open source software. It's hard to imagine the cloud services revolution happening if we were all still building proprietary, [waterfall-style](https://en.wikipedia.org/wiki/Waterfall_model) projects.\r\n- **Technological environment** - Finally, the widespread adoption of certain technologies is making this move to cloud services possible. Software developers have (mostly) decided to standardize around HTTP APIs, networks are better and more reliable (especially between data centers), and cloud hosting providers are offering better and cheaper services for more specialized use cases than ever before.\r\n\r\n## What service providers are available today?\r\n\r\nThe part that's hard right now about building software with third party cloud services is finding and deciding on the services that are right for your project. Mostly this is due to a young and fragmented market, so I expect we'll see consolidation and standardization make this easier in the near future. In the meantime, I have been keeping track of [some of the services that are available](https://airtable.com/shrZda0zihJCAkjKm), and you can basically categorize them in one of the following ways:\r\n\r\n- **Developer-centric platforms** - This class of tools is meant to be used primarily by developers, for example [Spark](https://spark.laravel.com/) (a PHP-based \"SaaS-in-a-box\" solution), Sendgrid (the email sending service mentioned above), and [Stream](https://getstream.io/) (a newsfeed service). Some have non-developer UI's, but you pretty much have to have a developer to fully integrate with them.\r\n- **Non-developer platforms** - These tools are aimed at a non-technical audience, but that doesn't mean developers can't point team members to them. I've been pushing my teams to build landing pages in [Squarespace](https://www.squarespace.com/) or [Wordpress](https://wordpress.com/) for years because paying developers to update copy on landing pages is extremely expensive and naive.\r\n- **Hybrid platforms** - Some platforms can be used by non-developers, but are greatly enhanced by involving an engineer - even temporarily. For example, [Zapier](https://zapier.com/) is great for connecting APIs, but if you have a developer you can also run arbitrary Javascript or Python code, making it possible to automate just about anything with very little custom code work.\r\n\r\n![](https://i.imgur.com/ifadZkG.jpg)\r\n\r\n## What's still standing in the way?\r\n\r\nThere are legitimate reasons _not_ to adopt cloud services, and there are some things that make them less than ideal. I've run into the following limitations so far, but every app is different:\r\n\r\n- **Finding the right service** - As I mentioned above, the market is young and fragmented, so finding the best cloud service can be challenging. You may spend a lot of time researching or you may never find the perfect fit.\r\n- **Scalability** - I've run into services that worked great for a few hundred users, but started to break down under a production-level load. Some services may offer plans that scale to \"enterprise\" levels, but they may not be affordable anymore.\r\n- **Culture** - Some developers are afraid of using software they didn't build. This is naive, but it's a cultural hurdle you should be aware of.\r\n- **Network latency** - When you string together 2-5 services hosted in various locations, you may or may not get a quick response. Until more cloud services build systems distributed geographically, network latency will be a problem.\r\n- **Security** - While more mature cloud service providers (like Amazon or Google) offer detailed permissions and security features, many do not offer much more than basic password authentication and some don't even offer team-level permissions.\r\n- **Testing and dev environments** - We've figured out workflows that automate testing and deployment to dev and staging environments in the software development industry, but cloud services are not quite as robust.\r\n- **Reliability** - Finally, it can be hard to assess uptime or reliability for third party services - especially those geared towards non-developers. If you must provide a high level of uptime to your customers, you may have trouble relying on some third party services.\r\n\r\nYou may think that with these serious limitations are a roadblock, but like any emerging technology, cloud services are in their infancy. They will get better, and will likely be the standard in software development for many small to medium-sized businesses in the future, so the earlier you start learning them the better.","type":"blog","imageUrl":"https://i.imgur.com/2IQOJ7R.jpg","postUrl":"","tags":[{"_id":"mvps"},{"_id":"engineering"},{"_id":"programming"}],"createdAt":{"$$date":1520038122456},"updatedAt":{"$$date":1520038238135}}
{"_id":"cma","title":"CMA 2015 Conference: Introduction to Web Development","content":"On March 12th, I spoke at the [College Media Association's 2015 Conference in New York City](http://nyc15.net/). A couple years ago I spoke in New Orleans on the topics of Sponsored Content and Gamification in News, but this year as my role is now more technical, so was my topic. I gave a presentation on how websites work for non-techies. \r\n\r\nHere's a screencaptured version of the talk in case you couldn't make it:\r\n\r\n[![](https://i.imgur.com/CI9vwqs.png)](https://www.youtube.com/watch?v=2Pa_JQa1Fns)\r\n\r\n## Summary:\r\n\r\nJust about every profession has been effected by the internet, but very few people actually understand how it works. My goal in this presentation is to give non-technical people an overview that goes deep enough to stay interesting, but not so advanced that you can't keep up. We'll walk through the request cycle of loading a website using the analogy of sending a letter, show an example of how this request cycle works for a website like Facebook.com, and finally peel back the layers and look at some of the code that makes a website work. If you want to learn more about the topics presented here or you'd like to follow up with me, here are all the links you'll need.\r\n\r\n## Presentation Links:\r\n\r\n*   [Code project demo](https://github.com/karllhughes/cma-demo)\r\n*   [Prezi presentation](https://prezi.com/uverv56kwn_x/introduction-to-the-web/)\r\n\r\n## Resources:\r\n\r\n*   [Codecademy interactive courses](http://codecademy.com)\r\n*   [W3Schools Tutorials](http://w3schools.com)\r\n*   [Building a personal website](http://collegeinfogeek.com/personal-website)\r\n*   Articles:\r\n    *   [Websites: Wikipedia](https://en.wikipedia.org/wiki/Website)\r\n    *   [How Web Pages Work](http://computer.howstuffworks.com/web-page.htm)\r\n    *   [How DNS Works](http://computer.howstuffworks.com/dns.htm)\r\n    *   [How Search Engine Optimization Works](http://computer.howstuffworks.com/search-engine-optimization.htm)\r\n\r\n### Contact me:\r\n\r\n*   Email: [khughes.me@gmail.com](mailto:khughes.me@gmail.com)\r\n*   Twitter: @[karllhughes](http://twitter.com/karllhughes)","createdAt":{"$$date":1425995056000},"updatedAt":{"$$date":1491685071326},"imageUrl":"","postUrl":"http://www.karllhughes.com/?p=702","type":"blog","tags":[{"_id":"presentations"},{"_id":"college-media-association"},{"_id":"conferences"}]}
{"_id":"code-is-not-enough","title":"Code is not Enough","content":"We’re in the middle of an unsustainable and growing bubble in the market for software engineering talent. History has given us a template for this kind of out-sized demand before, and we’ll see it again in this profession. Much of the work done by software engineers now is little more than plumbing and savvy businesses treat engineering as a cost center.\\n\\nTechnically-trained have to keep learning and evolving as the world around them evolves; they have to bring value beyond code.","createdAt":"2016-12-30T06:00:00.000Z","updatedAt":"2016-12-30T06:00:00.000Z","imageUrl":"","postUrl":"https://www.linkedin.com/pulse/code-notenough-karl-l-hughes","type":"link","tags":[{"_id":"programming"},{"_id":"jobs"}]}
{"_id":"codemash-2018-talks","title":"5 Talks I'm Excited for at Codemash 2018","content":"In just a few days I'll be heading to Sandusky, Ohio for the [2018 Codemash conference](http://www.codemash.org/). In addition to the talk I'll be giving on [Testing Distributed Systems](http://www.codemash.org/sessions?id=7231) and the tour of [NASA's Plum Brook Station](https://www.nasa.gov/centers/glenn/about/testfacilities/index.html) that I'm doing while there, I'm really excited to see and meet some of the other great speakers at the conference. This is a huge event with four days of talks and interactive \"precompiler\" sessions, so putting together a list like this is really tough. I'm sure there are tons of great sessions I won't be able to make due to timing and the fact that I have to do a little work while I'm there, so be sure to check out [the whole conference speaker list](http://www.codemash.org/schedule/) if you're heading to Codemash.\r\n\r\n### [1. Build a Delightful API with Serverless Technology](http://www.codemash.org/sessions/?id=7466)\r\nRob Allen, the speaker at this session, is well known in the PHP community as one of the maintainers of the Slim framework, so I've read many of his blog posts. Serverless applications are all the rage these days, so while I think there's some hype and they don't make sense for every use case, I do think they have a place in the web development ecosystem. I'll be interested to hear what Rob says on the topic.\r\n\r\n### [2. Avoiding Microservice Megadisasters](http://www.codemash.org/sessions/?id=7079)\r\nI love real life stories of things going well and even more of things going poorly. One of my biggest fears as a software engineer is that I'll get hired to do a job and completely fail at it, so listening to mistakes that others have made will hopefully help me avoid them.\r\n\r\n### [3. You Will F**k up & that's Ok (How to be a Male Ally in Tech)](http://www.codemash.org/sessions/?id=7047)\r\nThe last two startups I've worked for have had founders who were women, so I've been more exposed to some level of diversity than some people in the infamously male-dominated world of tech startups. That said, I'm really interested in building a diverse team of engineers at The Graide Network, so anything I can do to learn more about being part of the solution will make it on my radar.\r\n\r\n### [4. Using Neural Networks to Generate \"Game of Thrones\" Scripts](http://www.codemash.org/sessions/?id=7684)\r\nI'm not a Game of Thrones fan, but I have been doing some research on machine learning and natural language processing lately including using [Markov chains](https://en.wikipedia.org/wiki/Markov_chain) to \"write\" original text. This talk sounds like it will take the approach a step further by using unsupervised machine learning techniques to generate scripts that could be from Game of Thrones.\r\n\r\n### [5. Tales from the Front Lines: Modernizing a Legacy System](http://www.codemash.org/sessions/?id=7447)\r\nAnother story session that's right up my alley, Mark Ryan will be talking about migrating from a monolith to microservices. I've done this a couple times in the past five years, but it's always helpful to gather more stories as everyone's experience with this is different.\r\n\r\nWhat talks are you excited about at this year's Codemash conference? [Let me hear about it on Twitter](https://twitter.com/KarlLHughes).","type":"blog","imageUrl":"https://i.imgur.com/PmWuIcI.png","postUrl":"","tags":[{"_id":"codemash"},{"_id":"conferences"},{"_id":"speaking"}],"createdAt":{"$$date":1514731438506},"updatedAt":{"$$date":1514731481016}}
{"_id":"codeship-build-dashboard","title":"Creating a Custom Build Dashboard with Codeship","content":"Last month I spent some time demoing the new [Codeship v2 API](https://apidocs.codeship.com/v2/introduction). My goal was to come up with a project to build using the API so that I could write a blog post about it. What I came up with was a public Codeship Builds dashboard.\r\n\r\nThe project is open source and [hosted on Github](https://github.com/karllhughes/build-status). It uses Node, Express, and Handlebars to display the results of my most recent Codeship builds, and I have it hosted at [builds.khughes.me](https://builds.khughes.me/).\r\n\r\nFor a complete tutorial, check out the blog post on Codeship linked below.","type":"link","imageUrl":"https://pbs.twimg.com/media/DLYEhQ8W0AAh6vi.jpg","postUrl":"https://blog.codeship.com/creating-a-custom-build-status-page-using-codeship-api-v2/","tags":[{"_id":"Codeship"},{"_id":"programming"}],"createdAt":{"$$date":1507321295046},"updatedAt":{"$$date":1507321295046}}
{"_id":"college-students-your-blog-sucks","title":"College Students: Your Blog Sucks","content":"*Note: this post is being republished as part of my [2017 daily publishing project](https://www.karllhughes.com/posts/2017-writing-goal). To give some context to this post and its annoyingly negative title, I was reviewing a lot of college blogs at the time for my job at Uloop. Most of these students wanted to be professional writers, yet their blogs were terribly unfocused and trivial. I've decided to leave the article in tact though as the advice still stands for college students who want to blog.*\r\n\r\n*This post was originally published in March, 2012.*\r\n\r\n-----\r\n\r\nThere, I said it.  Most college students _absolutely suck_ at blogging.  Resharing crap on Tumblr shouldn't even count as a blog, but more often than not, I see students referring to it as _their_ work. The second most common college blog mistake I see is keeping a personal journal online. No employer is going to take your personal diary as a serious sample of your work, and it just opens your life up to voyeurs and creeps. **Okay, enough negativity. Here's how to do it right:**\r\n\r\n## Step 1 - Own your domain name\r\n\r\nYou need to own your own domain name no matter what kind of writer you are.  It only costs $12 per year for a .com, and even less for some of the other extensions.  This is the only financial investment that you  _have_ to make to start blogging.\r\n\r\n## Step 2 - Write with a purpose\r\n\r\nWhy are you blogging?  Because some teacher told you that you should?  _Wrong_.\r\n\r\nYou _should_ be blogging for some reason, whether you want to develop a portfolio, make a name for yourself online, or eventually make a living by writing, you _need_ to start with a purpose.  Once you know why you're _really_ blogging, you'll stick with it longer and your writing will gain more clarity.\r\n\r\n## Step 3 - Pick a topic\r\n\r\nWriting random crap about your life isn't going to matter to anyone. Not even your good friends want to know every minor detail of your life, and if they did, they'd pick up the phone. Pick a topic, industry, location, or hobby that you know (or want to get to know) and _stick with it_.  It takes years of consistency to develop any kind of presence, so you better be writing about something you love.\r\n\r\n## Step 4 - Commit to it\r\n\r\nNo matter what, you need to commit to doing it at least _every week_.  Start by posting every day for the first three weeks, just so you can get some content, and don't give me that \"I just don't know what to write about,\" crap.  There are millions of posts out there that you can draw inspiration from.  If you don't know what to write, you probably don't love your topic enough, so start over, my friend.\r\n\r\nThere, that's it. Four simple steps to actually create a blog that matters in college.  Don't worry about the little things like SEO, social media, layout, etc. Content is King, so get out there and start creating it!","createdAt":{"$$date":1486044000000},"updatedAt":{"$$date":1486044000000},"imageUrl":"https://i.imgur.com/uhUWRsK.jpg","postUrl":"http://www.karllhughes.com/?p=49","type":"blog","tags":[{"_id":"college"},{"_id":"writing"}]}
{"_id":"community-is-about-engagement-not-size","title":"Community Is About Engagement, Not Size","content":"*Back in March, 2012 when I wrote and first published this post and was doing some informal social media consulting, buying Twitter and Facebook fans was a big trend. I'm out of the social media world nowadays, but I assume it still happens.*\r\n\r\n*This post is being republished as part of my [2017 daily publishing project](https://www.karllhughes.com/posts/2017-writing-goal).*\r\n-----\r\n\r\nOne of the most [common mistakes made in internet marketing](http://www.forbes.com/2010/08/06/facebook-online-communities-engagement-communispace-cmo-network.html) is to obsess about size. The idea that you're company needs 1,000,000 followers on Twitter and another 1,000,000 Facebook Fans in order to make their social media efforts worth it is utterly absurd. Here's the way I look at it: \r\n\r\n#### 1. Create a Great Product\r\nIf you _really_ offer an excellent product or service, people _will_ talk about it. Since most people are connected to at least one social network, it's almost certain that the communication channels are already open. \r\n\r\n#### 2. Monitor Discussion\r\nYes, set up your Facebook and Twitter pages, but don't worry _too much_ about how many people \"Like\" or \"Follow\" you.  Pay attention to what people are saying about your brand publicly.  Don't worry, this isn't as time-consuming as it sounds.  In fact there are many free [tools available to help you do it here](http://www.socialmediaexaminer.com/4-free-tools-to-help-you-socially-monitor-your-brand/). \r\n\r\n#### 3. Harness Engagement\r\nOkay, you've been watching the airways and posting occasionally for a few weeks, and _BAM!_ Someone finally talked about you on their blog!  Whether their mention was positive or negative, you _need_ to respond.  If they voiced a complaint about your product, then refer their complaint to customer service and open a ticket for them.  Don't wait for them to report it; be proactive! If they spoke well of your product, then thank them.  If they're really advocating your brand and they have a big following, offer to give them a free limited time upgrade or a discount off their next purchase.  I've been offered dozens of free books, products, and discounts just because I engage on Twitter and Google+.  Did I speak well of those companies later?  You bet your ass I did!  I became one of their biggest fans, and I think most people would be grateful for rewards like this. \r\n\r\n#### 4. Start Saying Something\r\nSpend 6-8 months scouting the social media landscape, responding to mentions, and learning the ropes _before_ saying a single thing about your product.  Yep, I know how extreme that sounds, but it _is_ the best way to build an honest following.  These people are your _core_.  You know they'll stick with you and help push your message out to their networks, but it's _super important_ that you don't spam them.  Dedicate a _single_ post every week to your company.  The rest of your posts should highlight partners, customers, industry news, and everything else going on in the world.  I know, it's tough to keep your mouth shut, but you _have to._  Learn to [appreciate listening more than talking](http://www.rogerdarlington.me.uk/Listening.html). \r\n\r\n#### 5. Experiment and Track\r\nThe final step in developing a strategy based on engagement not numbers is to [measure your performance](http://www.singlegrain.com/blog/10-ways-to-measure-social-media-engagement/).  Try posting and replying to many different people at different times of day.  Try posting photos.  Post a picture of your cat.  See which methods get the _most_ reaction from your audience, and focus on the methods that work.  Don't waste time posting things on social media that your audience doesn't like or respond to.  Listen to them and do your best to serve them and foster the community.","createdAt":{"$$date":1486301041941},"updatedAt":{"$$date":1486301041941},"imageUrl":"https://i.imgur.com/lQFuE0w.jpg","postUrl":"http://karllhughes.com/?p=75","type":"blog","tags":[{"_id":"social-media"},{"_id":"marketing"}]}
{"_id":"computer-science-education","title":"On Computer Science Education","content":"This is the fundamental disconnect between our hopes for teaching Computer Science and the reality of our education system: we can’t hire and retain good technology teachers until we compensate them competitively.","type":"link","imageUrl":"https://cdn-images-1.medium.com/max/2000/1*dzA7qi3DdOj0HAvYzNfP4g.jpeg","postUrl":"https://medium.com/@karllhughes/on-computer-science-and-education-68bb897ce50e","tags":[{"_id":"education"},{"_id":"programming"},{"_id":"personal"}],"createdAt":{"$$date":1494519337786},"updatedAt":{"$$date":1494519337786}}
{"_id":"contentment","title":"Contentment Comes from People not Things","content":"*Every year it gets harder and harder not to fall into the trap of buying more stuff. I first published this in November, 2014 when I didn't even have a bed, but since then my lifestyle has changed pretty dramatically. I have a fiancee, a dog, and an extra bedroom in our apartment, so going back to re-publish this post was a good reminder not to seek contentment through things.*\r\n\r\n-----\r\n\r\nIt's so easy to get caught up in the race to have more and more stuff. Whether you're a tech junkie like me, a collector of glamorous shoes, a classic car buff, or an avid video gamer there is always something out there that you simply _must_ have because (A) it exists and (B) you want it. I'm not going to get into the financial implications of purchasing things, because for plenty of people reading this, the ability to afford things isn't the issue. **The issue here is the misconception that \"things\" are the best way to happiness** \r\n\r\nGetting stuff actually does make you happy...temporarily...and then it wears off and you have to get more stuff to feel that rush again. This cycle never ends. \r\n\r\n## But, there's an easy way out...\r\n\r\nAnd that out is to cultivate personal relationships. Having [secure relationships with people](http://www.becomingminimalist.com/security/) actually increases happiness and [makes you not want to buy more stuff](http://health.usnews.com/health-news/family-health/brain-and-behavior/articles/2011/03/11/insecurity-in-relationships-binds-people-to-possessions).\r\n\r\nIt's crazy that the answer to our addiction to possessions is that simple. So, if you find yourself constantly seeking out the next thing to buy and you feel like you need to quit, here are some ways you can refocus that need into relationships that will get you longer-term happiness: \r\n\r\n### If you're going to eat out, do it with people\r\n\r\nWhether you eat out because you're too lazy to cook or you just love the food, minimize the amount that you do it alone. Instead, invite a friend you don't see often, a coworker you rarely talk to, or a neighbor who just moved in.\r\n\r\n### If you're going to make a big purchase, invest in a social one\r\n\r\nI don't like buying furniture because I don't really _need_ it. I'm perfectly content sitting on the floor in my apartment, but I have realized that if I want people to feel comfortable coming over to visit, I do need a certain amount of it. \r\n\r\n### If you're going to travel, don't go alone\r\n\r\nI love to travel. When I am looking at places to visit though, I center my plans around friends, family, or classmates who I can see along the way. Not only does it save money to stay with someone else, but it's a lot more fun to have a local show you around a new city.\r\n\r\n### If you're moving to a new neighborhood, join the community\r\n\r\nMoving into a new neighborhood or a new city is often a scary experience, but it's also a great opportunity. It's a chance to get out there, meet new people, and join a community, so don't let it pass you by. Get to know local shop owners, volunteer at community organizations, attend neighborhood events.\r\n\r\nWhat do you do to cultivate personal relationships rather than getting more things?","createdAt":{"$$date":1491811258000},"updatedAt":{"$$date":1491830430500},"imageUrl":"https://i.imgur.com/Y3Txb3u.jpg","postUrl":"http://www.karllhughes.com/?p=632","type":"blog","tags":[{"_id":"personal"},{"_id":"relationships"}]}
{"_id":"continuous-integration","title":"Continuous Integration on a Budget","content":"*Since I wrote this in September, 2015, continuous integration has become pretty much the standard for smaller, more nimble companies, and it's even making inroads at the enterprise level. The tools are so much better than they were 3 to 5 years ago, that there's really no excuse not to automate your builds, tests, and deployments.*\r\n\r\n*The tools I mention in this article haven't changed too much since I wrote it, but I have written a bit [more about this topic on Codeship's blog](https://blog.codeship.com/setting-up-and-deploying-a-modern-php-application/), and will be putting out a new piece soon on CI with Docker. I am now using Webpack to build most of my frontend projects (instead of Grunt), and have stopped using Envoyer at the moment as it was more complex than what I needed.*\r\n\r\n-----\r\n\r\nA lot of people think that continuous integration is a luxury afforded only to companies with dedicated devops teams and massive budgets. That may have once been the case, but it is no longer true thanks to the many software tools and open source projects now available. In fact, I'd make the argument that small teams especially can't afford _not_ to invest in continuous integration. Once you make unit testing and automated deployments part of your normal project workflow, it's hard to go back.\r\n\r\n## First, what is continuous integration?\r\n\r\nBefore I dig into the tools I use at work and on open source projects, let's make sure we all understand the concept of continuous integration.\r\n\r\nStrictly speaking, [continuous integration](https://www.thoughtworks.com/continuous-integration) is the process of merging all developers' work into a main repository on a daily (or more frequent) basis.\r\n\r\nMore broadly, the term has come to imply that the code is also automatically tested, built, and deployed to a server when it is updated, so CI can be used as a way of describing your engineering team's entire deployment process.\r\n\r\nThese concepts (continuous integration, automated testing, automated builds, and automated deployments) are all part of the same process of releasing and updating code, so for the remainder of the article, I'll be talking about the processes we use to achieve all four goals under the umbrella of continuous integration. There is a spectrum of quality, customizability, and cost associated with each of the three CI paths I'll outline below, and there are certainly tools that go way beyond what I'll cover, but I hope this serves as a good introduction to anyone who's been afraid of making CI a priority in their project - no matter how small.\r\n\r\n## The tools we use at Packback\r\n\r\nAt Packback we have a team of [five engineers](http://blog.packbackbooks.com/post/122460780395/introducing-the-brand-new-packbackbookscom) and we've raised some funding, so we can justify spending more on tools that help us manage deployments and continuous integration. Still, we keep things pretty lean and rely on a lot of open source or free solutions. \r\n\r\n#### [Codeception](http://codeception.com/)\r\nCodeception is a PHP unit testing framework that offers behavior driven elements missing from using PHPUnit alone. It adds a layer of complexity, but there are benefits to its enhanced assertions. \r\n\r\n_Cost: Free_ \r\n\r\n#### [Grunt](http://gruntjs.com/)\r\nModern frontends are built, not statically hosted, so we use Grunt to concatenate and minify our script files as well as run our test-runner (see below).\r\n\r\n_Cost: Free_\r\n\r\n#### [Karma](http://karma-runner.github.io/0.13/index.html)/[Jasmine](http://jasmine.github.io/)\r\nYou certainly don't have to use Jasmine with Karma, but we've found it the easiest combination of framework and runner for our Javascript testing. \r\n\r\n_Cost: Free_\r\n\r\n#### [Forge](https://forge.laravel.com/)\r\nWe use a PHP framework called Laravel for our backend APIs. The creator of Laravel has also been running a couple of complementary products that help developers deploy and manage their projects. Forge handles provisioning and deployment onto our servers.\r\n\r\n_Cost: $10 - $20/month_ \r\n\r\n#### [Envoyer](https://envoyer.io/)\r\nForge is great for deploying to a single server, but Envoyer adds the ability to deploy to multiple servers with zero downtime. It's another Laravel-specific tool, but you can use it for other PHP projects as well.\r\n\r\n_Cost: $10 - $50/month_\r\n\r\n#### [Github](https://github.com/)\r\nIf you're a web developer and you're not familiar with Github get off my site and [go read about it](http://www.howtogeek.com/180167/htg-explains-what-is-github-and-what-do-geeks-use-it-for/). There are certainly other options for hosting your repositories, but I've always been a Github fan.\r\n\r\n_Cost: Free - $200/month_\r\n\r\n#### [Codeship](https://codeship.com/)\r\nCodeship is the truly continuous integration part of this whole workflow. They give you a platform that will run your tests, deploy to one or multiple servers or services, and notify you if there was any problem along the way.\r\n\r\n_Cost: Free - $600/month_\r\n\r\n#### [Digital Ocean](https://www.digitalocean.com/)\r\nDigital Ocean offers one of the [easiest and cheapest options for hosting](https://www.digitalocean.com/). You can effortlessly scale servers and manage your DNS records there as well.\r\n\r\n_Cost: $5 - $80/month per server_\r\n\r\n**Packback Continuous Integration Workflow**\r\n\r\n![](https://i.imgur.com/9nVmGDYl.jpg)\r\n\r\n## The tools I use on personal projects\r\n\r\nI don't want to spend $100/month just to host my personal website, so I've pared down my CI setup on personal projects. At this point I can get away with a low cost Heroku dyno as my only overhead. \r\n\r\n#### [PHPUnit](https://phpunit.de/)\r\nPHPUnit may be the no-frills option for PHP testing, but it's also the most common and well documented.\r\n\r\n_Cost: Free_\r\n\r\n#### [Gulp](http://gulpjs.com/)\r\nWhether you use Grunt or Gulp comes down to preference. I like Gulp because it's bundled in Laravel, and it's my framework of choice.\r\n\r\n_Cost: Free_\r\n\r\n#### Github\r\nGreat for open source and closed source, Github starts with very cheap plans for individuals who just want a couple of private repos.\r\n\r\n_Cost: Free - $200/month_\r\n\r\n#### Codeship\r\nGet up to 100 builds per month (enough for my personal projects) free. \r\n\r\n_Cost: Free - $600/month_\r\n\r\n#### [Heroku](https://www.heroku.com/)\r\nThe only downside to Digital Ocean is that you occasionally have to SSH in and fuss with a setting or install a new service. You also have to deal with load balancing and scaling on your own. Hosting with Heroku means that you get all that built in, but you do pay a little more for a decent server.\r\n\r\n_Cost: Free - $500/month per server_\r\n\r\n**Personal Project Continuous Integration Workflow**\r\n\r\n![](https://i.imgur.com/dyFtQdh.jpg)\r\n\r\n## The tools I use for open source projects\r\n\r\nMost open source projects rely on free tools unless there's a bigger organization backing them. Fortunately, there's a lot of good continuous integration tools out there for people who want to contribute to the open source community.\r\n\r\n#### [PHPUnit](https://phpunit.de/)\r\n\r\nAs the most common PHP unit testing framework, it's probably a good idea to use PHPUnit for open source projects. Don't want to deter people from contributing just because they're unfamiliar with your testing framework.\r\n\r\n_Cost: Free_\r\n\r\n#### [Scrutinizer](https://scrutinizer-ci.com/)\r\nScrutinizer calls itself a \"continuous inspection platform\" which basically means that it inspects your code's quality every time you push a change. This is really helpful when you have a variety of contributors with different skill levels contributing to a project and it gives you an idea of where code can be improved. It also integrates results from Travis (see below) to tell you if you're build is failing or not.\r\n\r\n_Cost: Free for open source_\r\n\r\n#### [Travis CI](https://travis-ci.org/)\r\nTravis will run your tests and build your code on multiple server configurations so you can ensure that packages you release as open source will work in any environment. \r\n\r\n_Cost: Free for open source_\r\n\r\n#### Github\r\nOnce again, Github is the place to be for open source projects. \r\n\r\n_Cost: Free for open source_\r\n\r\n**Open Source Continuous Integration Workflow**\r\n\r\n![](https://i.imgur.com/NSZ0llt.jpg)\r\n\r\nSo that's it. If you've got questions or you want to plug your own tools for CI, shoot me an [email](mailto:khughes.me@gmail.com) or a [Tweet](http://www.twitter.com/karllhughes).","createdAt":{"$$date":1493280054000},"updatedAt":{"$$date":1493328076403},"imageUrl":"https://i.imgur.com/9nVmGDYl.jpg","postUrl":"http://www.karllhughes.com/?p=786","type":"blog","tags":[{"_id":"packback"},{"_id":"programming"},{"_id":"continuous-integration"}]}
{"_id":"creating-a-tech-startup-without-a-developer","title":"Creating a Tech Startup without a Developer: the Lean Way","content":"*Since writing this in 2015, I've only become more convinced that more startups need to start without a developer. Premature automation and optimization is a huge time suck, and developers are expensive. The last two startups I've been with have used off-the-shelf services to create their MVPs, and even now when we want to test something new at The Graide Network, we usually do it manually or semi-manually before we build software around it.*\r\n\r\n*So, if you have an idea, great! I'd love to see you make it happen, but don't fall into the trap of building something before you know it will sell.*\r\n\r\n-----\r\n\r\nThere's a perception out there that creating a successful tech startup is about nothing more than making a product that by its awesome and paradigm-shifting nature will magically attract customers.\r\n\r\nFor example, consider the following conversation I had recently:\r\n\r\n**Would Be Founder:** \"I want to make an app that suggests outfits for you based on the weather, your personal style, and the season.\"\r\n\r\n**Me:** \"Sounds awesome! But why not start with a simple email list? That way you can get customers and validate that people will sign up for something like this before you commit to an app. Maybe just get 20 friends in one city to send you preferences, group them into style clusters, and send a few emails every day for a month?\" \r\n\r\n**WBF:** \"What? You mean do it manually? That would mean I'd have to wake up early every morning and send emails to people and do...work?\"\r\n\r\n**Me:** \"...\"\r\n\r\nIf you aren't willing to do work, you shouldn't be starting a company, even if you think that eventually your technology will make the company so easy to run that a monkey could do it. You can't start with a product or you're sure to build something that either (1) nobody wants, (2) nobody will pay for, or (3) sucks.\r\n\r\n## Bob Dorf reminded me of this\r\n\r\nBob is the coauthor of [The Startup Owner's Manual](http://amzn.to/1IEefBk), and thanks to the people at [1776 here in DC](http://www.1776.vc/), I got to hear him talk about \"Lean Customer Development.\"\r\n\r\n[Lean startup methodology](http://amzn.to/1B0iIrv) demands that you test your product before you build it, and lean customer development essentially takes that imperative to its next logical step: get a customer before you build it. His advice was to spend as much time as possible in the field, asking questions, and getting real pain points from your potential future customers as possible before spending a dime designing, building, or marketing your product. \r\n\r\nIt's something that when you hear it makes so much sense, but yet very few entrepreneurs actually do it this way. So often people insist that they need a product to demo before they talk to customers, and by the time they realize they've built something that no one needs, they're discouraged and out of money or time (time being the most precious of the two).\r\n\r\n## There are so many tools that there's no excuse not to test before you hire\r\n\r\nYou _can_ get people to sign up and commit to pay for a product you haven't built yet.\r\n\r\nSet up a [Wufoo](http://www.wufoo.com/) or Google Form, make a list of potential customers, and start contacting them. Once you feel like they're ready to commit, get them to sign up in the form.\r\n\r\nWhether your future product is an app, a data mining tool, or a social network, having a list of committed customers to help you as you build your product will go a longer way than any amount of funding you can raise. Once you have customers telling you what they need, your vision for the solution will form. Think in terms of the simplest possible solution, and then move to the complex. For example:\r\n\r\n- If you want to build a real-estate comparison website, start by manually collecting home prices in a specific area and limiting your customers to buyers in that limited space. If people sign up for your manual comparison product, they'll surely sign up for an automated one once you finish creating it.\r\n- Say you want to create an advanced home automation solution. Instead of spending tons on R&D to build software that controls all of a home's devices, why not start with one thing: automatic timer lights. These are cheap and readily available, and you can install and maintain them for your customers as well as teach them how to use them. Once you know there is a demand for these lights, you can start to sell further automation to existing customers rather than starting at step 1 with nothing.\r\n\r\nThe lean customer development method is almost always better than the product-first method, but the challenge is often figuring out how it applies to your problem and solution. Get creative, research existing tools, and discover the depth of the pain point you're solving. That's how you make a tech company without a developer.","createdAt":{"$$date":1492412426000},"updatedAt":{"$$date":1492434021612},"imageUrl":"https://i.imgur.com/oxhRqAl.png","postUrl":"http://www.karllhughes.com/?p=738","type":"blog","tags":[{"_id":"startups"}]}
{"_id":"culture-interview","title":"Holding Your Own Company Culture Interview","content":"Before you take any job it's important to know what you're getting into, and culture is a huge part of that.","createdAt":"2016-07-10T05:00:00.000Z","updatedAt":"2016-07-10T05:00:00.000Z","imageUrl":"","postUrl":"https://www.themuse.com/advice/the-interview-questions-engineers-must-ask-to-figure-out-what-a-companys-cultures-really-like","type":"link","tags":[{"_id":"the-muse"},{"_id":"culture"},{"_id":"jobs"}]}
{"_id":"customer-service-comcast-experience","title":"Customer Service: My Comcast Experience","content":"Last week, I had to end service at my current address to prepare for my mobile journey across the country. I called Comcast, and had a terrible experience. Naturally, I complained about it on Facebook and Google+, to which many people expressed their agreement in my frustration.\r\n\r\nThe story didn't end there though. One of Comcast's employees saw my post on Google+, and asked me to email him with my issue. I decided that since I was leaving their service anyway, I would tell them about all of the grievences I've had with their company over the years. I have included both the email I sent, and the email that Comcast sent back to me below.\r\n\r\n*Edit: I no longer have the screenshots of this conversation.*\r\n\r\nI was actually impressed to get a reply back at all, and honestly, they did a good job at handling the situation.  I hope they _actually_ did go back through my calls and record them for training, but I guess we'll see.  Most importantly, they responded to negative feedback, and didn't try to bury it. For that, I will give Comcast credit. What do you think?  Have you had a badly handled customer service experience with Comcast or another company?","createdAt":{"$$date":1338669851000},"updatedAt":{"$$date":1487038218032},"imageUrl":"","postUrl":"http://karllhughes.com/?p=204","type":"blog","tags":[{"_id":"customer-service"},{"_id":"comcast"}]}
{"_id":"database-of-accredited-colleges-in-the-united-states","title":"Colleges API: A Database and REST API of Accredited Colleges in the United States","content":"Back in 2013 I needed a list of all the colleges in the US. The best I could find was [this](http://ope.ed.gov/accreditation/GetDownloadFile.aspx). The list seemed complete (there are about 9000 colleges in the most recent version), but the formatting wasn't ideal.\r\n\r\nI cleaned up the data a bit and uploaded a SQL and CSV file onto Github. Those files sat in a repository for years, and occasionally I would have a need for a list of colleges, so I'd refer back to those files.\r\n\r\nThis weekend, I decided to build a little API around them so that anyone can access this college data more easily.\r\n\r\n### Open College Data API\r\n\r\nThis API is pretty simple, but here's an example of what you can do with it:\r\n\r\nGet 100 colleges sorted by name:\r\n```\r\nhttps://colleges.khughes.me/api/colleges?order=name&page=1,100&transform=1\r\n```\r\n\r\nGet the second page of records for colleges in Memphis, TN:\r\n```\r\nhttps://colleges.khughes.me/api/colleges?order=id&page=2,20&filter=location,eq,Memphis, TN&transform=1\r\n```\r\n\r\nGet a single college by id\r\n```\r\nhttps://colleges.khughes.me/api/colleges/8d4052a5-e171-4717-9222-34fb4fc5836f\r\n```\r\n\r\nRight now I just include the location, address, name, website, phone number, and a couple IDs used for government purposes. Each result will look something like this:\r\n\r\n```\r\n{\r\n      \"id\": \"04d0037b-982b-4221-9e89-5d3028046b76\",\r\n      \"name\": \"The University of Tennessee - Knoxville\",\r\n      \"address\": {\r\n        \"postalCode\": \"37996-0184\",\r\n        \"addressRegion\": \"TN\",\r\n        \"streetAddress\": \"527 Andy Holt Tower\",\r\n        \"addressCountry\": \"US\",\r\n        \"addressLocality\": \"Knoxville\"\r\n      },\r\n      \"alternateName\": null,\r\n      \"brand\": null,\r\n      \"description\": null,\r\n      \"email\": null,\r\n      \"faxNumber\": null,\r\n      \"foundingDate\": null,\r\n      \"location\": \"Knoxville, TN\",\r\n      \"logo\": null,\r\n      \"telephone\": \"865-974-1000\",\r\n      \"url\": \"www.tennessee.edu\",\r\n      \"opeId\": \"353000\",\r\n      \"ipedsId\": \"221759\",\r\n      \"alternativeId\": 144032,\r\n      \"deleted_at\": null,\r\n      \"created_at\": \"2017-03-26 03:33:04.891792\",\r\n      \"updated_at\": null\r\n    }\r\n```\r\n\r\nAccess is free, and the code is [open source](https://github.com/karllhughes/colleges) so you can always deploy it on your own server if you need something custom. I may make some slight improvements to this service, but I'll probably keep it pretty lean. Feel free to [submit an issue on Github](https://github.com/karllhughes/colleges/issues) if you have a question.","createdAt":{"$$date":1490799617000},"updatedAt":{"$$date":1505263481365},"imageUrl":"https://i.imgur.com/BtTw8Cy.png","postUrl":"http://karllhughes.com/?p=510","type":"project","tags":[{"_id":"open-source"},{"_id":"colleges"},{"_id":"data"}]}
{"_id":"defining-senior-engineers","title":"What Defines a Senior Engineer?","content":"If you’ve recently started your career as an entry-level engineer somewhere, you’re probably wondering what steps you’ll need to take to climb the ladder. Is it simply a matter of time? Do you have to go back to school or get a special certification? The answer is, \"it depends.","createdAt":"2016-08-04T05:00:00.000Z","updatedAt":"2016-08-04T05:00:00.000Z","imageUrl":"","postUrl":"https://www.themuse.com/advice/7-traits-that-make-senior-engineers-stand-out-from-more-junior-team-members","type":"link","tags":[{"_id":"the-muse"},{"_id":"programming"},{"_id":"jobs"}]}
{"_id":"deploying-a-modern-php-application","title":"Options for Deploying a Modern PHP Application","content":"Not all PHP applications are created equal. An 18-year-old legacy PHP3 application is likely unusable in a modern server environment, and even applications built using PHP 7 aren’t all going to be able to take advantage of the tools here. That said, if you are able to start from scratch the options I present here will help take your PHP game to the next level.","createdAt":"2016-11-22T06:00:00.000Z","updatedAt":{"$$date":1485289386014},"imageUrl":"https://i.imgur.com/HDwwmvw.jpg","postUrl":"https://blog.codeship.com/setting-up-and-deploying-a-modern-php-application/","type":"link","tags":[{"_id":" php"},{"_id":"programming"},{"_id":"codeship"}]}
{"_id":"determining-the-value-of-online-data","title":"Determining the Value of Online Data","content":"*Since I wrote this post back in May, 2012, many more online companies have been valued, but many are still avoiding public markets. Niche investors may feel confident in putting a price tag on private companies like Uber or AirBnB, but the broad public market may still be wary of these two-sided platforms whose assets are largely digital.*\r\n\r\n*The one thing I'll add to this short article is that while data's value may diminish as data becomes more widely available, that does not necessarily decrease the strength of two-sided platforms in the marketplace. I think I was missing that insight when I wrote this. Besides data, online platforms also have the asset of consumer choice. This stickiness is still an uncertain thing, but probably valuable enough that I should have given it more credit.*\r\n\r\n-----\r\n\r\nPeople often ask me how experts determine the value of web-based companies. \"They don't _make_ anything,\" they tell me, \"so how do you put a value on what they do?\"\r\n\r\nThis is a great question. It's the reason that billionaire investor Warren Buffett [doesn't put his money into technology companies](http://www.huffingtonpost.com/2012/05/07/warren-buffett-facebook_n_1495157.html) - it's very hard to determine the value of online companies. So, what metrics do investors use? \r\n\r\n## Determining the Value of Data\r\n\r\nRevenue, profit, \"good will\", registered users, active users, patents, domain names, and trademarks all contribute to the value of a web based company, but there's one asset that people tend to misunderstand: **data**.\r\n\r\n[What kind of data](http://www.mediapost.com/publications/article/178309/google-bing-yahoo-find-data-not-paid-search-ads.html)? Well that depends on the company. Facebook collects personal data about who you know and what you like to do, but that's just on the surface. They also know what web pages you visit and \"like,\" which products you own, and how resistant you are to changes (just think about the \"optional\" timeline upgrade).\r\n\r\nOther companies do it differently.  For example, Google collects data about what you search for, which results you click on, where you go in real life, what you buy, and much more. No matter the kind of data, [there is _some_ value in this data](http://www.zdnet.com/blog/facebook/how-much-is-your-data-worth-to-facebook/13133). Knowing who lives within walking distance of your store is important, knowing who likes to try new products first is important, and knowing how easily influenced people are by their friends is important. The _really_ hard thing to determine is, \"how valuable is this data?\" \r\n\r\n## Data has Diminishing Value\r\n\r\nThe real answer is, data is worth what the market will pay for it. It doesn't matter if you know the exact size and type of every tree on your block if no one cares enough to give you a dollar for that data. But, as I pointed out above, some of the data collected online _is_ valuable. If I wanted to market a product, my first move would be to look at data and target my efforts on the demographic or target customer that makes the most sense. If someone else already had that data, it might make sense for me to buy it rather than do the research myself.\r\n\r\nHere's the problem with data in the information age: _it's getting easier and easier to get_.\r\n\r\nThink about how valuable Facebook's data would have been in 1920. Businesses knew very little about customers on the other side of the city, much less the other side of the world. If I wanted to open a general store, my market research would have been to pick a spot where there didn't seem to be a general store already, but people lived. Then, I'd have to open up my business and figure out what people wanted me to keep in stock as I ran the company. That's expensive, and data from a company like Facebook would have saved me a lot of time and money.\r\n\r\nNow, there are dozens of companies collecting data like Facebook is. Hundreds of social networks, dating sites, search engines, blogs, and mobile apps are all collecting data on their users all the time. This makes the value of any one company's data less valuable.\r\n\r\nIf you have any thoughts about how you determine the value of data, [let me hear about it](https://twitter.com/KarlLHughes). How would you determine the value of data if you wanted to buy it?","createdAt":{"$$date":1487052024000},"updatedAt":{"$$date":1487077614428},"imageUrl":"https://i.imgur.com/bOeCWZm.jpg","postUrl":"http://karllhughes.com/?p=212","type":"blog","tags":[{"_id":"facebook"},{"_id":"social-media"},{"_id":"data"}]}
{"_id":"dev-bootcamp-program","title":"What to Expect from a Developer \"Bootcamp\" Program","content":"*Since publishing this post in October, 2014 I've taught or guest lectured at several of Chicago's developer training programs including Dev Bootcamp, General Assembly, Fullstack Academy, and (now defunct) Startup Institute. While each of these programs is different, this advice generally still applies to anyone interested in joining one of them as a student.*\r\n\r\n*As with any educational investment, do your homework first. Talk to grads, teachers, and employers before you make the plunge.*\r\n\r\n-----\r\n\r\nYou've probably noticed the rise in [short-term developer training programs](https://www.coursereport.com/cities/san-francisco) often called \"bootcamps.\" Dev Bootcamp, General Assembly, Mobile Makers, and Fullstack Academy are just a few of the programs currently operating in Chicago with the goal of training the next generation of entry level software engineers and developers.\r\n\r\nIf you have a more traditional computer science background you may be skeptical, but these programs aren't trying to teach all of computer science in a few weeks. Their training programs are more analogous to trade schools, and often they take applicants from non-traditional backgrounds who are looking to make a career transition. The goal of each program varies, but generally they are trying to teach students enough applied knowledge to build a website or mobile app in 6 to 12 weeks.\r\n\r\n## Why have these programs taken off lately?\r\n\r\nThe quick pitch for most dev bootcamps is that there are tons of jobs for web developers out there, and in just a few weeks this program will help you learn the ropes to get hired as a Junior Developer. In addition, there are a few other reasons people get hooked: \r\n\r\n### 1. Software startups are \"sexy\"\r\n\r\nThe stories of Facebook and Twitter's rocketship style success aren't going away anytime soon, and they continue to inspire naive youngsters to chase the dream of founding or joining the next massively successful startup. Having been in a couple of failed startups already, I can tell you that it's rarely this sexy, but the perception that they are keeps bringing in gobs of new interest.\r\n\r\n### 2. There is a serious lack of technical talent\r\n\r\nThe truth is that there is _not_ a lack of talent when it comes to entry level developers, but the need for experienced software engineers is fueling a flood of interest in the profession. It doesn't hurt that software engineers are often cited in jobs charts ([like this one](http://www.npr.org/blogs/money/2014/10/16/356176018/the-most-popular-jobs-for-the-rich-middle-class-and-poor)) that show them making six-figure incomes, although it should be noted that most early-stage startups [aren't a good choice if salary is your deciding metric](http://www.karllhughes.com/posts/myths-working-engineer-startup/).\r\n\r\n### 3. Millennials without useful degrees or experience are desperate\r\n\r\nAh, my generation is growing up, but they're still looking for get-successful-quick schemes.\r\n\r\nI can't tell you how many times a friend of mine who studied English or Anthropology or Philosophy in undergrad has told me how jealous they are of my engineering degree and my job which although technical still gives me great freedom to flex my creative muscles. I'm not going to say that all of them didn't work hard in college, but many of the ones who are still living at home chose their majors based on the amount of work they _wouldn't_ have to do in class. When an offer for a successful career in software development in just 8 weeks comes across their path, you can see why they might be tempted.\r\n\r\n### 4. Frameworks offer deceptively \"easy\" solutions\r\n\r\nFinally, I have to put some of the blame on the pitch for frameworks like Ruby on Rails. I'm all for using frameworks to help get a project kicked off quickly, but without a base level of knowledge in the language or any idea what object oriented programming means, people hacking on Rails are just dangerous. \r\n\r\n**There's a false security in setting up your first Rails app that makes you feel like you know a lot more than you really do.** No matter why they've gotten popular, these \"bootcamp\" programs seem to be here to stay. I don't think they're all bad, and I do think they're actually a more practical solution than trying to go back to college for many people. But, some of them have been misadvertised. Whether you're thinking about joining one of these bootcamps or thinking about hiring someone who's recently graduated from one, you should keep your expectations in line with reality. \r\n\r\n## So what are short term developer training programs good for?\r\n\r\n### 1. Introducing students to the web development industry\r\n\r\nFor students with a prior career in corporate America, getting exposed to the goods and bads of working as a software developer is a very good thing. The media does its part to glorify venture-funded software startups way too much, so actually meeting people who work for them, hearing from developers, and learning more about the industry as a whole will hopefully show them a bit of the less glamorous side before they commit full-steam.\r\n\r\n### 2. Networking with employers and professional contacts\r\n\r\nThe startup community in most cities in America is pretty close-knit, so once you get in it's not hard to network your way around it. Getting your foot in the door in the first place may be a bit tougher, so networking with people should really be the focus of these programs. The amount you can learn about software development in 8 weeks is pretty small, but the number of new people you can meet is significant.\r\n\r\n### 3. A very minimal introduction to applied web application development\r\n\r\nA few of the students I've seen coming out of these bootcamp programs are ready to take on roles as junior-level developers, but usually they had some experience with programming or engineering before the class began. Most are ready for apprenticeship programs where they'll actually get to work with a mentor and slowly work their way into a full-time gig, and some are not much better off than people who hacked their way through [Codecademy](http://www.codecademy.com/). Either way, no sane person should think that in 3 to 6 months anyone could train a proficient software developer.\r\n\r\n## What are these programs _not_ doing?\r\n\r\nWhile networking opportunities, and a base level of competency can certainly be established in a few weeks, there are serious limitations to these short term training programs. Here's what I have not seen all of these programs doing:\r\n\r\n### 1. Teaching students computer science\r\n\r\nWhen you're trying to churn out students who can launch a working Rails app in just a few weeks, it's impossible to take the time to teach them much of the theory or architecture required to be a high quality software engineer. While you can certainly argue that [not every code monkey needs to know how a microprocessor works](https://www.wired.com/2017/02/programming-is-the-new-blue-collar-job/), there's a middle-ground somewhere that every software engineer should know.\r\n\r\n### 2. Being completely transparent with how long it takes to actually become a good web developer\r\n\r\nI asked one of the students in one of these fast track development programs what he hoped to do after the program. \"Well, I want to spend a few months mastering web development and then join a startup as a CTO or something,\" he told me quickly. I laughed.\r\n\r\nWhile some of the students I've met realize that \"mastering\" software is a life-long process, **the students who are drawn to these bootcamp methods of learning are inherently more likely to be under the impression that in a few weeks they will actually know something significant.** This assumption needs to be pruned early.\r\n\r\nI think some of these programs do a good job keeping their students' expectations in check and offering them a quality curriculum along with opportunities to network and meet mentors, but I want to be clear in stating that _each of these bootcamp-type programs will be different._ You should do your research before investing a lot of money in one. If you have your own thoughts, feel free to leave them for me on [Twitter](https://twitter.com/KarlLHughes).\r\n\r\n_Photo by [Cristiano Betta](https://www.flickr.com/photos/cristiano_betta/ \"Go to Cristiano Betta's photostream\") on flickr.com_","createdAt":{"$$date":1491724839000},"updatedAt":{"$$date":1491748369651},"imageUrl":"https://i.imgur.com/65FecIk.jpg","postUrl":"http://www.karllhughes.com/?p=627","type":"blog","tags":[{"_id":"programming"},{"_id":"education"},{"_id":"developer-bootcamps"}]}
{"_id":"developing-self-awareness","title":"How to Develop Self-Awareness and Improve Your Career","content":"Self-awareness helps you plot the shortest course to happiness in your life; it keeps you from wasting time pursuing things that you aren’t passionate about and it helps you focus on the things that matter most to you. So how can you develop self-awareness?","createdAt":"2016-07-07T05:00:00.000Z","updatedAt":"2016-07-07T05:00:00.000Z","imageUrl":"","postUrl":"http://blog.startupinstitute.com/2016-07-07-developing-self-awareness/","type":"link","tags":[{"_id":"self-awareness"},{"_id":"career-advice"},{"_id":"startup-institute"}]}
{"_id":"divvy-saved-money","title":"How Riding Divvy Saved Me $622 Last Year","content":"It's no secret, but I love [Divvy](https://www.divvybikes.com/) (I'm one of the few who rides them in the winter), and here's why:\r\n\r\n*   It enables me to own one less thing (a bike)\r\n*   In a place like Chicago that has mild summers, it's perfect for warm-weather commuting\r\n*   Biking is a great [form of cross training for runners](http://running.competitor.com/2014/08/training/bike-your-way-to-better-running_76393)\r\n*   And last but not least, it saved me $622.50 last year\r\n\r\nIn my first year of being a Divvy member, I logged 310 trips. At a cost of just $75/year, that's less than a quarter per ride. Most of those trips replaced at least one jaunt on the CTA at $2.25 per ride, so that gave me my number of $622.50.\r\n\r\n## The rise of sharing economics\r\nIn the past few years we've seen a huge rise in \"sharing\" services - things like Uber and Divvy - that take advantage of the connectedness average people in the same city now enjoy. In the past, I think people would have assumed that low-cost shared bikes in a big city like Chicago would get completely trashed and destroyed by riders looking to take advantage of the system. While I've had a handful of experiences where a Divvy bike had a flat tire or bad breaks, those have been surprisingly rare. The truth is that most people aren't bad sharers, and as [pushback on consumerism](http://en.wikipedia.org/wiki/Anti-consumerism) rises in future generations, I would bet that more shared systems will start to appear.\r\n\r\nIf you're placing bets on the next \"big thing\" in technology, sharing systems are definitely one I'd keep an eye on. Got questions about commuting via a shared bike program? Hit me up on [Twitter](https://twitter.com/karllhughes) anytime.","createdAt":{"$$date":1412345759000},"updatedAt":{"$$date":1491684009458},"imageUrl":"","postUrl":"http://karllhughes.com/?p=605","type":"blog","tags":[{"_id":"startups"},{"_id":"divvy"},{"_id":"transportation"}]}
{"_id":"docker-laravel-php7","title":"Using Docker to Run a Laravel Application in PHP7","content":"PHP7 has been out for a few months now; [the performance benefits have been demonstrated](http://www.infoworld.com/article/3011967/web-development/php-7-offers-twice-the-performance.html), and most of the bugs worked out. Now is the time for early to mid-stage adopters to get moving! That said, nobody wants to go through a difficult upgrade process. Fortunately, I've found that upgrading most Laravel 5.0+ applications to PHP7 is almost completely pain-free. If you are worried though, there's a simple way to test them out using Docker.\n\n### ![docker-php7](https://i.imgur.com/xwm4v6Q.png)What is Docker, and how can it help us test PHP7 applications?\n\n[Docker](https://www.docker.com/) is a service for running containers. Containers are small, contained microservices that can run on a single machine. I see them as the next logical step in virtualization: where virtual machines let you emulate an entire operating system, containers let you emulate everything on top of the kernel, so more of the underlying infrastructure is shared while keeping a sharp separation of concerns. If that just went completely over your head, it's okay. I'm not an expert either, but that doesn't mean we can't use Docker as a tool to make our lives a little easier.\n\n### Setting up Docker\n\nOne important note about Docker: it only runs on Linux. So, if you use a Mac or Windows computer for development, you'll need to create a virtual machine running Linux to get Docker running. Docker has [some tools that make this relatively easy](https://docs.docker.com/engine/installation/), and the documentation has improved greatly even in the last six months. Install Docker locally before you move on to the rest of this tutorial.\n\n### Once you get Docker running, what can you do with it?\n\nThere are a number of good use cases for Docker, but I'd recommend starting small with local testing and development. [Moving it into production](http://blog.heavybit.com/blog/2015/3/23/dockermeetup) can be challenging, but using it to test a new version of a language or test a new service might be an ideal use case for beginners. I've used Docker for:\n\n*   Testing worker microservices locally that will [run on Iron.io](https://github.com/iron-io/dockerworker)\n*   Switching between Apache and Nginx for local development\n*   **Ensuring that an application will run in PHP7 before deploying it to a production server**\n\nThat last use case is where I'll spend the rest of my time in this post.\n\n### ![laravel-php7](http://i.imgur.com/FixPN7L.png)Running a Laravel Application Locally Using Docker\n\n_Note: Since this project is ongoing, I'd recommend checking out the latest updates to the [Readme on Github](https://github.com/karllhughes/laravel-php-7). I'll try to keep the blog post up to date too, but I don't want to make any promises._\n\n#### 1\\. Prerequisites\n\nDocker should be [installed on your machine](https://docs.docker.com/engine/installation/). You should also have a working [Laravel application running locally](https://laravel.com/docs/5.2).\n\n#### 2\\. Prep work\n\nNavigate to the root of your Laravel project. Change the /storage folder permissions to \"777\" using \"chmod -R 0777 storage/\". I know, \"777\" permissions are bad, but you're just doing this locally and so far it's the best way I've found to allow Docker to access the folder and write to it.\n\n#### 3\\. Download the container\n\nDownload the latest version of the base PHP7/Laravel Docker container:  \"docker pull karllhughes/laravel-php-7\". The Dockerfile does a build of PHP7 on Ubuntu and installs some tools you'll need like vi, Composer, and Apache.\n\n#### 4\\. Run the container\n\nFrom the root of your Laravel project, run \"docker run -it -v $PWD:/www -p 80:80 karllhughes/laravel-php-7\" to bring up the container's command line. _Note: Docker pros will probably pick a fight with me at about this point. I know, you're not supposed to log into a running container and start services. I don't care; this is a quick and dirty working solution to test PHP7 without a lot of setup. Also, I welcome pull requests if any of you wants to help improve the container: [https://github.com/karllhughes/laravel-php-7](https://github.com/karllhughes/laravel-php-7)_\n\n#### 5\\. Start Apache within the container\n\nFrom the container's command line, navigate to the web root with \"cd /www\". Then run \"apachectl start\" to get the webserver running within the container.\n\n#### 6. Make sure things are working\n\nYour application should be available at _http://localhost:80_ if everything is wired up correctly. You can also attach the application to another port by modifying the command above to something else: \"docker run -it -v $PWD:/www -p <YOUR LOCAL PORT>:80 karllhughes/laravel-php-7\". If you get a 500 error, make sure your file permissions are open and you have a valid .env file in the project. You can also run \"composer install\" or \"composer update\" to make sure your packages work with PHP7\\. Finally, you can run your unit tests with \"php vendor/bin/phpunit\". Now you've got your Laravel application running in PHP7\\. Congrats! Feel free to leave me feedback [on the repo](https://github.com/karllhughes/laravel-php-7) or on [Twitter](https://twitter.com/karllhughes) if you have questions or trouble setting this up.","createdAt":"2016-03-24 07:16:49","updatedAt":"2016-03-24 07:16:49","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=876","type":"blog"}
{"_id":"e-books-being-over-published","title":"Are E-Books Being Over Published?","content":"Recently, I was asked about writing an e-book, \"You haven't published an e-book yet? Why not?\"\r\n\r\nHonestly, 90% of low-cost e-books I have read suck.  I'm not talking about books that are also backed by a publisher and published as an e-book and a regular book. I'm talking about the thousands of crappy bloggers out there who think that compiling their top posts into digital book form means they can charge $4.99.\r\n\r\nLet me repeat: _compiling your blog posts does not give you the right to charge people money_. That's just deceiving your customers. Now, there are legitimate writers with great advice and experience who don't want to bother getting published by a company, so they publish independently in e-book form. Unfortunately these writers are rare.\r\n\r\nMost of the e-book writers out there seem to be [attempting to make a quick buck](http://mediadecoder.blogs.nytimes.com/2012/03/08/government-pressuring-publishers-to-adjust-pricing-policy-on-e-books/), and that just devalues the medium. \r\n\r\n#### Back to why I won't publish one anytime soon\r\n\r\nI _love_ to write, but I also believe that _books should be meaningful_.  Now, it's not that I don't have anything meaningful to say - if I didn't, I wouldn't write at all.  But, I feel like a book should be a serious undertaking.  It should require my full attention.  It should add _meaningful value_ to my readers' lives. It's that simple. \r\n\r\n#### Let's Stop Over Publishing Junk\r\n\r\nTo all my fellow bloggers and writers: please take books seriously.  _Especially_ if you charge money for your work. I'll appreciate it greatly.","createdAt":"2012-03-09 03:06:05","updatedAt":{"$$date":1486155313604},"imageUrl":"http://i.imgur.com/1ksWVHy.jpg","postUrl":"http://karllhughes.com/?p=59","type":"blog","tags":[{"_id":"books"},{"_id":"writing"}]}
{"_id":"engineering-manager","title":"A Day in the Life of an Engineering Manager","content":"I started tracking how I spend my time at work in March of this year. It's been a couple months, so I've got a good breakdown of time now, and I thought it might be interesting to share with any other engineers who want to know what the day to day is like as an engineering manager.\n\n## My current role\n\nFirst, a little bit about [Packback](https://www.packback.co/) and my role here. I joined Packback when there were just four of us. It was essentially myself and the founders. Since then, we've raised $3.5 million and now have 20 people at the company. Our engineering team is still pretty lean - there are five of us now - but my role has obviously changed quite a bit in the past two and a half years. My role as the Head of Engineering at Packback comprises two main things:\n\n1.  Making sure our website works and continues to improve\n2.  Helping everyone in the company understand what's technically possible\n\nAlong the way, I've had to hire people, build processes to make things run smoothly, and [a million other little things](https://www.karllhughes.com/2015/roles-of-startup-cto/), but my goal is really pretty simple: keep Packback's technology running.\n\n## So how do I spend my time?\n\nLike I said, I started tracking my hours with [Jiffy](https://jiffy.nu/) to see how I might improve my use of time, and while I haven't gotten to the optimization phase yet, I have gotten a decent look at my day to day. Here's the breakdown with details of each kind of task below:\n\n*   **32% Technical**\n*   **36% Managerial**\n*   **17% Promotional**\n*   **16% Administrative**\n\n### ![engineering-manager-time](https://i.imgur.com/Tx9pTaz.png)\n\n### Technical\n\nTechnical work includes writing code (22%), code reviews (6%), hunting down bugs (2.5%), and reading up on best practices (1.5%). As my team has grown, the amount of time I solidly devote to technical work has predictably dwindled, but I do think it's important for engineering managers to spend at least [30% of their time elbows deep in the code](http://www.drdobbs.com/architecture-and-design/engineering-managers-should-code-30-of-t/240165174).\n\n### Managerial\n\nThis includes general management tasks and planning (15%) as well as meetings with technical and non-technical team members (21%). Making sure my team is happy by being their advocate in business meetings and helping our non-technical product team create better specs is all a part of this bucket of time.\n\n### Promotional\n\nA lot of engineers cringe at the word \"promotion,\" but when you struggle through hiring your first employee, you'll see where all that work pays off. This includes going to conferences, meetups, and other hiring-related outreach (16%) as well as writing blog posts (1%). I spend more of my time with promotion-related tasks when we're hiring, but even when we're not I think it's important to keep Packback's name out there and continue making connections for the future.\n\n### Administrative\n\nThis includes reading and writing emails (4%) as well as answering questions, random asides, and \"other\" day to day things (12%). I try as much as possible to keep this kind of cruft out of the engineering team's hair, so when someone has a tech-support question, it likely falls to me.\n\n## Takeaways\n\nMost experienced managers will tell you this, but being a good manager is all about [helping others achieve great things](http://www.jrothman.com/articles/1999/01/successful-engineering-management-7-lessons-learned/). This means that your technical impact is much less direct, and therefore, you can't spend all your time heads down in the code. It was frustrating for me at first because I saw my weekly accomplishments list shrink, but once I learned to accept that my team was getting more done without my individual contributions than I could do on my own, I started to really enjoy my role. If you're an aspiring engineering manager or you're just wondering what your boss does with his time, I hope this helps you out. Also, if you've got feedback for me, you're welcome to let me [hear your thoughts on Twitter](https://twitter.com/KarlLHughes).","createdAt":"2016-05-24 08:52:48","updatedAt":"2016-05-24 08:52:48","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=904","type":"blog"}
{"_id":"everybodys-got-an-idea-ideas-suck-action-doesnt","title":"Everybody's Got an Idea. Ideas Suck. Action Doesn't.","content":"*This post was first published in December, 2012, and is being republished as part of my [2017 writing goal](/posts/2017-writing-goal).*\r\n\r\n-----\r\n\r\n> “Amateurs sit and wait for inspiration, the rest of us just get up and go to work.” - Steven King\r\n\r\nI can't tell you how many times somebody has come to me with their first \"great\" idea. They're excited. They have a sudden burst of pure joy as they express their vision, and they look at me with an unquenchable thirst for something new. They see all the fame, glory, and excitement that carrying out this idea could bring them, and have no reservations about the possibility of failure.\r\n\r\n## Most of them won't follow through\r\n\r\nEven as I look at their enigmatic faces, I know that 90% of these new idealists won't ever take the first step in making something happen. Most of them will obtain solid, predictable jobs that give them a certain level of security, and while their idea may hold a valid and potentially profitable business, I know that starting a business is [99% perspiration and only 1% inspiration](http://en.wikiquote.org/wiki/Thomas_Edison).\r\n\r\n## But, there's good news!\r\n\r\nI tend to get a little grim when I talk about idea-men, and how few of them become _real_ creators. But, there are signs that action may be taking hold again. Entrepreneurship in the US is up by [60% this year](http://www.washingtonpost.com/blogs/on-small-business/post/entrepreneurship-up-60-percent-in-us-since-last-year/2012/11/28/5287ce3c-3994-11e2-a263-f0ebffed2f15_blog.html).\r\n\r\nThe most recent recession sent many smart entrepreneurs running to hide, but as the economic climate has improved, future business owners are coming out in droves to take advantage of the change in outlook. Plenty of industries that once flourished are struggling - housing, advertising, journalism, and manufacturing to name a few - and those of us with ideas for revolutionizing those markets are finally seeing promising signs that our efforts are worthwhile.\r\n\r\nMeanwhile, the [availability to education and technical talent is rising](http://www.nytimes.com/2012/11/14/education/moocs-to-be-evaluated-for-possible-college-credit.html?_r=0). Another good sign for American entrepreneurs is greater access to people and ideas that can actually create new things, even if those people are spread across the world in China, India, Eastern Europe, or Japan. \r\n\r\n## Go out and embrace the unknown\r\n\r\nMy final encouragement to those with ideas is this: [Make something happen](/posts/be-unique-and-dont-wait/). One of the few ways that the United States might regain its place in the world economy is to encourage and reestablish its place as an entrepreneurial mecca. We have intelligent people with incredible access to a huge market of consumers. We are a land of enterprising individuals. We know our strengths. We _can_ make big things happen. Now it's just a matter of _when_. Are you ready to take the plunge?","createdAt":{"$$date":1487916043000},"updatedAt":{"$$date":1487942533717},"imageUrl":"https://i.imgur.com/ZAHOINQ.jpg","postUrl":"http://karllhughes.com/?p=310","type":"blog","tags":[{"_id":"motivation"},{"_id":"success"},{"_id":"entrepreneurship"}]}
{"_id":"explore-exploit","title":"Explore vs. Exploit as an Architectural Choice","content":"We make \"explore vs. exploit\" decisions all the time in software engineering. For example, if you were asked to build a new web application would you use a framework you already knew or try something on the cutting edge? When refactoring some code, would you try to only use patterns already used in the library or would you explore new design patterns?\r\n\r\nI can think of dozens of choices like this that I’ve made in the past few months, and while some are pretty minor, many have a huge impact on how long projects take and how easy or hard they are to maintain. Read more about how software architects use explore and exploit choices by clicking \"Read More\" below.","type":"link","imageUrl":"https://cdn-images-1.medium.com/max/2000/1*riqosu1B9-1q7QYDuzziiA.jpeg","postUrl":"https://medium.com/@karllhughes/explore-vs-exploit-as-an-architectural-choice-e8893667b2f0","tags":[{"_id":"programming"},{"_id":"leadership"}],"createdAt":{"$$date":1494938819918},"updatedAt":{"$$date":1494938819918}}
{"_id":"facebook-easing-friction-for-pages-to-promote-posts","title":"Facebook: Easing Friction for Pages to Promote Posts","content":"I hopped onto Facebook today to update it with one of the latest articles from [Uloop](https://www.facebook.com/uloop) and was greeted with a new feature.\r\n\r\n## Would You Like to Promote This Post...for a Fee?\r\nSo in this case, Facebook will let me pay $10 to ensure that this post reaches approximately 3,300 people.  Our page generally reaches around 8,000 people per week, but occasionally we'll have a viral post that reaches up to 80,000. \r\n\r\nThe weekly numbers aren't really fair though. Each individual post generally reaches 500 to 800 people, but like the weekly number, that can vary quite a bit as well. So, for $10 Facebook will put my post out to 5 or 6 times as many people as usual.\r\n\r\nThe only gripe I have with it is that it's easy to screw up and accidentally promote a post. When testing it out for this article, I clicked _Save_, but before making the post live, I hit cancel. Turns out the _Cancel_ didn't register. Oh well, it was only $10, and I guess this will be my test  I'll just know not to touch that button unless I'm sure that I want to promote a post.\r\n\r\nWhat do you think?  Will you be using the promoted post feature to get your business' posts out to more fans?","createdAt":{"$$date":1338321948000},"updatedAt":{"$$date":1487037866593},"imageUrl":"","postUrl":"http://karllhughes.com/?p=192","type":"blog","tags":[{"_id":"facebook"},{"_id":"social-media"},{"_id":"marketing"}]}
{"_id":"fear-uncertainty","title":"Dealing with Fear and Uncertainty","content":"*This is a short excerpt from an online book I'm currently writing called [CTO Patterns](https://github.com/karllhughes/cto-patterns). The book-to-be is full of advice for building and managing engineering teams at startups. Some of it is my own; some has been borrowed from much wiser people. Let me know if you have any feedback!*\r\n\r\n-----\r\n\r\nI remember vividly the feeling I got when I was put in charge of my first real team of engineers. I got pulled into an unscheduled meeting with our CEO and COO on a Wednesday afternoon. They told me that my boss - our company's Head of Engineering - was leaving in two weeks and that they wanted me to take over his role.\r\n\r\nI had managed small teams of writers in college and just afterward, and I started this job managing a couple contractors overseas, but leading and building our engineering team of five at a quickly growing startup felt like a big leap. How would I get the team to respect me? I was younger than most of them, and hadn't really been a developer that long. Would I have the courage to stand up for their interest in company meetings? How would the new engineers feel about getting a new boss just after they started work?\r\n\r\nThe company's makeup had dramatically changed over my first year and a half there, and now, just as things were starting to stabilize and our engineering team was picking up steam, our leader was moving on and I was going to have to step up.\r\n\r\nI'm an ambitious individual, so you might think I was excited - and maybe part of me was - but the only feeling I vividly remember was fear.\r\n\r\nI walked out of the meeting with the founders a bit shaky and tried to focus on getting some work done for the rest of the day. I went home and kept my girlfriend up late talking about what I should do and how I was going to deal with this new role. I felt completely unprepared and uncertain.\r\n\r\n## Imposter Syndrome\r\n\r\nI've talked to countless CTOs and engineering managers since then, and I now realize that this feeling of inadequacy is far from exceptional. In fact, [most people will have this feeling at some point in their career](http://bsris.swu.ac.th/journal/i6/6-6_Jaruwan_73-92.pdf), which is why we have a name for it: imposter syndrome.\r\n\r\nI'm not going to try to give you a cure-all for this feeling. If it's your first time managing a team, you're probably going to get it at some point, and hopefully you have a supportive network of mentors within and outside your company to help you out.\r\n\r\nThat said, here's what has helped me keep imposter syndrome from paralyzing me:\r\n\r\n### 1. Talk through the feelings\r\n\r\nHaving people around you who you trust and can go to when you feel overwhelmed or unworthy is the biggest career asset you can have. I have a few close mentors who are years ahead of me on the leadership journey, a wonderful fiancee who also holds a position of leadership in her profession, and have had great coworkers at various places along the way.\r\n\r\nIt's hard to admit that you don't feel adequate for your job, but it's okay. Remember 70% of people have felt this way, so chances are that your support network has been in your shoes.\r\n\r\n### 2. Keep the big picture in mind\r\n\r\nGoing back to my point in chapter 2, most of the little decisions you make during a typical week are not actually as big a deal as you think they are when you visualize the big picture. Your company may succeed or fail, but it's unlikely that you will be the sole root cause of either of those. If you feel like you are, ask your leadership team how they feel about it. If they feel like you're the right person for your job there's probably a reason for it.\r\n\r\n### 3. Be honest with your team\r\n\r\nFinally, I am honest with my teammates in one-on-ones and group settings. When I don't know the best decision to make, I tell them. This is a sign of humanity, not weakness, and it increases their empathy for you as a leader. It also gives them a chance to step up and help you out if they know you feel a bit overwhelmed.\r\n\r\n## Uncertainty\r\n\r\nLeaders often must make decisions with incomplete information. When I joined The Graide Network in 2016, I spent a lot of time talking with the founders about the requirements of their platform. The first version was unreliable and had fundamental flaws in the way data was stored, so like many companies dealing with a legacy software stack, we faced a choice between rebuilding or refactoring.\r\n\r\nRebuilding meant we could throw the mess out and restart the project based on the features we knew it had to have. We could eliminate inefficiencies, unit test everything, and in three to six months, probably be back where we started.\r\n\r\nRefactoring would be a longer, but likely safer road. Every project has the spec that engineers know about and the spec that is locked away in the business team's mind. What I mean is that even if we attempted to catalog all the features of The Graide Network's platform, we'd constantly be discovering or remembering new ones.\r\n\r\nThis system was over a year old and had undergone many upgrades, so things were patched on top of each other in a way that made relying on the code for spec nearly impossible. Rebuilding from the ground up would likely take longer than we thought, and making reasonable estimates was impossible. Plus, we'd have to maintain the older system while the new one came online, and that would only slow things down more.\r\n\r\nI did not have a template for dealing with this kind of problem yet, and the rest of my team was not technical, so they really didn't know where to start. This wasn't my first time dealing with uncertainty though, so I had an idea of where to start with making this decision.\r\n\r\n### 1. Gather details\r\n\r\nDetails of a problem come in two flavors: technical and non-technical. Gathering them can mean talking to team members or customers, reading articles or books, or even trying one or two things out. Pulling together information is a great first step in conquering uncertainty, but here's the catch: you have to set a limit for yourself.\r\n\r\n\"[Analysis paralysis](https://www.forbes.com/sites/jeffboss/2015/03/20/how-to-overcome-the-analysis-paralysis-of-decision-making/#90402931be5a)\" is a term used for being unable to act because you're so focused on gathering or analyzing data that you can't commit to a path. The reason you don't want the detail gathering phase of your decision making to take too long is that at a certain point, you really can't absorb and weigh any more information than you already have. Set yourself a time limit, go learn all you can about your problem, then move on.\r\n\r\n### 2. Talk to your mentors\r\n\r\nWhile a great mentor might not have a solution to your particular problem, they'll usually help you put it into perspective or help you remember your priorities.\r\n\r\nA while back I was weighing letting an employee go. He was hired to do a very specific job and was mostly self-managing his priorities and timeline (that hire itself was a mistake on my part, but that's another story). He had made some progress, but he was constantly overbuilding things, and it was a huge drain on our velocity. We were a startup, so perfection wasn't the goal; pragmatism was.\r\n\r\nAnyway, I met with a couple of my mentors about it, and one of them immediately pointed out my flaw in hiring him. \"You hired someone to do X? And you've only got 6 engineers? No, no, no. Quit that now.\"\r\n\r\nThe employee's performance was my concern, but in reality, the biggest problem was that I had hired someone for a job that wasn't necessary yet. Stepping back and hearing this from someone who had more experience and wisdom than me was of huge value.\r\n\r\n### 3. Balance reasoning with your gut\r\n\r\nIn Richard Wiseman's _The Luck Factor_, one of the things that he found in common among lucky people was that they knew when to listen to their \"gut\" rather than reasoning through every problem completely. Like any common muscle action - typing on a keyboard, turning a page in a book, or putting on your clothes - your brain has learned to put these tasks on auto-pilot. You don't really think about them. At a certain point, your brain relies on this same auto-pilot to help it make decisions based on past experiences you've had that you don't even consciously remember.\r\n\r\nI know that as a first-time engineering manager or CTO, you might not think your gut is the best decision-maker, but you might also be surprised. Many of the same problems you faced as a software engineer or team lead have prepared you for making good gut decisions.\r\n\r\nMost importantly, remember that fear, uncertainty, and imposter syndrome or normal reactions to taking on a new role. Your brain is telling you to back off and go back to something comfortable. Don't let this hold you back. Learn to face struggles with action and keep moving forward. It only gets easier.\r\n\r\n-----\r\n\r\n*To read more and follow the rest of the book's development, check out the Github repository: [CTO Patterns](https://github.com/karllhughes/cto-patterns).*","type":"blog","imageUrl":"https://i.imgur.com/6RdtfUJ.jpg","postUrl":"","tags":[{"_id":"fear"},{"_id":"leadership"},{"_id":"cto-patterns"}],"createdAt":{"$$date":1489444772618},"updatedAt":{"$$date":1489444813576}}
{"_id":"five-takeaways-from-clean-code-a-handbook-of-agile-software-craftsmanship","title":"Five Takeaways from Clean Code: A Handbook of Agile Software Craftsmanship","content":"*I first published this post in May, 2015, but Clean Code is timeless. If you're new to programming, read it because it's a great primer. If you're experienced in programming, read it because it's a great reminder.*\r\n\r\n-----\r\n\r\nAs regulars to my blog know, [I've been reading more this year](/posts/trello-as-a-reading-list/), and while most of the books I've finished in 2015 have been fiction, I've also made an effort to spend some time with books that will advance my professional knowledge.\r\n\r\nSoftware engineering is a challenging field because it changes quickly and there's no end to what you can learn. While you can certainly gather applied knowledge from just _doing_ it and reading code, it's helpful for me to read principles out on paper (or on screen at least).\r\n\r\nThe first book I completed on software design this year was [_Clean Code: A Handbook of Agile Software Craftsmanship_ by Robert Martin](http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0132350882&linkCode=as2&tag=volb-20&linkId=HA7LRZAECMH5WSGS). While some of the examples were a bit laborious to read (I'm not very experienced with statically typed languages like Java), it was still very helpful to see real world applications along with the advice the book offers. There were many smaller details that I highlighted from the book, but rather than list the dozens of those, I wanted to pass along my five favorite big-picture takeaways. I hope other software developers find these helpful, and if you feel that you could improve on any of them, I'd recommend checking out the book. \r\n\r\n## 1. Write Code that's Testable and (Almost) Everything Else Falls Into Place\r\n\r\n> \"Without tests every change is a possible bug. No matter how flexible your architecture is, no matter how nicely partitioned your design, without tests you will be reluctant to make changes because of the fear that you will introduce undetected bugs.\"\r\n\r\nTesting is underutilized in the PHP community, and unfortunately there are a lot of developers out there who still aren't taking advantage of it at all. That said, once you do get familiar enough with unit testing that it doesn't scare you, it's clear that testing makes you more productive, more flexible to changes, and speeds up the ramp-up time for new developers. Besides the obvious advantage of telling you when your code stops working as expected, creating code that is testable forces you to separate concerns and inject dependencies rather than spaghetti stringing methods together. Testable code is the sign of good design that is also well executed.\r\n\r\n> \"Making our systems testable pushes us toward a design where our classes are small and single purpose. It’s just easier to test classes that conform to the SRP. The more tests we write, the more we’ll continue to push toward things that are simpler to test. So making sure our system is fully testable helps us create better designs.\"\r\n\r\n## 2. Don't be Afraid to Create More Classes\r\n\r\nThe [single responsibility principle](http://en.wikipedia.org/wiki/Single_responsibility_principle) is one of the biggest stressed points in _Clean Code_, both explicitly and tangentially. Each function should be responsible for one thing, and if it becomes clear that a function is doing more than one thing, it should be split. When a class containing functions holds the responsibility for several categories of functions, it's time to split it as well:\r\n\r\n> \"The name of a class should describe what responsibilities it fulfills. In fact, naming is probably the first way of helping determine class size. If we cannot derive a concise name for a class, then it’s likely too large.\"\r\n\r\nI feel like a lot of developers in the PHP world are still adapting to object oriented programming. While the infrastructure to create classes has been in place for a while now, there are still a lot of people hacking around with massive pages of globally available functions in their web sites (cough, cough: Wordpress). Fortunately modern frameworks like Laravel have some awesome constructs to help with single responsibility in classes ([read up on Command Handlers if you're interested](https://mattstauffer.co/blog/laravel-5.0-commands-and-handlers)).\r\n\r\n## 3. Make Parts Interchangeable\r\n\r\n> \"In the context of dependency management, an object should not take responsibility for instantiating dependencies itself. Instead, it should pass this responsibility to another 'authoritative' mechanism, thereby inverting the control.\"\r\n\r\nReusability is another hallmark of a well designed program, and one of the best tools to encourage reuse is dependency injection via an IoC container. If you're new to software design or those terms make no sense to you, [read up on them](http://fabien.potencier.org/article/11/what-is-dependency-injection). It took me a while - and a lot of reading code - to get to a point where I understood dependency injection, but it's awesome for creating reusable, testable code.\r\n\r\n## 4. All Clean Code Starts as Messy Code\r\n\r\n> \"It is a myth that we can get systems 'right the first time.' Instead, we should implement only today’s stories, then refactor and expand the system to implement new stories tomorrow. This is the essence of iterative and incremental agility. Test-driven development, refactoring, and the clean code they produce make this work at the code level.\"\r\n\r\nIt's a little discouraging as a new developer when you look at your work on a brand new project compared with that of a more mature open source one out on Github. \"How did they write such clean code?\" you wonder. It seems like you'd never be able to come up with such an elegant solution. _Clean Code_ the book really helped me be okay with starting out with my own messy code. Nobody writes clean, elegant code the first time through, and most mature projects have been refactored more times than you realize. Requirements change, solutions change, developers change, and along the way a good system with responsible developers will slowly but continuously improve.\r\n\r\n## 5. Refactoring Happens Now or Never\r\n\r\nThat said, you have to refactor quickly:\r\n\r\n> We’ve all looked at the mess we’ve just made and then have chosen to leave it for another day. We’ve all felt the relief of seeing our messy program work and deciding that a working mess is better than nothing. We’ve all said we’d go back and clean it up later. Of course, in those days we didn’t know LeBlanc’s law: _Later equals never_.\r\n\r\nIf you continually put off refactoring messy code, you'll eventually find yourself with a mess too big to deal with, and then you get yourself into a situation where a massive rewrite is required. Big rewrites take twice as long as anyone thinks and likely cost three times as much. Nobody likes them, and you're bound to lose some functionality in the process.\r\n\r\n> \"I like my code to be elegant and efficient. The logic should be straightforward to make it hard for bugs to hide, the dependencies minimal to ease maintenance, error handling complete according to an articulated strategy, and performance close to optimal so as not to tempt people to make the code messy with unprincipled optimizations. Clean code does one thing well.\" - Bjarne Stroustrup, Inventor of C++","createdAt":{"$$date":1492333217000},"updatedAt":{"$$date":1492354768356},"imageUrl":"https://i.imgur.com/EHex9XC.png","postUrl":"http://www.karllhughes.com/?p=733","type":"blog","tags":[{"_id":"programming"},{"_id":"books"}]}
{"_id":"gaba-stack","title":"Building a Free Website on the GABA Stack","content":"There are hundreds of ways you can put up a website without writing much code, but one pattern I've started playing around with is the GABA stack.\r\n\r\n### What is the GABA stack?\r\nYou hear a lot about \"LAMP\" and \"MEAN\" stacks, but this is a bit different. Instead of using the fanciest new developer tools to build highly-scalable, well-crafted applications, GABA is all about **building something quickly and cheaply with as little code as possible.**\r\n\r\nSo what does \"GABA\" stand for?\r\n\r\n- **G**ithub Pages - If you just want to host static HTML with a little Javascript or jQuery, [Github Pages](https://pages.github.com/) is the best option. It's free, it lives in the same place as your source code, and you can extend it to use something more robust like [Jekyll](https://jekyllrb.com/) once you need more than one page in your webapp.\r\n- **A**jax/jQuery - If there's anything that needs to be dynamic on the frontend, we'll rely on [jQuery and Ajax](https://api.jquery.com/category/ajax/) to grab it from Airtable's API. jQuery also gives you some basic DOM manipulation tools and interactivity. I know it gets a lot of hate because it's been misused for so long, but really, it's a good tool for sites that don't need single page apps like Angular.\r\n- **B**ootstrap - HTML and CSS are tedious to write, but [Bootstrap](http://getbootstrap.com/) requires no work or decisions to get going. Combine it with some custom colors, [Google Fonts](https://fonts.google.com/), and [Font Awesome](https://fontawesome.com/) icons, and you've pretty much got everything you need for a simple UI.\r\n- **A**irtable - [Airtable](https://airtable.com/invite/r/4EaSmQNr) is my absolute favorite tool I found in 2017. Like Google sheets, it lets you store your data in a shareable, online spreadsheet-like format. Unlike Google sheets, it also comes with an API, database-like filters/queries, and customizable input forms and views. This means that you can set up an embedded Airtable form to handle data inputs and then display this data by calling their API right from your frontend.\r\n\r\n### What does this look like?\r\nI put together my first proof of concept using this stack over a couple early mornings this week. It's hosted now at [news.fored.us](https://news.fored.us/). The site is just a news feed of education blogs that I've aggregated using [Zapier](https://zapier.com/), [RSSMix](http://www.rssmix.com/), and [Airtable](https://airtable.com/invite/r/4EaSmQNr), but it's presented such that I can learn what people on the site want to see in future iterations of the project. If I see a lot of people clicking on the RSS link, that's the feature I'll build next; if they're clicking the \"Popular\" tab often, that's what I'll tackle.\r\n\r\n[![](https://i.imgur.com/GBvNz8x.png)](https://news.fored.us/)\r\n\r\nThe goal of an MVP (even just a little side project like this) is to find something that might be useful to really build, so while I did write a little code (just some [HTML and Javascript hosted on Github](https://github.com/foredus/news-frontend)), there's nothing complicated in here. All the hard stuff (permissions, data storage, aggregation, etc.) is handled by the supporting services.\r\n\r\nSince the site costs me (practically) nothing to keep running, I can just check the traffic every few weeks and see if there's any indication for what to build next. If nobody uses it, I'll try something different and I'll have lost almost nothing but a couple hours.\r\n\r\n### What do I still need to figure out?\r\nWhile my first proof of concept using the free GABA stack is up and running, it's admittedly very simple and wouldn't work for many applications. That said, I'm thinking that this could be scaled up quite a bit using other freely available tools:\r\n\r\n- **User authentication/login** - I'm planning to try a service like [Auth0](https://auth0.com/) for this, but other single sign-on solutions might work.\r\n- **Caching Airtable results** - Unfortunately Airtable only allows 5 requests/second, so if my site suddenly gets barraged with traffic, it's going to lock up. A simple proxy service would mitigate this, but I haven't found one that I can use as a service that's free. Worst-case scenario might be setting up a passthrough Node or Nginx container somewhere to handle this for me.\r\n- **Searching** - I'll likely use [Algolia](https://www.algolia.com/), a managed search service, to handle indexing and searching news articles. Since my project is open source, it'll be free for a few thousand records.\r\n- **Payments for advanced features** - I'm not really sure if anything here is worth charging money for, but it's possible that future iterations of the project may warrant it. If so, I could integrate a payment for using [Stripe](https://stripe.com/) or set up recurring payments with [Moonclerk](https://www.moonclerk.com/) pretty easily.\r\n\r\nHave your own ideas for setting up a free/minimal web app? I'm always interested in hearing about MVP hacks like this, so [reach out on Twitter](https://twitter.com/karllhughes) to pick up the conversation.","type":"blog","imageUrl":"https://i.imgur.com/lnx7vsT.png","postUrl":"","tags":[{"_id":"mvps"},{"_id":"engineering"},{"_id":"github"},{"_id":"airtable"},{"_id":"programming"}],"createdAt":{"$$date":1517023477251},"updatedAt":{"$$date":1517023675220}}
{"_id":"graduate-code-bootcamp","title":"What to do After you Graduate from a Code Bootcamp","content":"I've been volunteering as a teacher at [Startup Institute](https://www.startupinstitute.com/) for a couple years now where I usually give a few lessons per year to their developers-to-be. Teaching the students helps me stay connected to the entry level community and reminds me what it was like at the beginning of my career. While I didn't attend a bootcamp program, I am a self-taught software developer, so I can relate to the challenges that new graduates face. The most common question I get from Startup Institute and Dev Bootcamp grads is, \"I'm done with the program, but what should I do next?\" Most of them don't have a job the moment they graduate, and if they do it's more likely an apprenticeship program than anything else. Very few developers are actually ready for a job after a nine-week program, but if you take what you learned from your developer program, there's no reason you can't make a strong foundation for your career. Here's what I recommend to new graduates of coding bootcamp programs:\n\n### 1\\. Strengthen your technical skills\n\n**Pick a few skills to build up** - Get a list of 10-20 job listings you think look interesting. Make a list of all the skills and tools the listings mention, and then tally up the totals. Once you know which skills are in demand, you can start reading up on them and practicing. **Work on [Project Euler](https://projecteuler.net/)** - Since most code bootcamp grads don't have a traditional background in algorithms or computer science, it's probably a good idea to learn some of those skills on your own. [Project Euler](https://projecteuler.net/) (pronounced \"oiler\") is a great place to start. ![euler - pronounced oiler](https://i.imgur.com/dD6esn4.jpg) **Build a real web app, start to finish** - Don't keep building little one-off helper scripts. Pick one big project and stick with it. Set yourself a roadmap, iterate on the application, and show employers that you have the persistence to stick with one big thing rather than chasing a million little things. **Make a PR to an open source project** - Open source software is awesome, and chances are you've been using it throughout your short time developing. Take a look at some projects and [make a pull request](https://guides.github.com/activities/contributing-to-open-source/) that improves something simple like documentation or test coverage.\n\n### 2\\. Meet people\n\n**Apply for jobs** - This should be obvious, but as they say, you miss 100% of the shots you don't take. Even if you don't feel qualified, try applying for some jobs, taking some interviews, and learning from each one you get. If you're not sure what employers are looking for, here are some [things I look for when hiring entry level devs](http://blog.startupinstitute.com/2016-04-13-qualities-of-a-good-developer-karl-hughes/). **Meet with people** - Not every \"interview\" is an official interview. In fact, both of my last two jobs have been a result of unofficial coffee talks and not official interviews. Ask your friends, colleagues, former coworkers, teachers, etc. for intros. **Go to meetups** - You have a list of skills above, so go checkout [Meetup.com](http://www.meetup.com/) and find some groups that meet in your area. Try to be friendly or at least send the speaker an email afterwards if you like the talk.\n\n### 3\\. Improve your whole self\n\n**Start a blog** - You don't have to write anything profound, but the earlier you start building an online presence, the better off you'll be when you do have something to say. You can use Medium, Tumblr, or Wordpress if you don't want to build a blog yourself from scratch. **Create a list of must-read blogs** - I use Feedly to curate a few hundred developer blogs, and then I use Zapier to email me a digest of the new articles every day. If you want to use my list as a starting point, it's [public on Feedly](http://feedly.com/jobbrander/Engineering%20Blogs). **Work out** - Staying in shape is a [long-term investment in yourself and your career](https://www.karllhughes.com/2015/health-investment-success/). I know it seems easy to take a pass on working out when you're job hunting, but don't. It'll help you keep your confidence up and give you a reason to wake up and shower every morning. **Read some books** - Another good habit you can build now while you've got the time is reading. I recommend keeping a list of books you want to read ([here's more info about how I do it](https://www.karllhughes.com/2015/trello-as-a-reading-list/)), and making a commitment to read a few pages every night before bed. That's it. If you have questions, feel free to [mention me on Twitter](https://twitter.com/karllhughes), and if you're interested in learning more about developer bootcamp programs? Not sure what you should expect? I wrote more on the topic a while back, so [check the article out](http://www.karllhughes.com/2014/dev-bootcamp-program/).","createdAt":"2016-04-18 07:16:55","updatedAt":"2016-04-18 07:16:55","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=884","type":"blog"}
{"_id":"graide-network-styleguide","title":"Creating Our First Styleguide at The Graide Network","content":"While there are a ton of great styleguides from large companies out there, I figured it might be helpful to hear what we learned while creating our first styleguide as a company of 5 people. Here are a few things we learned, and let me know if you have any feedback on our styleguide at The Graide Network.","createdAt":"2016-09-14T05:00:00.000Z","updatedAt":{"$$date":1485284025163},"imageUrl":"https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAj_AAAAJGY4MTdmMzc4LTU3YzAtNDUyMS05ZmQ5LWZjZTdhNTU3ZDc4MA.png","postUrl":"https://www.linkedin.com/pulse/standardizing-style-creating-our-styleguide-graide-network-hughes","type":"link","tags":[{"_id":"the-graide-network"},{"_id":"design"},{"_id":"programming"}]}
{"_id":"having-more-and-choosing-less","title":"Having More and Choosing Less","content":"If you've been reading my blog for the past couple years, you know that one of my big personal projects is to cut down on excess.\r\n\r\nThis is hard to do in our pro-gadget, pro-consumerist society, but I think it's a worthwhile pursuit, and even just consciously thinking about it from time to time makes you grateful for what you already do have. Still, it's hard for me sometimes, especially around the holidays. There's a constant temptation to buy more, eat more, and spend more, and it's really difficult to escape when you're - as I was this Christmas - outside of my normal environment.\r\n\r\nStill, slipping up and going overboard with a few too many cookies from time-to-time isn't the end of the world, and I find that my motivation to live with less is often highest after a big splurge. So, here's to 2015. It's a new year, a new start, and a new chance to do some things better than we did last year. I'm not big on resolutions, but I certainly have my share of new habits to kick off this year. I for one am excited about the second half of the decade, and would love to hear from you. \r\n\r\n## What do you want to get out of 2015?\r\n\r\n_Photo by [Fe Ilya](https://www.flickr.com/photos/renneville/ \"Go to Fe Ilya's photostream\") on flickr.com_","createdAt":{"$$date":1419953353000},"updatedAt":{"$$date":1492014738615},"imageUrl":"https://i.imgur.com/N7kO9ST.jpg","postUrl":"http://www.karllhughes.com/?p=665","type":"blog","tags":[{"_id":"personal"},{"_id":"minimalism"},{"_id":"materialism"}]}
{"_id":"health-investment-success","title":"Health as a Long Term Investment in Your Success","content":"*I first published this post in February, 2015 when I was just getting back into running after about five years of completely slacking off. Since then I've been pretty consistent with working out. It gets harder every year as I get new personal and familial responsibilities, but I know my fitness has a huge impact on my life performance. You can't be the best version of yourself if your body and brain aren't being taken care of.*\r\n\r\n-----\r\n\r\nI recently finished Scott Adams' (the creator of Dilbert) [_How to Fail at Almost Everything and Still Win Big_](http://www.amazon.com/gp/product/1491518855/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1491518855&linkCode=as2&tag=volb-20&linkId=YFOLAZWYAXCJQEAI). One of the defining features of the book relative to other self-help books is Adams' emphasis on a health-first approach to success. Basically, his point is that if you first focus on diet, you'll start feeling better and want to do very simple workouts. Once you start working out, you'll look better, have more energy, and want to do harder exercise. Eventually this energy and drive will spill over into other parts of your life, and you'll get better at just about everything from relationships to work to your hobbies.\r\n\r\nFrom Adams' blog:\r\n\r\n> Fit people have more energy to put into every task. And we all know that humans perform better when they have more energy. Studies back that observation...Energy influences your optimism, your ambition, and how others see you. Those are big deals too. - [_Health as a Competitive Edge_](http://blog.dilbert.com/post/103051087451/health-as-a-competitive-edge) by Scott Adams\r\n\r\n## So does fitness really matter? And if so, how much? \r\n\r\nThe criticism Adams has received relates to the fact that he's a cartoonist writing about success who then makes half his book about physical fitness. For people who expected a run-of-the-mill self-help book, this may come as a surprise, but if you're someone who considers himself a high achiever, you probably already know that fitness is a key element to success and happiness - at least to some degree.\r\n\r\nTowards the end of college and during the first two years of my career, physical fitness was on the backburner. I ate crap, drank crap, didn't run more than half a block if I could help it, and naturally put on 30+ pounds. I didn't think it was effecting my daily mood or work productivity, but then again, you slip into bad habits slowly, so you don't notice how they degrade your abilities. I was irritable at work, had a hard time focusing, and completely unsure where I was going in my career.\r\n\r\nOn the surface I appeared to be doing okay, but I was facing internal struggles every day, and it made it hard for me to build a consistent group of friends here in Chicago. A year and a half ago I started making changes. Over the next 18 months I [stopped eating meat](http://www.karllhughes.com/2013/why-ive-decided-to-go-vegetarian/), I started running again, I got on a weightlifting program, [I quit drinking](http://www.karllhughes.com/posts/why-give-up-alcohol), I quit smoking, I started measuring my food intake, and within that time period I got down to my lowest weight ever. I was over 40 lbs lighter than fat Karl was just two years before. Simultaneously, my career has started to take off in new ways. I'm leading a team of engineers at an exciting startup, I've gotten back into public speaking, I'm investing in my own side projects, and I've got a stronger network than I did two years ago. \r\n\r\n## How much can I really attribute this to fitness?\r\n\r\nIt's impossible to know for sure, but I can say that it was a catalyst for me to make other improvements in my life. Seeing that in just a few months I could change my body physically for the better encouraged me to set new levels of expectation for myself in other areas as well. \r\n\r\n## Results are typical but difficult\r\n\r\nThere are probably 100 people who want to lose weight and get in shape for every 5 people who actually do it. The difference is that some people actually put the rubber to the road and make small changes every day to improve their fitness. You have to look at fitness as a long-term investment in yourself. Just like building a retirement account, you can't count on winning the lottery and doing it overnight. The sooner you accept that this is a life-long journey, the sooner you can start yours.","createdAt":{"$$date":1490508059000},"updatedAt":{"$$date":1490539545557},"imageUrl":"https://i.imgur.com/WPks5ED.jpg","postUrl":"http://www.karllhughes.com/?p=695","type":"blog","tags":[{"_id":"health"},{"_id":"running"},{"_id":"success"}]}
{"_id":"heres-how-i-got-6000-followers-on-google","title":"Here's How I Got 10,000 Followers on Google+","content":"*Note: this post is being republished as part of my [2017 daily publishing project](https://www.karllhughes.com/posts/2017-writing-goal). It was originally published on March 7, 2012, and besides minor formatting updates, I have chosen to leave the content in tact. Unfortunately, Google+ will probably be dismantled soon, but back in 2012 I was all over the thing. I posted several times per day, hosted a little tech hangout every week, and got over 10,000 followers.*\r\n\r\n*The days of new social networks might be over, but I think some of this advice applies to any online marketing channel, so maybe it will still resonate for some readers.*\r\n\r\n-----\r\n\r\n**When Google released Google+ in the summer of 2011, I jumped on the chance to try it.  Quickly I found that engagement on the network was _much_ higher than that of Twitter of even Facebook.  Sure, I still use the others occasionally, but Google+ has proven to be the most powerful tool in my professional branding experience.  Here's a post I originally submitted to [Entrepreneurs of Knoxville](http://www.eokhq.com/) (removed now because I left the organization when I moved to Chicago) about using Google+:** \r\n\r\nGoogle+ is *by far* the most effective way for social media users and entrepreneurs to increase their personal brand.  I know what you're thinking, \"Whoah, Karl, that's a bold statement!\" Yes, it is, but it's also true, and today I'm going to tell you how you can use the tech giant's latest foray into social networking to become known worldwide as an entrepreneur in _any _field in which you operate.  Even though [there aren't a ton of people in Knoxville using it](https://plus.google.com/101080316492181821858/posts/UNzSrFqDXuU), I can tell you from first hand experience that *there are advantages to being an early adopter*.\r\n\r\n## STEP 1: Fill Out Your Profile\r\nGoogle is already starting to [rank profiles in its search results](http://www.blindfiveyearold.com/google-plus-seo), and now includes a feature called \"[Search Plus Your World](http://www.google.com/insidesearch/plus.html)\" to show search results which your friends have +1'd.  Google's unique ability to tie Google+ into search as well as its hundreds of other products make using it _almost_ unavoidable.  Filling out your profile may not seem like a big step, but it will help people identify you and make sure that you start securing your personal piece of the social network. \r\n\r\n## STEP 2: Circle and Watch \r\nI'm not going to tell you to start blindly spewing posts onto Google+.  This network was built on _engagement_ and not self-promotion, making its dynamic significantly different than Twitter or Facebook.  Take some time to follow industry leaders in your field as well as some of the thousands of journalists who are using it regularly.  Next, watch your stream.  Don't immediately jump in with your \"This Week We've Got 50% Off [insert your product]!!! Check the Blog for More!!! [link to blog]\". This will not get you anywhere.  I'm amazed at the number of people who think that this will be an effective marketing strategy.  You wouldn't walk into a room full of strangers and shout this kind of thing would you?  Of course not.\r\n\r\nThink of Google+ like a real conversation.  By spending a little time watching your stream, you'll likely notice an industry leader or interesting person post a question that you can answer, a blog post that you enjoy, or a photo that you find funny.  Within two weeks of using the network, I had been circled by [Robert Scoble](https://plus.google.com/111091089527727420853/posts), and next week I'll be interviewing [his boss](https://plus.google.com/112398515632347301349/posts) for my [Weekly Technology Hangout](https://plus.google.com/101080316492181821858/posts/GuJQYh6aLH9).\r\n\r\n## STEP 3: Face-to-Face Works Best\r\nAs an entrepreneur, you know that face-to-face meetings are invaluable.  You can tell more about a person in thirty minutes at lunch than you can in weeks of online interaction.  Google+'s most interesting (and invaluable) feature is _free video chats_, called [Hangouts](http://www.youtube.com/watch?v=QN38vHZjWXw). There are literally hundreds of interesting ways that Google+ users are making use of Hangouts. I've seen everything from live concerts to interviews with celebrities to news reporting in the field. If your goal is to increase your professional network and build invaluable connections using Google+, then it's time to start hanging out.\r\n\r\nFirst, jump into a limited Hangout with some friends just to try it. Next, try joining a publicly available hangout.  You can use [Hangout Canopy](https://plus.google.com/115063434129506153403/posts) to track open public hangouts and meet some new people.  Some will be interesting and others may be strange.  There's no pressure to circle everyone you meet online, so just have fun trying something new. Once you _get_ Hangouts, host your own. I do a [Weekly Tech Hangout](https://plus.google.com/101080316492181821858/posts) where I bring a featured guest in some area of technology on to talk about their experience and expertise. I've gotten to talk to and learn from social media gurus, database architects, small business owners, startup founders, and IT professionals around the world.  The key to hosting a successful hangout is to have a predictable format and consistent schedule.  Use them as a way to get to know new people, not a way to promote yourself directly.  This isn't about making a hard sale, this is about engaging and relating to your future potential customers. \r\n\r\n## STEP 4: Create the Perfect Post\r\nPosting on Google+ is a bit different than it is on other networks.  Unlike Twitter, you are not restricted to a measly 140 characters, and you may find that your audience responds to different content than they do on Facebook.  Google+ tends to be a very tech-aware and creative group.  Nice, wide images resonate well and posting complete blog posts or large summaries of articles is usually beneficial.  Google+ will collapse your longer posts, so keep that in mind if you want the whole post to show to your readers. \r\n\r\n#### My Posting Formula \r\nI can't say that I stick to this perfectly, but as a general rule I post 5-12 times per day.  1-2 of those posts is of a personal nature, usually a picture of my latest culinary concoction or an update on a personal project I'm working on.  2-5 of those posts will be my commentary on a news story or blog post that I read.  1 post every day will be a full-length blog post that I write directly on Google+, usually with an attached photo or link to more information on the topic.  1-2 posts will be interesting or relevant reshares from another user. Don't worry if you feel like no one is responding at first.  As with any new form of social media, it takes a little time to build a following.  \r\n\r\nI _will_ say that the rate at which my following has grown has been _exponentially_ higher than that of Twitter.  In just 6 months of using Google+, I have over <del>4,500 followers</del> [10,000 followers](https://plus.google.com/101080316492181821858/posts), and my [Klout score has risen over 30%](http://klout.com/#/karllhughes). So, no matter how you stack it, Google+ is a great place for engagement.  For entrepreneurs, your personal brand matters a lot, and you never know what kind of people you could meet on Google+.  \r\n\r\nI am always willing to offer my time to help you out if you ever have questions.  Just [shoot me an email anytime](mailto:khughes.me@gmail.com).","createdAt":{"$$date":1485957600000},"updatedAt":{"$$date":1485956829631},"imageUrl":"https://i.imgur.com/aft39e7.png","postUrl":"http://www.karllhughes.com/?p=37","type":"blog","tags":[{"_id":"google"},{"_id":"social-media"}]}
{"_id":"hero-myth","title":"The Myth of the Hero","content":"*When I first published this post in June, 2014, I was just starting to manage a couple engineers. Interestingly, I've only seen this idea get more true as I've hired and managed more people. Superstars, rockstars, or heroes rarely pay off. Build a team of consistent performers and you'll make great products.*\r\n\r\n-----\r\n\r\nA lot of people assume that when you want great talent, you need a hero; someone who will rush in, destroy every barrier, and magically carry his team to victory. Unfortunately, [heros like this are mostly mythical beings](http://youtu.be/OBwS66EBUcY).\r\n\r\n## Why heros don't work\r\n\r\nI play for a couple casual beach volleyball teams here in Chicago. From what I've seen, there are three kinds of players on each team:\r\n\r\n1.  The heroic leader\r\n2.  Underconfident contributors\r\n3.  Consistent team members\r\n\r\nOf these three archetypes, by far **the most effective team members are those who are consistent,** and this stereotype goes much further than social volleyball league players.\r\n\r\nOutside of the beach volleyball courts, I've now been on half a dozen teams in my professional career, and I've seen my share of valiant heroes, frightened contributors, and consistent team players. Each personality type has shown up multiple times, and I've been able to manage and train each of them. By far, my favorite kind of employee is the one I can count on; the third one tends to be the most coachable, reliable, and effective one in the bunch, and here's why:\r\n\r\n## 1. Heros will take chances even when they aren't required\r\nBeach volleyball is a pretty simple sport. In most cases, nobody is very good at it, and it isn't that hard to keep the ball away from the obvious ace on the court. Unfortunately, praiseworthy moves like spikes and difficult to return serves are seen as winning skills, when in reality, the ability to consistently hit the ball over the net (and within bounds) is far more valuable.\r\n\r\nHeros will try the difficult shots that they should never attempt, they'll overpower their hits, and they'll go for a spot on the court that's challenging to hit rather than a simple volley. Occasionally they hit their mark, but 9/10 times, they fall short, leaving everyone wondering why they tried to make such a big splash.\r\n\r\nThe same can be said for heroes in business teams. Instead of making low-risk decisions that are a clear win, they will jump into something that - if successful - will shoot the company into stardom. If it fails though, they stand to lose it all, and in most cases, these high risk endeavors fail just like the high-risk volleyball moves do. There's an argument to be made that a few high-risk choices are acceptable in certain businesses, but if there is a solution that seems simpler, it's probably better than a high-risk hero move.\r\n\r\n## 2. Underconfidence breeds stagnation\r\nConversely, players who are decent, but afraid to even hit the ball are almost useless on a beach volleyball team. They run from the chance to touch the ball, and let heroes push them out of the way even when the other party has little chance of making a decent shot. In beach volleyball, these players usually take the form of inexperienced people who think they have no place on the team. By letting the heroes take the risk for them, they essentially become dead space on the court, destroying any chance of getting the ball over the net at a reasonable percentage.\r\n\r\nThis same personality type shows up in business, usually as a young employee who is given a project he feels is beyond his skill level. Rather than give the task his best shot or ask a more experienced player to give him guidance, he will try to pawn it off on someone else in the organization. He'll whimper that he didn't have the expertise to handle the issue or that so-and-so would be better suited for the job. Either way, he'll bring down your whole group's effectiveness, and leave everyone wondering what he does exactly.\r\n\r\n## 3. Consistent and predictable performances take the cake\r\nOn most beach volleyball teams, there are a few consistently decent performers. They get the ball over the net on 90% or more of their serves; they don't try to put fancy spin on anything; they don't go for a spike when a tap over the net is all that's required. Often times, they will opt to clear the ball over to the other side rather than attempt to set up a play with their teammates.\r\n\r\nThey aren't especially exciting to watch, but you know you can count on them to put the pressure back on the other team by returning the ball to the other team almost every time. If they're above average, they'll pinpoint risk-takers on the other side and try to put the ball just outside their reach, where they know they'll make a nearly impossible attempt to hit an impossible shot back at them.\r\n\r\nIn business, these are your best employees. They show up for work and meetings on time, they ask others how they can improve, they take predictable paths that have been proven by past experience. In short, you know you can count on them to do what they say they will. \"You want me to finish this project by Monday? Sure thing. I may have to leave out this one feature though,\" They'll say. You'll nod and admit that it was just a nice addition anyway, and you'll have what you expected on the due date.\r\n\r\nPredictable team players are the kind of people you can build a business on. Even if they don't get the recognition of the few superheroes in your organization, you know that every day you can count on them to meet expectations and encourage others to do the same. They won't take undue credit, and they'll keep an even temperament. They'll admit it when they screw up, and they'll learn to be a little more cautious next time they take on a similar project. Even in high risk ventures like startup businesses, you want predictable performers. You need these people to balance you out; you need them to consistently pull through when the riskier elements of your business fail.\r\n\r\nIt takes more than just guts to run a successful organization. It takes poise and logic as well, and that's what you'll get from consistent team members whether it's beach volleyball or your next business venture. For what it's worth, I'd take a dozen consistently above average performers before a hundred high-risk heroes any day, but what do you think? Are heroes worth the risk? Have they ever paid off for you?","createdAt":{"$$date":1491112819000},"updatedAt":{"$$date":1491143216544},"imageUrl":"https://i.imgur.com/HqBcveo.jpg","postUrl":"http://karllhughes.com/?p=531","type":"blog","tags":[{"_id":"teams"},{"_id":"hiring"},{"_id":"consistency"}]}
{"_id":"hiring-engineers-packback","title":"Announcement: We're Hiring Engineers at Packback","content":"2015 has been a really exciting year for us at Packback. We released a [complete rebuild of our eCommerce platform](http://blog.packbackbooks.com/post/122460780395/introducing-the-brand-new-packbackbookscom) at Packbackbooks.com, we brought on our fourth full-time engineer, we started contributing to the [open source community](http://www.karllhughes.com/2015/packback-used-textbook-prices/), we hired our first three full-time salespeople, we [raised another $1.5 million](http://www.chicagotribune.com/bluesky/originals/ct-packback-hyde-park-angels-answers-bsi-20150609-story.html), and now we're even more excited to announce that we're hiring again! \r\n\r\n## Packback is looking for engineering talent in Chicago\r\n\r\nAs we look at our needs for the immediate future and into 2016, it's clear that in order to meet our product goals, we need to bring more engineering talent onto the team. Much of the drive behind this round of hiring is to bolster infrastructure and help with a new offering that we're planning to launch early next year. Here are the details about our current round of engineering hires: \r\n\r\n### 1. Contract front end developer\r\nAs we've continued to grow, our need for a dedicated employee to take product designs and translate them into HTML and styling has grown as well. This role would start off as a part time contract role and possibly develop into a full time position as our need increases. _[Read more about this position and find out how to apply here](https://github.com/packbackbooks/hiring/blob/master/front-end-contract.md)._\r\n\r\n### 2. DevOps Architect\r\nScaling is a wonderful problem to have. Our developers have done a great job building software that can grow as Packback's needs do, and now we're ready to bring someone onto the team to help our servers grow too. Fortunately, we have a robust continuous integration process already in place, so you're not coming in to inherit a terrible mess. [_Read about our continuous integration process at Packback_](http://www.karllhughes.com/2015/continuous-integration/). [_Read more about this position and find out how to apply here._](https://github.com/packbackbooks/hiring/blob/master/devops-architect.md)\r\n\r\n### 3. Back end engineer\r\nFinally, we're looking for a back end engineer (we work in PHP/Laravel) to join us and contribute to a brand new application that we'll be launching in 2016\\. We have a great system in place for setting up microservices and building robust APIs, but we need someone who's passionate about technology to help us get more improvements out faster. _Check out a couple open source projects we're working on: [Packbot](http://www.karllhughes.com/2015/writing-a-slackbot-to-help-our-business-access-data-at-packback/), [Textbook Price Collector](http://www.karllhughes.com/2015/packback-used-textbook-prices/) [Read more about this position and find out how to apply here.](https://github.com/packbackbooks/hiring/blob/master/back-end-engineer.md)_","createdAt":{"$$date":1442397623000},"updatedAt":{"$$date":1493384775848},"imageUrl":"https://i.imgur.com/swwVNwn.png","postUrl":"http://www.karllhughes.com/?p=793","type":"blog","tags":[{"_id":"packback"},{"_id":"hiring"}]}
{"_id":"hiring-learning","title":"What I Learned During My Latest Round of Hiring ","content":"I spent about half my time in January hiring our second software engineer at The Graide Network. Hiring developers is tough, especially at a startup where we don't have the dedicated sourcing resources or internal employee network that some larger companies do. I've been in this position before and [I felt pretty confident in my process](https://www.karllhughes.com/posts/rethinking-hiring), but it still took me 80 candidates, 50 phone interviews, 11 in-person technical assessments, and 6 final team interviews to find the right person.\r\n\r\nHere are a few things I learned (or was reminded of) when it comes to hiring:\r\n\r\n### For Employers\r\n\r\n- **Don't take interviews just because a candidate came recommended or \"seems eager\".** Once you have a minimum list of technical requirements, stick to it. I wasted too much time on the phone with candidates who I should have known wouldn't be a good technical fit based on their resumes.\r\n\r\n- **Don't invite a candidate to next phase if there are doubts...unless** you need to calibrate the rest of your team. I read Brian Christian's [_Algorithms to Live By_](http://amzn.to/2BrrsRE) last year, and one thing that stuck with me was the [optimal stopping algorithm](http://www.broyhillasset.com/2017/09/11/algorithms-live-part-2-optimal-stopping/). It dictates that after you've spent 37% of your allotted time seeing candidates, you should be ready to immediately send an offer to the next qualified candidate. In order for the rest of the team to get a sampling of the people coming through, I intentionally pushed a couple candidates who were on the border through to interview with them. I knew that I probably wouldn't select them, but that I had to give my team some candidates to compare.\r\n\r\n- **Follow up, tell seekers why they weren't selected.** I don't understand why most employers don't at least send a quick, \"We didn't select you\" email after an interview. Even if you don't want to get into details for legal reasons, you could at least say _something_ as a courtesy to the candidate.\r\n\r\n- **Don't burn bridges.** Which leads me to the last point: today's rejected candidates are tomorrow's best leads for hiring. One of the [hardest things a CTO must do](https://www.karllhughes.com/posts/roles-of-startup-cto) is hire, and they'll be doing it often (assuming the company does well). I know that some candidates will be hurt by being rejected no matter what I do, but the last thing I want is to develop a reputation as a bad boss. The tech world is not as big as you might think.\r\n\r\nI also noticed some things that job seekers - even highly qualified professional engineers - don't do well. It's surprising due to the plethora of job-hunting advice out there, but it seems as if some things still haven't sunk in:\r\n\r\n### Job seekers\r\n\r\n- **Don't tell your new prospective employer every idea you have for upending and improving their business.** While I'm not crazy about [ideas without action](https://www.karllhughes.com/posts/everybodys-got-an-idea-ideas-suck-action-doesnt), I think it's great when engineers can come in and improve the business. That said, don't send me an email telling me how I should convert our whole stack to a block-chain based ledger to address a problem we don't have after our first interview (yes, that really did happen). It's fine to talk about ways that you've solved problems in the past if it's relevant to the job at hand, but hold back a little bit until you know more of the context.\r\n\r\n- **Prepare for every interview.** The most impressive candidates I interviewed did their homework. They came in having researched our company (which is no small feat considering how small we are), they actually spent time looking at the technical challenge before coming in, and they arrived on time. I realize that as developers we get a lot of leeway in our day-to-day working environment, but at least put your best foot forward during the interview process.\r\n\r\n- **Take each interview as a learning opportunity.** If you read my points for employers above, you might be annoyed that I might send candidates through the process even if I don't intend to make them an offer, but each interview is a chance to learn. Interviewing - like any skill - is something you can learn to be better at, so don't waste an opportunity to practice.\r\n\r\n- **Follow up.** Only about 10% of candidates I interviewed sent some kind of follow up email before I sent one to them. It's almost too easy to make a good impression and stay fresh in an employer's mind; just follow up.\r\n\r\n- **Check with each of your references before using them.** I think many candidates misunderstand the goal of references. As an employer, I'm not just checking that you worked at a place; I'm asking questions about _how_ you worked and what motivated you. Your references should all be able to vouch for you and only speak highly of you, so check with them before you include them.\r\n\r\n- **Don't burn bridges.** Your career is long, and hiring managers move around just like candidates do. Never leave a job interview on a negative note if you can help it because you might run into the same employer again (or more likely, someone they know).\r\n\r\nHave your own tips for hiring or being hired? I'm always up for a good job-hunting conversation, so [follow up on Twitter](https://twitter.com/karllhughes).","type":"blog","imageUrl":"https://i.imgur.com/tOJbssu.jpg","postUrl":"","tags":[{"_id":"hiring"},{"_id":"interviews"}],"createdAt":{"$$date":1518555024207},"updatedAt":{"$$date":1518555024207}}
{"_id":"hiring-process","title":"Our Hiring Process at Packback","content":"_Note: I've since left Packback and [updated my hiring process](https://www.karllhughes.com/posts/rethinking-hiring). You can learn more about [Packback's current hiring process for engineers on Github](https://github.com/packbackbooks/careers-at-packback)._\r\n\r\n[When I took over as Packback's Head of Engineering earlier in 2015](http://www.karllhughes.com/2015/packback-engineering/), I already had a team of three full-time engineers and a great intern who had started just after I did. When the time came for me to do some of my own hiring, I had to quickly adopt a process for finding and onboarding people. I started with the framework my predecessor used, and brought in some heavy influences from _[Peopleware](http://www.karllhughes.com/2015/peopleware/)_ and Josh Tyler's _[Building Great Software Engineering Teams](http://amzn.to/1XQAfT7)_ book. \r\n\r\nIt's still a work in progress, but here is the structure we use for hiring engineers at Packback:\r\n\r\n### 1. Job Listings\r\n\r\nThere are a few things that I think are important in a job listing: First, a good job listing should outline specifics about the tools and languages a candidate is expected to know. I like to include specific projects the candidate will be working on when I can, and as much information about day-to-day expectations as is reasonable for a concise job listing. Second, it should be explicit about the values and mission of your company. I know that most candidates gloss these over and most employers include them out of a sense of obligation rather than belief, but I still think it's important. Great candidates will embody your values, and if they paid attention that might even come up in their interview. Finally, a good job listing should include something interesting or unique. Competition for the best technical candidates is fierce right now, so telling them why they should work at Packback and not the company down the street is really important.\r\n\r\n### 2. Phone Screening\r\n\r\nLike most employers, we do a few rounds of interviews that go from low commitment (phone call) to high commitment (2-3 hours with our founders in the office). The first step is a phone screening where I'll try to get a feel for the candidate's resume, skill-set, and interests. I'll also use this time to sell Packback even more and hopefully get them excited about the rest of the process. At each step I try to get a sense of what it will be like working with this candidate: will they show up to work when I need them to? Are they committed to education and learning? Do they like to try new things?\r\n\r\n### 3. Technical Assessment\r\n\r\nJust because you can talk the talk doesn't mean you can walk the walk. Our technical assessment comes in two parts: First, the candidate will get a coding exercise where they are given 3-5 days to complete a project very like something they would do their first week in the office. From this code sample, we can get an idea of the candidate's attention to detail and their ability to \"fill in the blanks\" when a spec is incomplete. We're also looking to see if the candidate asks questions and documents their process. If the candidate submits a strong exercise, we'll invite them in for an in-person technical interview. This is where we dig in and see how much they really knew versus the amount that they were able to find on Google or StackOverflow. The questions vary, but usually they're about half discussion and half writing code.\r\n\r\n### 4. Team Introductions\r\n\r\nCandidates that pass our initial phone screening and both parts of the technical assessment will move on to meet the rest of the engineering team one-on-one. This is the chance for the rest of the engineers to see if they think they'd like working with the candidate as well as ask any of their own specific technical questions. After our whole engineering team has met the candidate and we unanimously agree that we want to work with them, we'll make a final recommendation to the founders. We're still small enough that every candidate who comes through Packback's hiring process gets a one-on-one with each of our three cofounders. Usually they are making sure that the candidate will fit with our [values and culture](https://github.com/packbackbooks/hiring/blob/master/README.md#our-values), but they also try to gauge how enthusiastic the candidate is about working at Packback. If they all agree that the candidate would be a good fit, we'll move forward with an offer as soon as possible.\r\n\r\n### 5. Onboarding\r\n\r\nAs we make an offer and finalize compensation, the process of onboarding has already begun. I'll try to have a meeting with the candidate to lay out expectations for their first few weeks, and do a planning session to help them get up to speed on their first project. From there, onboarding depends quite a bit based on the new hire's experience level; we'll take turns pairing on projects, give them access to more documentation, and bring them into our sprint process.\r\n\r\nHave any tips for me about hiring? What do you do differently at your organization? [Let me hear your thoughts on Twitter](http://twitter.com/karllhughes).","createdAt":{"$$date":1449731566000},"updatedAt":{"$$date":1514516415707},"imageUrl":"https://i.imgur.com/vlm3X9C.jpg","postUrl":"http://www.karllhughes.com/?p=831","type":"blog","tags":[{"_id":"hiring"}]}
{"_id":"how-do-you-gauge-your-happiness","title":"How Do You Gauge Your Happiness?","content":"*When I wrote this back in December, 2012 I had a lot less money than I do now. I lived on the floor of a 300 square foot apartment, and didn't even have a savings account. That said, I was pretty darn happy. I loved going to work every day and that positive attitude is what set me up for much greater financial success later.*\r\n\r\n*When you're happy and well-adjusted, you make better decisions and you're more open to opportunities which later lead to more money. For more on that chain of events, check out [The Luck Factor by Richard Wiseman](http://amzn.to/2mCKHgs).*\r\n\r\n-----\r\n\r\nOne of the funniest things I've noticed in our society is the disconnect between happiness and material wealth. The common myth states that by making more money, one can become happier. By making more money, one won't worry about physical health. By making more money, one will be able to buy the things he wants. By making more money, one's fears will simply melt away. \r\n\r\n## That's a Lie, and Even Though We Know It, We Ignore It\r\n\r\nModern society tells us that money = happiness. \"I'd be happy if I were as rich as Paris Hilton,\" or \"I'd be happy if I had Anthony Bourdain's job,\" or \"I'd be happy if I were as successful as Warren Buffet,\" are some of the most common excuses I hear from those who sulk to their job every day, casually looking for an excuse to get out.\r\n\r\nI've got news though; none of those pursuits will make you happy alone. Anyone who's done 10 minutes of research on what makes people _truly_ happy, will find that money [doesn't make a bit of difference](http://www.getrichslowly.org/blog/2010/09/16/how-much-is-enough-on-average-about-75000-per-year/). Once your basic needs are met, any excess income goes towards a shallow desire to accumulate more _stuff_. \r\n\r\nThis is the first step in a never-ending treadmill of mediocrity. Great people didn't achieve greatness purely because they sought a higher salary; they [pursued something that they _loved_ to do](/posts/pursue-your-passion-period). In other words, even if you had more stuff than every other person in the world, you still might not be happy, and let's be honest, how unrealistic is it that you will become the wealthiest person in the world?\r\n\r\n## Pursue What You Love; Pursue Happiness\r\n\r\nPeople across the world inadvertently live lives full of happiness without ever thinking about the kinds of material wealth that we have in America. Look at the [happiest countries in the world](http://travel.yahoo.com/p-interests-27761674), and you'll see that the people are making a solid living, but they also don't attribute their satisfaction to a need for more wealth. In fact, the richest in most of those countries give much of their money up in taxes to help others in their community. The truth is that people with the time to balance the work they _have_ to do with the things they _want_ to do are the happiest. \r\n\r\nPursue a field or way of life that allows you to meet your minimum basic needs for survival while doing something that you are truly passionate about. Going for the highest paying job in the best market with the best training will keep you on the treadmill of \"what's next?\" but making your life revolve around your passion will allow you a chance to _really_ thrive.","createdAt":{"$$date":1488175240000},"updatedAt":{"$$date":1488205428452},"imageUrl":"https://i.imgur.com/dODnJh4.jpg","postUrl":"http://karllhughes.com/?p=328","type":"blog","tags":[{"_id":"happiness"},{"_id":"success"},{"_id":"money"}]}
{"_id":"how-startups-know-when-theyve-got-the-technology-right","title":"How Startups Know When They've Got the Technology Right","content":"*I wrote this post back in September of 2012. I had just started my first full-time job at a startup in Chicago, and I was naively and desperately trying to build a product that would change the college new industry.*\r\n\r\n*It's fun to sit back and read some of these posts from 4-5 years ago because I hear versions of myself in young founders and engineers who I speak to today. I don't stand by my work habits or measure of productivity (5000 lines of code is a stupid way to prove you've been doing something and working 60+ hours per week is unsustainable), but I don't disagree with my thesis statement:*\r\n\r\n_You know you have the technology right when you stop working and the technology keeps getting results._\r\n\r\n-----\r\n\r\nRunning a startup tech company usually involves taking a lot of (hopefully calculated) risks, and doing a lot of work without any immediate sign of progress. That's just the way it is. There's a reason most technology companies fail; it isn't an easy business.  After a month working full time with [Uloop](http://uloop.com), I've written somewhere around 5000 lines of (at least decent) code, and have yet to see big results from my work. \r\n\r\nNow, I'll admit, the product I'm developing isn't finished, but logging 60-80 hour weeks without seeing a significant change in my metrics for success is a bit unnerving. Still, the small voice in the back of my head keeps telling me, \"you'll know when you've got it right.\"\r\n\r\nThe whole point of building software or researching a new technology is that in the end, the product will do more work than you could have done in the same period of time. Sometimes, the payoff is quick, and sometimes it takes a long time. Either way, there's a simple way to know how you're doing: _You know you have the technology right when you stop working and the technology keeps getting results._\r\n\r\n## So what do I do until I get there?\r\n\r\nI believe that the key for any technology company is to _keep innovating_. The moment innovation stops is the moment that you die. Big companies don't innovate; they buy innovation by buying out smaller companies. The thing that sets a startup apart is their continued risk-taking on technology.\r\n\r\nA comfortable startup is a dying startup (or maybe one that just got sold). Entrepreneurs must be adaptable, but sometimes, they have to be thick-skulled. Just as Thomas Edison's light bulb wasn't successfully created on the first go around, it's unlikely that your tech-based company will get it right first time around. Regardless of which specific course your company takes, the key is always to keep an eye on the technology. You know it's right when it keeps working long after you've shut your laptop.","createdAt":{"$$date":1487484243000},"updatedAt":{"$$date":1487537531813},"imageUrl":"","postUrl":"http://karllhughes.com/?p=243","type":"blog","tags":[{"_id":"startups"},{"_id":"technology"},{"_id":"product-development"}]}
{"_id":"hyper-sh-weekend","title":"My First Weekend with Hyper.sh","content":"I've been doing a lot of searching for a simple Docker hosting experience lately.\r\n\r\nI'm pretty committed to [Docker Compose](https://docs.docker.com/compose/) for running containers locally and  [Codeship for my continuous integration](https://blog.codeship.com/author/karlhughes/), but I hadn't found a container hosting service that was (1) simple enough for me to use on side projects, (2) reliable enough to use in production, and (3) not prohibitively expensive.\r\n\r\nMy goal this weekend was to get a couple side projects up and running on [Hyper.sh](https://hyper.sh/), and here's how it went.\r\n\r\n## About the projects\r\n\r\nBoth the projects I wanted to deploy this weekend were NodeJS apps: [my personal blog](https://github.com/karllhughes/personal-blog), and a microservice that [emails me the latest articles](https://github.com/karllhughes/feedbin-mailer) from [Feedbin](https://feedbin.com/) every day.\r\n\r\nCurrently, both projects were set up on a Digital Ocean droplet and running with Docker Compose. That meant that I had to write a lot of scripts to automate deployments, and it was honestly a huge pain point. I've found that for side projects if I don't automate the minor stuff (deployments, CI, etc.) I probably won't update them very often. Digital Ocean droplets are great, but each one cost me at least $10 (the $5 ones couldn't build my Docker images reliably), and running multiple side projects on each was problematic. If one went down or had a memory leak, it would take other ones down with it. Another option I've used in the past is Heroku, which I also like, but I don't know about its support for Docker. If anyone's tried that I'd be willing to hear about it.\r\n\r\nSince my semi-automated process hosting on Digital Ocean wasn't working well for these two apps, I decided to find an alternative.\r\n\r\n## What is Hyper.sh?\r\n\r\nI read about [Hyper.sh](https://hyper.sh/) on [HackerNews](https://news.ycombinator.com/item?id=12891584) a while back. I liked the idea of container-first infrastructure, and I first got an MVP of my personal blog running on their containers back in February. I didn't migrate then though as I hadn't figured out how to move data around, so when I sat down this weekend, I realized that it would actually work pretty well for my workflow.\r\n\r\n### My Hyper.sh workflow\r\n\r\nSo here's how I'm using Hyper.sh for both of the projects mentioned above:\r\n\r\nFor [my personal blog](https://github.com/karllhughes/personal-blog), I downloaded my blog's data (it's using json files and [NEDB](https://github.com/louischatriot/nedb)) from its current server and created a [Hyper.sh Volume](https://docs.hyper.sh/Feature/storage/volume.html). I then attached it to a container that runs the NodeJS process using a [Hyper Compose file](https://github.com/karllhughes/personal-blog/blob/master/docker/compose.hyper.yml). Then I attached the container to a [Hyper.sh FIP](https://docs.hyper.sh/Feature/network/fip.html) which I mask using CloudFlare for DNS.\r\n\r\nNow when you go to www.karllhughes.com you're getting served a Node app running on a 512MB Hyper.sh container which costs a fraction of what my DigitalOcean container did. It's also easier to manage. When I update code and push it, Codeship builds the image, pushes it to Docker Hub, then uses a Hyper.sh CLI container to [pull and recreate the container](https://github.com/karllhughes/personal-blog/blob/master/docker/deploy.hyper.sh).\r\n\r\nThe [feedbin-mailer](https://github.com/karllhughes/feedbin-mailer) project is even easier since it doesn't need a webserver. When I update code, I again use the Hyper.sh CLI container to [update the image](https://github.com/karllhughes/feedbin-mailer/blob/master/docker/deploy.hyper.sh), then I set up a [Hyper.sh Cron job](https://docs.hyper.sh/Feature/container/cron.html) to automatically run the script every morning.\r\n\r\n![](https://i.imgur.com/Z7EMKqw.png)\r\n\r\n### What I like\r\n\r\n- **UI** It's nice to see what's running and when it was last updated without typing a bunch of stuff into the CLI, although their CLI is pretty nice too. The `--help` flag works for every command I've used.\r\n- **Documentation** Almost every question I've had has been answered by a closer read of the documentation.\r\n- **Pricing** I agree with [Hyper.sh's pricing page](https://hyper.sh/pricing.html), it is a crime to pay just to power on an instance. For most of my side projects, using a whole server just to host a few hundred visitors per month (or simply run a Node script every day) is very wasteful.\r\n- **Support** Finally, the team at Hyper.sh has been pretty responsive considering I think there are just [four of them](https://www.linkedin.com/search/results/index/?keywords=hyper.sh&origin=GLOBAL_SEARCH_HEADER). They've always pointed me in the right direction for documentation I've missed and usually gotten back to my posts on [the forum](https://forum.hyper.sh/).\r\n\r\n### What Hyper.sh could improve\r\n\r\n- **More community engagement** The forum is there, but there are just a few people posting on it. If they've got users, maybe a little time spent on marketing to them or rewarding active participants would be well spent. I'm sure there are people out there who have tread the same problems I faced while setting up Hyper.sh.\r\n- **More examples and use-cases** One thing that larger hosting companies do well (Digital Ocean being probably the best) is provide clear, step-by-step tutorials for lots of use cases. I'd start by documenting tutorials for using Hyper.sh to host 5 or 10 of their most popular stacks. If anyone at Hyper.sh is listening, I'd be happy to contribute, just [reach out](https://twitter.com/KarlLHughes).\r\n- **Dealing with volumes** Finally, I did find some operations with volumes to be a little less intuitive than I had hoped.\r\n  - First, there's not an easy way to download or back up a volume's contents to my machine. My plan is to write a Docker container to do this via S3 or something, but something like `hyper volume download <VOLUME NAME>` would be amazing.\r\n  - Second, there isn't a way to disconnect a volume from a container and then reconnect it to another without taking the container down. I was hoping to do this for my deployment process.\r\n  - Third, using volumes in multiple containers is a pain. You have to set up a shared volume container which then uses NFS to allow each container to attach to it. I am not enough of a Docker expert to propose a better solution, but I'm hoping they come up with something.\r\n\r\nWhile I still have some testing to do before I recommend Hyper.sh for my work projects (I always like to give things a few months of side project testing before I bring them into the office), I'm happy to have found a Docker hosting solution like [Hyper.sh](https://hyper.sh/).","type":"blog","imageUrl":"https://i.imgur.com/acG2EO7.png","postUrl":"","tags":[{"_id":"programming"},{"_id":"devops"},{"_id":"docker"}],"createdAt":{"$$date":1494116286394},"updatedAt":{"$$date":1494116286394}}
{"_id":"incremental-development-codeship","title":"Incremental Software Development with PHP Microservices","content":"Building complex software projects is almost always an iterative process. We rarely get to spend months designing and writing a complete project before releasing something to our users. This process of incremental software development can be accomplished in many ways, but one of my favorite strategies has been through microservices.\r\n\r\nThis post was written for the Codeship Blog, and is based on a talk I gave at Refactor::Chicago a month ago.","type":"link","imageUrl":"https://1npo9l3lml0zvr6w62acc3t1-wpengine.netdna-ssl.com/wp-content/uploads/2017/02/xgsYmpW.png","postUrl":"https://blog.codeship.com/incremental-software-development-with-php-microservices/","tags":[{"_id":"php"},{"_id":"programming"},{"_id":"microservices"},{"_id":"codeship"}],"createdAt":{"$$date":1487179348010},"updatedAt":{"$$date":1487179348010}}
{"_id":"indie-hackers-marketing-checklist","title":"Don't Think About Marketing","content":"I've been spending a little time every week promoting the [Side Project Marketing Checklist](https://www.sideprojectchecklist.com/) I wrote a few weeks ago - mostly by posting answers to questions on Quora, forums, and Slack channels. This week I decided to publish a longer post about the project on [Indie Hackers](https://www.indiehackers.com/).\r\n\r\nIndie Hackers is one of my favorite blogs to hit my radar this year. The blog's founder, Courtland, interviews founders who have software products or small businesses that they self-funded. It's inspiring, but also extremely insightful and one of the biggest reasons I got around to creating the Side Project Marketing Checklist.\r\n\r\nCheck out the post linked below, and as always, [let me know what you think on Twitter](https://twitter.com/karllhughes).","type":"link","imageUrl":"https://i.imgur.com/a3X93KR.png","postUrl":"https://www.indiehackers.com/@karlhughes/dont-think-about-marketing-your-side-project-445c413521","tags":[{"_id":"marketing"},{"_id":"side-projects"}],"createdAt":{"$$date":1507321717124},"updatedAt":{"$$date":1507321744216}}
{"_id":"innovation-small-organizations","title":"Inviting Innovation in Small Organizations","content":"*When I first published this post in October, 2014 all of us on the leadership team at Packback were new at management. We sort of took our own approach to employee engagement, and Innovation Day was one of those approaches.*\r\n\r\n*Looking back, I'm not sure if innovation day was the best way for our employees to spend their time at a ten person company, but it is interesting to see that even back then I was thinking about creating a company culture of creativity and inclusion. I may have to get back into that as I think I've gotten more focused (for better or worse) as I've gotten more experienced.*\r\n\r\n-----\r\n\r\nWhen I joined [Packback](http://www.packback.co) a year ago pretty much all we did was innovate. There were only four of us then, and we had very little in the way of established process. Most of our meetings were more like open brainstorming sessions than times to actually get things done.\r\n\r\nThat may sound like chaos to you, but I've always liked that part of working at a startup. As our organization has matured a bit (we've grown to around ten full-time employees) things have started to become more structured, especially in the engineering department. We're still small, but we act a lot more like a \"real\" company - planning projects weeks in advance, determining key metrics before data collection begins, and planning for future hiring and growth. It's exciting, but holding onto that innovative spirit we had when I first started has gotten a little bit tough.\r\n\r\n## But we've remained intentional about inviting innovation\r\n\r\nOur founders [Mike](https://www.linkedin.com/pub/mike-shannon/29/917/701) and [Kasey](https://www.linkedin.com/in/kaseygandham) have always said that they look at Packback's early employees as entrepreneurs in their own right. In my experience, the best employees at _any_ organization have an entrepreneurial attitude that causes them to take action, solve problems, and work independently, so our approach to encouraging innovation as we've grown has been intentional. Here are three things that I think have been key to Packback keeping an innovative culture as we've grown: \r\n\r\n### 1. We make time for innovation\r\n\r\nAs we went from 4 to 6 to 8 employees, we came up with a program called Innovation Day. Every month, we invite two of our employees to present an idea to the rest of the company, interns, and brand ambassadors. After the presentation, we leave time for discussion about the idea and more brainstorming questions to get everyone thinking creatively. Topics for presentations have ranged from a music classification app to a better drink distribution system in bars. It's awesome to see what problems our employees are thinking about and their creative solutions to these problems. \r\n\r\n### 2. Feedback is encouraged\r\n\r\nDuring these presentations, we hear ideas that are usually unrelated to Packback or textbooks or even college. Since it doesn't relate directly to anyone's work, it's easy to pass feedback around the room, offer tips for improving the presentation, and ask follow-up questions without ruffling any feathers. Employees with experience giving presentations are more likely to speak up and present their work related ideas as well.\r\n\r\n### 3. Cross-functional, non-traditional teams\r\n\r\nFinally, we have tried to make Innovation Day an opportunity for employees working in totally different areas of our business to work together. Pairs are set that may include a marketing intern and an engineer or a designer and operations manager. By putting team members who don't normally work together in close proximity, we are building relationships and encouraging the spread of ideas long after Innovation Day is over.\r\n\r\nHave experience with innovation in small organizations? What do you do to help encourage new ideas when there are a limited number of brains in your office? Let me hear from you in the comments below.\r\n\r\n_Photo by [Emilio Garcia](https://www.flickr.com/photos/lapolab/ \"Go to Emilio Garcia's photostream\") on flickr.com_","createdAt":{"$$date":1491660022000},"updatedAt":{"$$date":1491684491371},"imageUrl":"https://i.imgur.com/D30N5AY.jpg","postUrl":"http://www.karllhughes.com/?p=620","type":"blog","tags":[{"_id":"packback"},{"_id":"innovation"},{"_id":"startups"}]}
{"_id":"internet-killing-good-business-models","title":"Where Have All the Business Models Gone? Did the Internet Kill the Need for One?","content":"*When I wrote this article in April of 2012, Instagram had just been bought by Facebook. The hype around consumer web was at its peak since the dot com crash of 2000, and like a lot of people I was sick of it.*\r\n\r\n*With [Snapchat's IPO](http://www.usatoday.com/story/tech/talkingtech/2017/02/09/snap-ipo-test-its-millennial-users-they-bite/97463950/) coming soon, this still feels relevant. Fortunately, much of the online business world has caught on, and I hear a lot less hype around consumer web and apps. I have a feeling SaaS is the next bubble in tech, but at least much of that seems to have tangible revenue streams behind it.*\r\n\r\n-----\r\n\r\nI made the mistake once of telling people that I can build websites.\r\n\r\nEver since it became public knowledge that I can write code, I get 3 offers per week from \"idea guys\" to build websites for their imaginary company that's going to kill Facebook, Amazon, or some equally outrageous claim. \r\n\r\nNow, I like big dreamers. I'm certainly a dreamer at times, so these \"idea guys\" aren't all bad. The simple problem is that most of them **DON'T HAVE A BUSINESS MODEL**.  When in the history of entrepreneurship did it make sense to create a product, get millions of users, and never make a dime? \r\n\r\nCall me old-school, but isn't that what entrepreneurs do? Make money? \r\n\r\n## Please, Have a Serious Model Before You Drag Others Into Your Scheme\r\n\r\nWould I have said \"yes\" to joining the Instagram team a year ago?  **Probably not.**\r\n\r\nIn hind sight, I would have kicked myself if they _had_ asked me, but at the same time, it wouldn't have made any sense to me. Now we know that Instagram's exit was in large part due to [previous connections with Facebook's investors](http://www.nytimes.com/2012/04/14/technology/instagram-founders-were-helped-by-bay-area-connections.html?pagewanted=all). They were built to sell; not built to make money, and you already know how I feel about Facebook's [long term success as a company](/posts/is-facebook-really-a-104-billion-company/).\r\n\r\nInstagram aside, it seems like every college kid and unemployed yuppie is working on a \"killer app\" or social network that has _no business model_ aside from getting millions of users and crossing their fingers for a big sale to another bloated web-based company.  When did this become entrepreneurship?\r\n\r\n## The Stark Reality\r\n\r\nThe truth is that unless you're backed by high-level VC connections in Silicon Valley, you have about a snowball's chance in hell of making the next Facebook. Does that mean you shouldn't try? No. It just means that you need to find a way to conquer a revenue-generating niche of the online market _first_.\r\n\r\nYou have to look at your startup as a lean, yet _sustainable_ business. What if no one buys your idea before you make a profit? Will you generate enough revenue to pay yourself or your employees? VC's aren't easy to get, so what if no one invests? Are you able to run this thing _super-lean_ if you have to?\r\n\r\nThe first question I ask these \"idea guys\" who try to court me is, \"where's your business model?\" Followed quickly by \"who is your customer?\"  Not surprisingly, most of them can't even answer those two fundamental business questions. \r\n\r\n## They Bought Into the Internet Hype Machine\r\n\r\nPopular media has glorified web entrepreneurs to the level of pop musicians. They tell you rockstar stories of guys like [Mark Zuckerberg](http://en.wikipedia.org/wiki/Mark_Zuckerberg), [Sean Parker](http://en.wikipedia.org/wiki/Sean_Parker), and now [Kevin Systrom](http://en.wikipedia.org/wiki/Kevin_Systrom), but they conveniently leave out the millions of entrepreneurs who went broke chasing their tails. They also leave out the hundreds of success stories from men and women who built strong, sustainable businesses online, but never quite made that \"rockstar\" status that the previous founders did.\r\n\r\nAs an entrepreneur, you can't buy into this idea that the Internet is an open sea of get-rich-quick schemes. In reality, it's not. It's an _extremely_ competitive environment, where millions of companies are vying for the same limited number of scrutinizing eye-balls. You have to look at a web-based business, the same way you would any tech-based business. The same questions apply:\r\n\r\n1.  Who is my customer?\r\n2.  Where is my target market?\r\n3.  How well defined is my product/service?\r\n4.  How many sales do I need to make in order to break even?\r\n5.  How can I scale this back and make a profitable company without outside investment?\r\n\r\n[And many more](http://www.sba.gov/content/20-questions-before-starting-business). \r\n\r\n## Conclusion: No, the Internet Did Not Kill the Need for a Business Model.\r\n\r\nDon't kid yourself.  Your business model is the #1 most important thing in your startup business.  It comes _before_ your technology, _before_ your marketing, and _before_ you will ever get an investor on board.  Please spend a little time thinking about it before you try to recruit talent.","createdAt":{"$$date":1486796400000},"updatedAt":{"$$date":1487029938793},"imageUrl":"https://i.imgur.com/HrZqhxr.jpg","postUrl":"http://karllhughes.com/?p=162","type":"blog","tags":[{"_id":"entrepreneurship"},{"_id":"social-media"},{"_id":"startups"}],"resetCreatedAt":"1"}
{"_id":"is-facebook-really-a-104-billion-company","title":"Is Facebook Really a $104 Billion Company?","content":"This week, Facebook underwent its [final valuation before their initial public offering of stock](http://thenextweb.com/insider/2012/03/31/final-facebook-auction-values-the-firm-at-104-billion/).  Facebook is making all sorts of history with its IPO, but the real question in my mind is \"how the hell is Facebook worth _$104 BILLION_?\" \r\n\r\n## 2011 By the Numbers\r\n- Revenue: $3.7 billion \r\n- Profit: $1 billion\r\n- Advertising Revenue: $3.1 billion\r\n- Monthly Users: [845 million](http://newsroom.fb.com/content/default.aspx?NewsAreaId=22)\r\n\r\n> What is interesting about the financial information revealed in the filing is that Facebook appears to make about the same per user as Zynga does. - [Joe Magyer](http://www.washingtonpost.com/business/technology/facebook-ipo-how-does-facebook-make-its-money/2012/02/01/gIQAL03yiQ_story.html)\r\n\r\nOkay, so clearly Facebook doesn't make enough money to be worth $100 billion.  IBM is worth around $100 billion too, and it's [profits for 2011 were around 14x higher than Facebook's](http://www.vabsite.com/2011/06/fortune-500-companies-list-rankings.html).  Why does Facebook have a valuation this high? \r\n\r\n## Untapped Potential\r\n\r\nFacebook's _real_ power is data.\r\n\r\nAt this point, I am willing to bet that the company has more data than its 3000+ employees have figured out what to do with. That means, they have lots of room for _new revenue streams_, some of which may not be possible without a huge injection of capital (eg: an IPO). \r\n\r\n## What _Could_ They Do?\r\n\r\nOne of the hot topics in startups today is _[big data](http://news.cnet.com/8301-11386_3-57379492-76/why-big-data-is-a-magnet-for-startups/)_.  Facebook is the epitome of big data for the consumer market. With the IPO, Facebook will get a $5 billion cash injection, allowing them some room for major acquisitions.  Which startups will they be looking to buy? Well, that's for us to find out, but _those acquisitions will make or break Facebook's future._ Let's think about some of the data Facebook has.\r\n\r\nThey know when you read and \"like\" any article on the internet. That can probably give them a good look at a consumer's political and economic position in life. They probably know at least a few of the things you own (or are likely to own) based on the things you tell it that you \"like\" or the devices you log into Facebook from.  _They could build the most comprehensive purchasing prediction algorithm ever._ What if they were able to predict exactly at what point in your life you were most likely to purchase things like textbooks, consumer electronics, etc. and place that product at your fingertips on their network? They already do some of this in their targeted advertising, but with new minds and more resources, I imagine that they will look to do _much more_ of it. \r\n\r\n## But Really, $104 Billion?\r\n\r\nWhile I think Facebook will find some new successful avenues for revenue, they have to be careful here. Users are fickle, and just because they have nearly 1 billion users now does not mean that user base will enjoy Facebook collecting and using _even more_ of their data. Building a platform like Facebook is not rocket science, so competitors could show up to give them a run for their money. Personally, I won't be investing in Facebook at this point.\r\n\r\nWhat do you think?","createdAt":"2012-03-31 15:37:39","updatedAt":{"$$date":1486511622528},"imageUrl":"https://i.imgur.com/WdM01PN.jpg","postUrl":"http://karllhughes.com/?p=123","type":"blog","tags":[{"_id":"facebook"},{"_id":"social-media"},{"_id":"ipo"}]}
{"_id":"job-board-api-1-release","title":"Job Board API Standardization","content":"*Since I published this post in 2015, we've done a lot of work on this job board API standardization project and rebranded it. Check out the latest at [JobApis.com](https://www.jobapis.com/)*\r\n\r\n-----\r\n\r\nA few weeks ago, I wrote about an idea I had to help developers gain access to the myriad job board API's out there. [That blog post](/posts/php-job-search-api-clients) generated some interest from my friend and former coworker, [Steven Maguire](https://github.com/stevenmaguire), and with his help, we got the project to a [stable version 1.0 release](https://github.com/jobapis/jobs-common/tree/1.0.0). \r\n\r\n## The goal of the project remains the same: to make accessing job board API's easier for PHP developers.\r\n\r\nSteven took on the majority of the work rebuilding the core package (jobs-common). He has done work with the PHP League on their [OAuth package](https://github.com/thephpleague/oauth2-client), which is somewhat similar in nature, so he brought some really good insight to this project. Finding a way to cleanly generalize the many different formats and API styles of the job boards is no small task, but Steven did a great job building an AbstractProvider class to pretty much give you an outline for building new providers. After he had the core package and the [Indeed provider](https://github.com/jobapis/jobs-indeed), I started putting together more provider packages and together we tackled new issues with the core package as they came up. Setting up new providers is now _much_ easier than it was in my first project.\r\n\r\nSome of the key technical features of our Jobs Common package (the core set of classes that each provider uses) are:\r\n\r\n*   [**Schema.org JobPosting Specification**](http://schema.org/JobPosting) - Data standardization is a huge part of this project. One job board API might call their listing title field \"job-title\" another might call it \"title\" and yet another \"name\". Schema.org has taken on the task of coming up with standard fields that projects like ours can use, so we've taken advantage of that.\r\n*   [**Guzzle 6**](http://guzzle.readthedocs.org/en/latest/) - In an effort to become compatible with the [newly created PSR-7 spec](http://www.php-fig.org/psr/psr-7/), we upgraded the HTTP client to [Guzzle 6](https://github.com/guzzle/guzzle/releases/tag/6.0.0). We aren't fully taking advantage of streams in large results lists yet, but it sets the project up for improvements in the future.\r\n*   **[Composer](https://getcomposer.org/) **- This was a requirement from the first iteration of the project. Composer allows you to easily include this package in your own PHP project. I'll be doing some walkthroughs on this blog later to show just how easy this is.\r\n\r\nWe also added some things to help ensure our tests and code quality stays high. Steven introduced most of these to the project as well, so I've got to pass a lot of the credit his way:\r\n\r\n*   **[Scrutinizer](https://scrutinizer-ci.com/)** - Assesses code quality, test coverage, and documentation.\r\n*   **[Travis CI](https://travis-ci.org/)** - Runs a complete build on different versions of PHP and makes sure there no errors.\r\n*   **[Versioning/changelog](https://github.com/JobBrander/jobs-common/blob/master/CHANGELOG.md)** - Obviously should have been done before, but I wasn't as diligent when working alone.\r\n*   **Unit test coverage** - I did some unit testing in my original version, but the coverage now is much better.","createdAt":{"$$date":1436380810000},"updatedAt":{"$$date":1493155398860},"imageUrl":"","postUrl":"http://www.karllhughes.com/?p=755","type":"blog","tags":[{"_id":"jobapis"},{"_id":"php"},{"_id":"open-source"}]}
{"_id":"job-board-api-clients-open-source","title":"15 Job Board API Clients Open Sourced","content":"For the past year and a half I've been improving and expanding [JobApis' library of open source job board API clients](https://www.jobapis.com/open-source/#Jobs-Common-API-Clients), and as of today 15 have been released. In doing this, I've learned a ton about [building well-documented open source projects](https://www.karllhughes.com/2016/php-open-source-checklist/), collaborating with other devs remotely, and I've forced myself to come up with ideas to use my own open source projects. The latest, [JobsToMail](https://www.karllhughes.com/2016/jobstomail/) just came out a few weeks ago and has already attracted [more interest on Github](https://github.com/jobapis/jobs-to-mail) than any of my other open source projects...not that that's saying much. More than anything though, this has been a really great learning process for me as a developer and architect. I've gotten to experiment with new things that wouldn't have been practical to explore at work, and it's made me more confident in putting my code out in the public than before. [Read more about the open job board API project at JobApis.com.](https://www.jobapis.com/) ![](https://i.imgur.com/0Q4Fw7Y.jpg)","createdAt":"2016-10-19 02:40:03","updatedAt":"2016-10-19 02:40:03","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=1032","type":"blog","tags":[{"_id":"jobapis"},{"_id":"open-source"}]}
{"_id":"job-board-api-clients-update","title":"Open Source Update: 13 Job Board API Clients","content":"As some of you may know, I've been working with [Steven Maguire](https://twitter.com/stevenmaguire) for the past year on a project to help [standardize the retrieval of data from various job boards](http://www.karllhughes.com/2015/job-board-api-1-release/). As of today, our little project supports **13 job board APIs**, and now I am finally using our open source project in production for JobBrander. We've also started work on a transformer class (mostly Steven so far) to help you turn the job objects our client returns into useful output like Eloquent Models or CSV files. **How I'm using the project for JobBrander** JobBrander provides two things:\n\n1.  Blog posts directed at entry level professionals\n2.  _Job listings aggregated from other sites_\n\nIt's that second one where the job board standardization project comes in. Our goal at JobBrander is to help entry level job seekers in any ways we can, so while writing blog posts is great, I think the automated aggregation of scattered job content has even more potential. Using the open source job board project we released earlier this year, we're aggregating over 3000 jobs from 11 of the providers **every day**. Now that we have a reliable way to bring jobs to our readers, we're going to begin aggregating more data including cost of living data for entry level job seekers considering a move, company research to help readers feel out the kinds of employers they want to work for, and better search functionality. There's still a long way to go before what we have is truly unique at JobBrander, but I'm excited about the start. **We're looking for more contributors and users** My hope is that others in the PHP community find a use for our job board api clients as well. Two contributors don't make a great open source project alone, but I think there are a ton of novel ways to use job board APIs. That's why we're really interested in getting more users and possibly contributors. So, if you need help getting started, [shoot me an email](mailto:khughes.me@gmail.com), [find me on Twitter](http://www.twitter.com/karllhughes), or just [get into Github and check out the readme](http://code.jobbrander.com/).","createdAt":"2015-12-03 11:43:46","updatedAt":"2015-12-03 11:43:46","imageUrl":"","postUrl":"http://www.karllhughes.com/?p=826","type":"blog"}
{"_id":"jobs-common-2-0","title":"Version 2.0 of Jobs Common Released","content":"For the past year or so I’ve been meaning to invest the time in a version 2 of the [Jobs Common](https://github.com/jobapis/jobs-common) package, and I finally got around to releasing it last weekend. The goal of Jobs Common is to create a standardized interface for retrieving jobs from job board APIs. Basically, it allows you to get a known response no matter what job board you query. It's an open source project that I've been working on for the past few years (on-and-off), and this iteration is the latest item in a series of improvements I'm making to the whole JobApis (formerly JobBrander) organization on Github. [Read more on JobApis.com](http://www.jobapis.com/2016/09/03/jobs-common-v2-release/). ![](https://i.imgur.com/qLSgvU7.png)","createdAt":"2016-09-06 16:50:00","updatedAt":"2016-09-06 16:50:00","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=928","type":"blog"}
{"_id":"jobstomail","title":"JobsToMail: Your Personal Job-Search Assistant","content":"If you've looked for a job in the past few years, you probably know how much time trolling job boards can take out of your life. In fact, I'd argue that getting out and meeting people is a much more effective strategy than checking job boards at all, but it doesn't hurt to know who's posting jobs if you're in the market.\r\n\r\nAnother thing I've noticed lately is that I don't want to check 100 different sites every day for information. For example, [I subscribe to about 300 engineering blogs](http://feedly.com/jobbrander/Engineering%20Blogs), but there's no way I want to go check every one of those websites every day. I use a Feedly collection and IFTTT to email myself a daily summary of all the new articles posted, and this works really well for keeping me informed with a minimal amount of effort.\r\n\r\n### Job board search as a service\r\n\r\nMy system for keeping up with engineering blogs got me thinking: what if I could help job seekers keep up with dozens of job boards by sending them a single simple email every day?\r\n\r\nI've been maintaining the [JobApis project](https://www.jobapis.com/) (formerly JobBrander) for a few years now, so I've gathered a lot of knowledge and created many open source clients for job boards. A job board to email project would be a great way to combine my knowledge with something that might actually be useful. So I released [JobsToMail](https://www.jobstomail.com/) as an [open source project](https://github.com/jobapis/jobs-to-mail) and free service this weekend.\r\n\r\n### How JobsToMail Works\r\n\r\nThe goal of JobsToMail is to create a personal assistant for job seekers. People looking for jobs should be out there meeting people, doing interviews, coffee chats, etc, and not spending all day trolling job boards. JobsToMail saves you time by looking for new jobs every day on several major job boards and then sending the results to you in a single email. Under the hood I'm using the [Jobs Common](https://github.com/jobapis/jobs-common) and [Jobs Multi](https://github.com/jobapis/jobs-multi) projects to interface with 13 job board APIs with plans to support many more in the future.\r\n\r\nIf you want to get even more technical, read on...\r\n\r\n### Collecting and emailing jobs\r\n\r\nThe signup process is a very simple form submit where the user submits their email, search term, and location. This triggers an email to the user with a confirmation link. Once clicked, that link will \"confirm\" the user's email and the user will start to receive an email every day.\r\n\r\nI'm currently hosting the project on [Heroku](https://www.heroku.com/) and using their [Postgres](https://www.heroku.com/postgres) and [Scheduler](https://elements.heroku.com/addons/scheduler) add-ons to handle the database, queuing, and cron jobs. The reason I went with Heroku was for [ease of setup and deployment](https://www.karllhughes.com/posts/continuous-integration). I'd like people who want to host their own version of the project to be able to easily setup the application, and Heroku is one of the easiest ways to deploy an application as a single developer.\r\n\r\nHeroku Scheduler kicks off an artisan command (I'm using [Laravel 5.3](https://laravel.com/docs/5.3/) and PHP 7.1 for the project) which in turn queues up a job for each user in the system to collect and email them jobs. With a small userbase, iterating through all users is not a problem, but I may have to make this more robust if I get a lot of signups someday.\r\n\r\nEach job is processed asynchronously by Laravel's job/event handler system, which is one of the handiest features in the framework. Each job goes to each job board and gets a collection of jobs then all the collections are sorted and an email is queued up for the user. This part takes several seconds, but if it hangs for any reason, jobs are retried a few times before being thrown into a \"failed_jobs\" table.\r\n\r\nFinally, I'm using Laravel's new Notification feature to send an email to the user who requested it. In production I'm relying on Sendgrid to send the emails as Heroku doesn't support SMTP or PHP's mail function. Finally, each email that is sent includes an unsubscribe link that is unique to each user. When visited, the unsubscribe URL immediately removes the user from our distribution list so they will no longer receive emails for that search.\r\n\r\n### Where is JobsToMail going next?\r\n\r\nLong-term, my goal is to continue making JobsToMail a more valuable service to job seekers and hopefully a more accessible project to future open source contributors. There are also a lot of \"obvious\" features that I chose to left out in the interest of keeping the MVP lean, but hopefully users will give me some feedback for where to take the project next.\r\n\r\nSo, if you're interested in trying it out, go to [www.jobstomail.com](https://www.jobstomail.com/) and don't forget to submit your ideas for improving the project on [Github](https://github.com/jobapis/jobs-to-mail) or to me directly on [Twitter](https://twitter.com/KarlLHughes).","createdAt":{"$$date":1474902835000},"updatedAt":{"$$date":1505262296504},"imageUrl":"https://i.imgur.com/zfPuNVD.png","postUrl":"","type":"project","tags":[{"_id":"jobapis"},{"_id":"php"},{"_id":"open-source"}]}
{"_id":"joining-the-graide-network","title":"New Role at The Graide Network","content":"After over 2 and a half years at [Packback](https://www.packback.co/), I've decided to move on and have accepted the first engineer/CTO role at [The Graide Network](http://www.thegraidenetwork.com/). [When I joined Packback](https://www.karllhughes.com/2013/on-leaving-uloop-for-packback-books/) I wasn't sure what I wanted to do. During my time with the company I went from the team's only in-house engineer to the manager of a small team. It was amazingly fun, and while I hadn't been actively seeking another job, when the opportunity to do what we did at Packback again came up at The Graide Network, I knew I would be a great fit. Here's a little more information about the company and my role:\n\n### What is The Graide Network?\n\n[The Graide Network](http://www.thegraidenetwork.com/) connects middle and high school teachers with qualified teaching assistants to grade and provide feedback on student work. What that means is that teachers upload their students' assignments then we find college students who can grade their papers remotely and get them back to the teacher. My life is full of great teachers who I know first hand are overworked. My mom, a couple of my cousins, my girlfriend's brother and mother are all teachers, so an opportunity to help make their lives better through technology appeals to me. On the flip side, the college students we get to grade papers are mostly studying to be teachers, so we're offering them real-world experience as well.\n\n### What I'll be doing\n\nWhen I joined Packback I had no idea how to fix a messy MVP. I didn't know how to work with an offshore team, and I definitely didn't know much about building an in-house engineering team; I had no idea how to create an effective product management process. My time at Packback helped me develop tools and processes for many of the technical problems early stage startups face. At The Graide Network, I'll be implementing those tools, and helping prepare the company for growth in the future. Of course, there will be plenty of exciting new features to implement, but the reality is that we're a company that needs to build a single great feature set before we branch out too far. In the first few weeks I'll be taking a look at our current web application's architecture, security, and scalability in order to figure out what we need for a successful fall semester. Unlike at Packback I won't have a team yet. We do have a solid local freelance engineer working with us already, so I won't have to build everything alone. Still, [much less of my day-to-day will be management](https://www.karllhughes.com/2016/engineering-manager/). In other words, I'll be doing a bit of planning and a lot of writing code.\n\n### What's next for The Graide Network?\n\nOur imminent goal is to clean up the product for a new round of teachers and Graiders who will start in September. Last year the team (mostly just the founders, Blair Pircon and Liz Nell) worked with a small number of teachers and at times had to grade papers themselves manually. This fall, we're looking at a healthy pipeline of possibly 10 times as many teachers and Graiders, so a lot of the manual solutions we used before will start to break down. My goal will be to make sure pain points are alleviated by the product. My next goal is to prepare the codebase for future engineers. It's very hard to hire good engineers to work on a messy product, and even harder to have multiple developers working on one that doesn't separate concerns well. If we hit our goals and 2017 is focused on growing the team, then we'll need to have a good development process and architecture in place. Finally, I hope to continue to test the systems I helped implement at Packback in a new environment. At Packback I had Jessica Tenuta, a great in-house designer and cofounder, to help with spec and product details. We won't have dedicated design resources initially at The Graide Network. Implementing a workflow that accounts for this will be an interesting experiment. I'm sure I'll have much more to write on the challenges specific to very early stage startups (there are just 4 of us working full-time now), but if you have other questions or comments, feel free to [find me on Twitter](https://twitter.com/KarlLHughes). ![](https://i.imgur.com/KV9Ehie.png?1)","createdAt":"2016-07-18 13:00:10","updatedAt":"2016-07-18 13:00:10","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=919","type":"blog"}
{"_id":"kanban-introduction","title":"An Introduction to Kanban","content":"Everyone wants to be more productice, but it can be hard to try something new if you’re not even sure where to start. I’ve found Kanban to be helpful for both my team and personal workflows, so here's what it is and how to use it.","createdAt":"2016-11-29T06:00:00.000Z","updatedAt":"2016-11-29T06:00:00.000Z","imageUrl":"","postUrl":"https://www.themuse.com/advice/an-underrated-way-for-engineering-teams-to-improve-their-workflow","type":"link","tags":[{"_id":"the-muse"},{"_id":"kanban"},{"_id":"management"}]}
{"_id":"know-your-competition-when-hiring","title":"Know Your Competition When Hiring","content":"*Hiring software engineers hasn't gotten any easier or cheaper since I posted this in June, 2015. I've always been interested in the recruiting space, and I continue developing open source tools for job seekers and recruiters at [JobApis.com](https://www.jobapis.com/).*\r\n\r\n-----\r\n\r\nI was talking to a technology recruiter yesterday and he gave me a couple off the cuff statistics that weren't particularly shocking, but were telling of the state of hiring right now:\r\n\r\n- There are roughly 4 open jobs for every developer in the city of Chicago\r\n- Developers stay an average of less than 3 years at every position they take\r\n\r\n### This means we're always hiring, but so is our competition\r\n\r\nWhat this means to me as the hiring manager of our engineering team is that _we're always hiring_, and that I have to realize our competition is as well.\r\n\r\nBut, our competition for selling textbooks at Packback isn't the same as our competition for hiring developers. Our competition for hiring is every company hiring developers with the same skill-sets we want (which are PHP, Laravel, Javascript, and Angular) in Chicago, but possibly surrounding markets too.\r\n\r\n### So how do you know your competition?\r\n\r\nThis is something I've been thinking about a lot lately. Before the time comes that I need to hire someone, I want to know who I'm competing against; who else is looking for the same devs as me; and who else currently employs the developer I'm going to hire.\r\n\r\n### That's right, competition means someone loses\r\n\r\nAs someone who doesn't particularly like confrontation, I wish it were possible to hire only people who were currently taking a nice three month break between jobs, but the reality is that with _4 jobs to every developer_, we're going to have to steal someone else's talent.\r\n\r\n### So knowing your competition means knowing where you can poach talent\r\n\r\nI don't like the word \"poach\" a lot, but it does accurately describe what we all have to do in the industry. When my company needs to grow, that talent has to come from somewhere, and my best sources are finding devs currently employed by reputable companies where I know they were well-trained but may be lacking something. _(Finding out what that \"something\" is can be tough, but that's where things like a casual culture, remote work options, or the best pay in the market can come in handy, but that's beyond the scope of this post.)_\r\n\r\nThe truth is though that even if you're super in-tune with the hiring landscape in your area, hiring in tech right now is tough. I'm not against working with recruiters, especially if you're a small company, but you do have to keep in mind that they're going to charge you $15,000 to $50,000 to (theoretically) find you that perfect person. The more you can easily do on your own to know the hiring landscape, the better.\r\n\r\nSo how do you keep up with who's hiring in your area? Do you find meetups, online tools, or Linkedin helpful?\r\n\r\n_PS: I run a free service to help hiring managers and recruiters find out more about who's hiring in their area. [Sign up if you'd like to try it out](https://www.jobstomail.com/) and let me know what you think._","createdAt":{"$$date":1493028009000},"updatedAt":{"$$date":1493047913044},"imageUrl":"https://i.imgur.com/XQJOn7I.jpg","postUrl":"http://www.karllhughes.com/?p=746","type":"blog","tags":[{"_id":"hiring"},{"_id":"management"}]}
{"_id":"laravel-forge","title":"Using Forge to Create and Deploy Laravel Projects Fast","content":"I've always been a big fan of [Heroku](https://www.heroku.com/) for deploying my personal projects, but there are other options. Laravel's creator has a great project called [Forge](https://forge.laravel.com/) that makes deploying and managing a Laravel project even smoother than Heroku. We've been using Forge as part of our [continuous integration and deployment process](http://www.karllhughes.com/2015/continuous-integration/) at Packback for over a year now, and in most cases, it does the job perfectly. Here's a quick overview of how you can use Forge to set up and deploy your own Laravel projects:\n\n## 1\\. Register and set up your accounts\n\nYou'll need three things to start using Forge:\n\n*   An account on Forge ([register here](https://forge.laravel.com/auth/register))\n*   A verified account on DigitalOcean ([register here](https://m.do.co/c/6534184ea9d0))\n*   A domain name with the ability to update DNS records\n\nForge will link to your DigitalOcean account and automatically provision a droplet for you, so you don't even need to set up your server on DigitalOcean - just enter your payment details.\n\n## 2. Provision a new server\n\nOnce you're logged in to Forge and you've connected your DigitalOcean account, Forge can do all the heavy lifting creating your server. Just enter a name for your server, select the size droplet you want to use, region, and any additional options listed in Forge. You can use PHP 5.6 or HHVM, as well as enable backups automatically. If you're just using DigitalOcean to host Laravel projects, you really don't even have to log in once you've got everything hooked up. Once you click, \"Create Server\" Forge will get to work creating your droplet in DigitalOcean, installing the version of PHP you want to use, adding Nginx, and setting up configurations that you'd normally have to do yourself or copy from another droplet. ![forge provision server](https://i.imgur.com/a5CutMz.png)\n\n## 3\\. Create a new domain in Forge\n\nOnce the server has been provisioned, you'll need to add the domain name you're planning on using for your site. A default site gets created by Forge, but I'd recommend not using that as it will take extra work to get running with your domain. ![create domain in Laravel Forge](https://i.imgur.com/hAW66UM.png) When your domain has been added, click the pencil (\"Edit\") icon under the \"Manage\" column to get your site set up.\n\n## 4. Install a project from Github\n\nThe easiest way to get your project running is to link Forge to your repo on Github. If you do this, it'll be easy to automatically deploy updates and allow others to contribute to your code. Once you've linked your repository, Forge will add a simple deploy script and you can go ahead and click \"Deploy Now\" to get things out there. If you don't want migrations to run automatically or you want to add your own steps to the deployment process, this is the place to do it. For example, we always add a `date` line to the beginning of the shell script just to make sure that when a deployment fails we know when it failed. Our deployment script for production sites ends up looking something like this:\n\n<pre>date\ncd /home/forge/url.of.this.site.com\ngit pull origin master\ncomposer install --no-interaction --no-dev --prefer-dist\nphp artisan migrate --force</pre>\n\n## 5\\. Configuration\n\nMost likely, your Laravel project will require a .env file with environmental variables in order to actually connect to a database and work. Fortunately, Forge makes this easy as well by giving you a .env file editor in the \"Environment\" tab for each of your sites. ![](https://i.imgur.com/hUPdDA3.png)You can also get more granular control over your Nginx configuration by clicking \"Edit Files\" -> \"Edit Nginx Configuration\" in the bottom right hand side of the Site Details page.\n\n## Additional features in Forge\n\nThat pretty much covers the basics of getting a Laravel project set up using Forge. When it comes down to it, Forge is more specialized for Laravel (and generally PHP projects) than an all-purpose tool like Heroku, plus it gives you the ability to scale up or down your droplet for much cheaper than Heroku. There are many more advanced features that Forge offers, including:\n\n*   Installing SSL certificates and handling HTTPS redirects\n*   Scheduling cron jobs\n*   Managing daemon processes\n*   Adding multiple sites to a single server\n*   Ability to add [recipes](https://forge.laravel.com/recipes) to run common Bash scripts on any of your servers\n*   Server networking whitelists for dependent APIs\n*   Adding multiple SSH keys to log in as the Forge user\n\nHave you given Forge a try yet? Interested in setting it up? Need help? Let's [continue the conversation on Twitter](https://twitter.com/karllhughes).","createdAt":"2016-02-01 05:41:02","updatedAt":"2016-02-01 05:41:02","imageUrl":"","postUrl":"http://www.karllhughes.com/?p=855","type":"blog"}
{"_id":"learned-midwest-php-2016","title":"5 Things I Learned at Midwest PHP 2016","content":"In [my last post before Midwest PHP](https://www.karllhughes.com/2016/midwest-php-2016/) I gave an overview of some of the talks I was most excited about at the conference. Now that it's over and I'm back on my cozy couch here in Chicago, I'll share just a few of the nuggets of knowledge I gathered over the weekend in Minneapolis:\n\n### 1\\. Build microservices for failure and interchangeability\n\n![](https://i.imgur.com/OWyTM8r.jpg)Microservices are all the rage, and I definitely felt it at the conference. I have a feeling this is partly because [continuous integration and deployment](https://www.karllhughes.com/2015/continuous-integration/) have gotten so cheap and easy to set up, but the pattern is definitely attractive to developers. That said, it's also challenging to build services that are truly decoupled and abstracted enough to be interchangeable. [Mike Stowe's](https://twitter.com/mikegstowe) talk reminded me that one of the big theoretical advantages to microservices is that you can one day refactor or completely replace a service without the pain of completely rebuilding your system. Of course, you only get this upside if you did your microservices right to begin with, and that means testing for failure and building for interchangeability. If you've got tightly coupled microservices working across an HTTP layer, you're just getting the downside of increased latency with no upside of modularity.\n\n### 2\\. Hypermedia is an awesome idea; why don't more APIs use it?\n\n[Ben Ramsey](https://twitter.com/ramsey) gave a presentation on building truly RESTful APIs. While we've been building APIs for a while now at Packback, none of them take advantage of hypermedia and as I think about the hundreds of connections to third party APIs that I've made over the years, only a few of them actually use the tool consistently. So what is hypermedia and why is it so underused? Here are [Ben Ramsey's words from his blog](https://benramsey.com/blog/2015/11/lack-of-hypermedia/):\n\n> By hypermedia, I mean links that describe relationships among data in the API. When hypermedia isn’t used, the API becomes brittle, and those building clients that talk to the API are forced to code to URLs. The URLs become an important interface to the API, and if they change, they break everything. This leads to URL-based versioning schemes, and the only upgrade path for clients is to modify their code to accommodate the new versions. When an API uses hypermedia, the URLs are no longer important. Clients talking to the API do not need to code to URLs because the API will always convey where to go next through hypermedia relationships. If a URL changes, then there’s no problem. The change gets communicated through the API. This leads to a more flexible and evolvable API that can change over time without needing to update all the clients.\n\n### 3\\. Aol has some surprisingly cool technology\n\n![](https://i.imgur.com/UJpPgJn.jpg)I haven't thought of Aol as a cutting edge technology company since they were sending everyone in the United States two dozen \"free internet\" CDs a month, but it sounds like they're making a comeback - this time in online media. [Samantha Quinones](https://twitter.com/ieatkillerbees) gave a compelling talk on how Aol collects 2600 messages per second from users on their site, and the iterations she went through while building the project. Working at scale is really interesting to me, and I've gotten to set up a couple applications that collect data at what I thought was a somewhat impressive rate. That said, Samantha's tool at Aol blows anything I've done out of the water. While I'm proud of Aol for innovating, I'm really interested in what they do with creative technology like this in the media industry. The old players (eg: newspapers) are either online or bust, so it's a great time for disruptive companies (possibly Aol) to figure out what's next in online media, realtime data pipelines, and creating the news cycle of tomorrow.\n\n### 4\\. NoSQL comes in many flavors, and you don't have to eat them one at a time\n\nMySQL, SQL, MariaDB, and other relational databases have served web developers well for the past couple decades, but as alternatives have blossomed and matured, it's getting easier to see some reasonable use cases in everyday work. After listening to [Bradley Holt](https://twitter.com/BradleyHolt) of IBM (and CouchDB enthusiast) give a talk about NoSQL, I've realized that the term is much broader than MongoDB. In fact, NoSQL really encapsulates three (or more if you include hybrids) distinct database types: key-value, document, and graph. Most frameworks run under the expectation that you're going to use one kind of database (and maybe one form of caching) to build your application no matter how big or complex it is. While that might work for some simple services, I think we're seeing the one-database-type-per-app rules breaking down. It's easy to imagine an application where user IDs, emails, and passwords are stored in MySQL for consistency, but metadata on the user is stored in document or key-value databases (depending on the data involved). While I haven't gotten out and built a system like this yet, I feel more confident about a move in this direction than I would have before the conference.\n\n### 5\\. HTTP2 and APIs\n\nAnother thing that got me thinking a lot about the way we build APIs today was mention of HTTP2 and its implications on architecture. HTTP2 is the latest iteration (really the first iteration since the 90's) of the HTTP protocol that applications use increasingly to move data, images, html, etc. across the internet and into your client (usually a browser). Besides being faster, HTTP2 represents a fundamental shift in the way data can be delivered by opening up multiple two-way streams between the client and the server, so API builders can do some really clever things to speed up their application. I had a conversation about this with a couple of the speakers, and Ben Ramsey pointed out that one implementation he's heard of involves an API receiving a call, then proactively sending the response to calls that are likely to be made next by the user, thereby speeding up the most common subsequent requests. While adoption of the protocol will take years (if it's ever fully adopted), it's certainly possible to start designing applications that take advantage of these performance boosts today. I for one can't wait to try. Have your own thoughts on the best stuff at Midwest PHP? [Shoot me a message on Twitter](https://twitter.com/KarlLHughes), and thanks for reading.","createdAt":"2016-03-08 03:19:03","updatedAt":"2016-03-08 03:19:03","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=871","type":"blog"}
{"_id":"less-custom-software","title":"Writing Less Software to Accomplish More","content":"Creating custom software should be the last resort for early stage startups.\r\n\r\nWriting good software is a slow and expensive process. Writing bad software is even slower, especially when you want to change things. Startups need to move fast and spend as little money as possible, but many first-time founders, unaware of the true cost of developing software, spend too much time worrying about their product and too little time figuring out how they can generate value for their customers.\r\n\r\nI've written [about this before](https://www.karllhughes.com/posts/creating-a-tech-startup-without-a-developer), but I was reminded of it when talking to my friend who has been working on getting his small startup off the ground. They've been through three product iterations with three different sets of developers who each pushed for a complete rebuild as the previous iteration was \"not worth fixing.\" As I listened to the requirements for the project, I realized that there wasn't anything  that couldn't be built using Squarespace, Zapier, Wufoo, and Stripe.\r\n\r\nAs the tools for helping non-developers build websites get better, there's almost never a reason to build an MVP from the ground up with custom software. In this post, I'd like to highlight some of the ways teams I've been on have built lean MVPs with little to no dev work. But first, I'll introduce the important \"Build-Measure-Learn\" cycle for some context.\r\n\r\n## The Build-Measure-Learn Cycle\r\n\r\nI read [The Lean Startup](http://amzn.to/2EyYGhu) a few years ago, and it's made a huge impression on my thought-process as a software engineer and startup product manager. One thing that I've tried to implement is a quick build-measure-learn iteration cycle.\r\n\r\nTypically, people think of this cycle as being a long process, where the entrepreneur must come up with an idea, raise money, and hire engineers before they can start building a product, measuring its impact, and learning enough to start another iteration:\r\n\r\n![](https://i.imgur.com/4oGxSaR.png)\r\n\r\nBut that's definitely _not_ the way a lean startup should work. Our iterations need to be faster, we need to learn much more before we invest (or find others to invest) money in our ideas.\r\n\r\n> “The question is not 'Can this product be built?' Instead, the questions are 'Should this product be built?'\" - [The Lean Startup, Eric Ries](http://theleanstartup.com/principles)\r\n\r\n## What if I just hire one engineer?\r\n\r\nPart of the problem that inexperienced entrepreneurs face is that they don't know the cost and challenge of hiring, leading, and managing an engineer.\r\n\r\nWhile the cash cost is pretty significant (usually $100k/year or more), there's also the fact that most engineers on their own are software engineers, not product managers, so you'll also need someone (probably you) to direct them on priorities and keep them on task. You'll also have to learn enough of their language (do you know the difference between an \"API,\" \"database,\" and \"HTML\"?) to have a meaningful conversation with them and help them prioritize the product.\r\n\r\nBeyond that, writing custom software almost always takes 2-3 times as long as you think it will ([it's a known problem, and it's even a problem if you know about it](https://lifehacker.com/estimate-how-much-time-you-need-for-a-project-then-dou-1592791225)), you almost never get the product right on the first iteration (meaning you need to keep that expensive engineer around longer than you were hoping), and your engineer will probably overbuild it, especially if he's got some experience.\r\n\r\nThe other common solution I hear is to hire outsourced developers to build your MVP. While it is _sometimes_ cheaper up-front, it's almost certainly more expensive in the long-run, and you have to remember that your outsourcing partner **does not have the same interest as you do in your project's success**. They'll all try to sell you on how much they care, but they're trying to churn through your project to move on to the next one. Full stop. ([I've written more about outsourcing and offshoring here if you want to read more](https://www.karllhughes.com/posts/risk-of-offshore-outsourcing)).\r\n\r\n## So what should non-technical founders do?\r\n\r\nThis is where some examples might be helpful. I can't explain in one blog post how to build any MVP you can dream up, but I can give you some examples of projects I've worked on that have used zero to minimal code to get the build-measure-learn cycle started. If you want more examples, check out [Lean Customer Development](http://amzn.to/2BQH0Lt) and [The Customer Funded Business](http://amzn.to/2EBBuzl) as both books have good ideas for developing products without raising money first.\r\n\r\n### 1. Building a College News Blog at Uloop (2011)\r\n\r\nI joined Uloop in 2011 after starting my own college blog at The University of Tennessee. My \"product\" was a Wordpress site that I had hacked around on and added a number of plugins to in order to manage a team of around 30 writers. Uloop tasked me with scaling up the process so over my first few months with the company I started recruiting writers at colleges across the country.\r\n\r\nWhile keeping writers engaged was a challenge, we were able to bring on over 500 writers and generate 100s of thousands of pageviews for the site over the first year. Unfortunately, content isn't valuable without a way to monetize it.\r\n\r\n![](https://i.imgur.com/v2qD1Qh.png)\r\n\r\nThe team at Uloop was really good at being scrappy and making money though. Something I learned at that job is that there are sometimes market opportunities that seem too easy, but are still worth pursuing. After a few months of working on Uloop News, we managed to purchase [UWire](http://uwire.com/), and we quickly integrated their PR customers into our news blog, allowing them to publish their releases with guaranteed coverage on Uloop News for a small fee.\r\n\r\nNeither side of this two-sided marketplace required a fancy product. We used mostly off-the-shelf plugins for Wordpress and Google forms to take orders from UWire customers. Occasionally we had to make phone calls or emails to handle payments, but since our volume was relatively low, we didn't need an automated payment solution on day 1.\r\n\r\nThe outcome of this lean product was thousands of dollars in revenue in our first year, a new focus on fresh content for Uloop, and eventually it set the company up to buy College Media Network a few years later. While I left Uloop in 2013, they continued to focus on news content as a headlining feature for years afterwards, and eventually built it into their primary platform.\r\n\r\n### 2. Packback's Question & Answer Platform (2015)\r\n\r\nI've written about [Packback's pivot](https://blog.codeship.com/incremental-software-development-with-php-microservices/) a few times before, but I'll include a short version of our pivot here as it's extremely relevant.\r\n\r\nIn 2015, we were struggling with the two-sided textbook rental marketplace we had built. Publishers were not giving us distribution rights to their books, so in an effort to get more college students on our platform, one of the founders started a side project that would become Packback's focus over the next year. The idea was to give professors a free tool to engage their students in class and thereby market our textbook platform to a captive audience. The first iteration of the \"Q&A Community\" product was built on Google Drive, Mailchimp, and a whitelabeled community platform called Answerbase.\r\n\r\n![](https://i.imgur.com/AQk1IVv.png)\r\n\r\nStudents would sign up on Answerbase, we'd copy their info into Mailchimp (using that to send mass emails reminding them to check the platform), and then generate reports in Google Drive for the professor to see how their class was doing each week. Within a summer semester we had tested the new platform and realized we had a hit...sort of. Professors liked being able to see engagement numbers without forcing students in large lecture halls to have discussions, and students liked having a community of their peers to ask insightful questions in. Unfortunately, it didn't help us sell more textbooks, so we decided to see if we could charge students for access to the platform directly.\r\n\r\n![](https://i.imgur.com/gd2ZJXK.png)\r\n\r\nThe next iteration of Packback's platform used Zapier to automate the signup process and a Wufoo integration with Stripe to charge students for access. We had thousands of students sign up to use it, and quickly realized that there was a viable business model in the tool we had created. We began integrating a little custom code for generating reports, and over the next year, rebuilt the platform from the ground up. Today Packback is growing and just closed a $4.2 million series A round of funding all thanks to a very lean MVP that required almost no engineering effort.\r\n\r\n### 3. The Graide Network's Plan to Help Teachers (2014)\r\n\r\nBefore I joined [The Graide Network](https://www.thegraidenetwork.com/), the non-technical founders put together a viable MVP which allowed them to test the model. The goal was to see if teachers would trust outsourced graders with their work and to figure out if these remote teaching assistants (mostly college students studying to be teachers) would be reliable and accurate enough in their grading.\r\n\r\nBlair Pircon (and Liz Nell starting in 2015) testing the hypothesis by working with teachers via email, passing around documents in Google Drive, and using Excel spreadsheets as a template for Graiders. As the number of assignments grew, the small team started using a spreadsheet to keep track of Graiders and applicants that they got from college job boards.\r\n\r\n![](https://i.imgur.com/KKjwJ0q.png)\r\n\r\nWhile this \"stack\" isn't glamorous, it worked, and The Graide Network has raised close to $1 million in seed funding to help us scale up the operation. As the team's needs have grown, we've continued to rely on a blend of custom software and off-the-shelf tools (Zapier, Textus, and Slack to name a few).\r\n\r\n## Conclusion\r\n\r\nI realize that plenty of great companies have been built on technically challenging problems that required great engineering effort, but the truth is if you're a small business trying to build something on the web, you're probably not in that camp. Software products tend to be overbuilt for two reasons: (1) that business people don't know about the tools that are available for building lean MVPs, and (2) engineers don't know or don't want to push nontechnical solutions.\r\n\r\nAs engineers, we have to get over our hubris and realize that our jobs exist to serve a purpose and improve the business, while business leaders need to get a little creative and not immediately throw their problems over a wall to an engineering team. If you're interested in tools that might be useful for starting a website, app, or data-driven business without code, [let me know](https://twitter.com/karllhughes). I've been doing some research on these tools and would be happy to collaborate.","type":"blog","imageUrl":"https://i.imgur.com/Q3rBr7S.png","postUrl":"","tags":[{"_id":"mvps"},{"_id":"engineering"},{"_id":"startups"}],"createdAt":{"$$date":1517865749113},"updatedAt":{"$$date":1517865749113}}
{"_id":"manageable-goals","title":"Keeping Goals Manageable","content":"It's time for New Year's Resolutions, which means it's time for at least 127,000,000 people in America to set a goal that they will ultimately fail.\r\n\r\n[Only 8% of New Year's Resolutions succeed](http://stephenshapiro.com/interesting-new-years-resolution-statistics/), and there are plenty of reasons for that, but I'm not going to go into most of them here. Today I just want to let you know how I set goals and keep them manageable:\r\n\r\n## 1. Focus on the habits you need to build/change to reach your goals\r\n\r\nFirst off, don't worry so much about the end goal. Want to lose 10 pounds? Great, but a goal like \"I want to lose 10 pounds\" is too abstract because it doesn't tell you how you'll get there. Rather than saying, \"I want to lose 10 pounds,\" over and over, make a resolution to stick to 2 new healthy habits that will help get you there. For example, track your calories every day for three months, or walk 8000 steps per day. Habits are sustainable, long-term things that help you reach your goals.\r\n\r\n## 2. Year-long goals are too big\r\n\r\nUse smaller chunks of time. I like [6 to 12 week chunks](http://www.fastcompany.com/3040289/why-90-day-goals-are-better-than-year-long-ones?partner) of time for most of my goal-setting. There's plenty of [debate over how long it takes to build a new habit](http://jamesclear.com/new-habit), but if you're focused on a really long length of time to reach a goal, you'll keep putting it off. If it's too short, you'll fail and get discouraged.\r\n\r\n## 3. Only chase habits that you know you could actually do consistently\r\n\r\nYou can starve yourself to lose weight, but it won't stay off. Similarly, you shouldn't run a marathon by trying to run 20 miles in your first week off the couch. Focus on small, incremental change, and as you build confidence set larger and larger goals for forming new habits.\r\n\r\n## 4. Limit the number of goals you set at once.\r\n\r\nWhen people rattle off 10 things they want to do for their New Year's Resolution, I have to be skeptical. Never try to build more than 3 or 4 new habits at once.\r\n\r\nThat may discourage you if you have a lot of things to improve, but it's okay. Just remember that small, sustainable steps are the best way forward.\r\n\r\n_Photo by [Natasha Mileshina](https://www.flickr.com/photos/bubbo-tubbo/ \"Go to Natasha Mileshina's photostream\") on flickr.com_","createdAt":{"$$date":1491996606000},"updatedAt":{"$$date":1492015018785},"imageUrl":"https://i.imgur.com/xhAV9iq.jpg","postUrl":"http://www.karllhughes.com/?p=669","type":"blog","tags":[{"_id":"goals"},{"_id":"health"}]}
{"_id":"marketing-isnt-about-content-creation-its-about-platform-creation","title":"Marketing isn't about Content Creation, it's about Platform Creation","content":"*Back when I was first starting out, I was actually more interested in technical marketing than product engineering, and this post from 2012 reflects that focus. I'm glad I did get some training in marketing though because that's come to help me a lot as a developer.*\r\n\r\n*Creating a platform has been a really influential mindset for my open source project [JobApis](https://www.jobapis.com/), and knowing about online marketing has helped me communicate more effectively with business teams at all the startups I've worked at.*\r\n\r\n-----\r\n\r\nWhen people talk about content marketing, they usually mean writing articles by the company on a blog somewhere out in the wide world of the web. I've got news for you, blogging, link-building, and company-generated content are _not_ the way of the future.\r\n\r\n## The Best Brands Don't Highlight Themselves; They Let Their Customers do the Talking\r\n\r\nThat's right, branding and marketing are not about making yourself look good by telling potential customers how good you think they are. I don't know why this is a news flash, but I hear it all the time from shitty content marketers. People [make decisions based on what other buyers say as well as what their friends and family say](http://conversionxl.com/9-things-to-know-about-influencing-purchasing-decisions/), not based on a company's projection of itself through a blog or press release. 60% of people look for reviews before they buy a product or subscribe to a service, and in today's world of online connectedness, this should not come as a surprise.\r\n\r\n## How Can We Create a Platform?\r\n\r\nWhile bad companies are focused on writing great content about themselves, the good, innovative companies are setting up platforms for customers to _talk about them_.  The good news is that even if you don't have a huge budget for marketing, you can create a platform for your customers to advertise for you.  It doesn't have to be something proprietary. In fact, I think the best brands build a customer-centric platform on platforms originally created for other purposes (ie: social media). There are several ways that you can turn your marketing efforts away from a company-centric view to a customer-centric view:\r\n\r\n#### Leverage Social Media\r\n\r\nStop talking about yourself on your social media channels.  Talk about your customers.  Tell stories of satisfied users. Open up conversations. Don't promote yourself unless absolutely necessary, and start thinking with every post, \"how will this benefit my customers?\" not \"how will this trick people into liking my brand?\"\r\n\r\n#### Get Into \"New\" Areas of the Web\r\n\r\nPeople often talk about social media like it's just Facebook and Twitter. Every good website has a social element to it these days, so explore them. Quora, Tumblr, Reddit, StumbleUpon, and Pinterest are all waiting for you. Spend time observing each new channel and noticing what gets shared before you attempt to make a spammy-looking, self-serving post. Remember, your goal isn't to talk about yourself; your goal is to watch and highlight when users or customers talk about you.\r\n\r\n#### Integrate a Social Element Into Your Site\r\n\r\nWhen we added a new feature on Uloop News that allowed our writers to send out status updates to other writers, some people didn't see the point. Our writers had other methods to communicate (Facebook, Twitter, email, etc.), so why would they use some silly internal system to do it? Nay-sayers be damned, the new communication method saw 75% of our writers use it within a week. Your customers and users want to relate to and help other customers and users out. Give them a simple way to do it!\r\n\r\nRegardless of how you implement it, company-generated content should be given very little value in the grand scheme of marketing. Great brands (ie: Apple, Google, Target) have customer-built blogs dedicated to supporting them. You don't see that for shitty companies, and there's a reason for it.","createdAt":{"$$date":1487743219000},"updatedAt":{"$$date":1487775983304},"imageUrl":"https://i.imgur.com/kijFOUO.jpg","postUrl":"http://karllhughes.com/?p=268","type":"blog","tags":[{"_id":"marketing"},{"_id":"content-marketing"},{"_id":"writing"}]}
{"_id":"messaging-as-a-platform","title":"Messaging as a Platform","content":"Messaging platforms like Slack, Snapchat, WeChat, Allo, and What's App are all the rage - each with their own unique spin on messaging. Some say [they're killing email](http://time.com/4092354/how-e-mail-killer-slack-will-change-the-future-of-work/), and some say [that's not likely](https://techcrunch.com/2016/06/28/you-cant-kill-email/), but regardless it's hard to argue that they aren't changing the way we communicate with one another.\r\n\r\nOne of the most interesting trends is the rise of \"smart\" messaging platforms, which allow participants to do more than just send text across a network. They allow for rich text, animated gifs, videos, sound-bites, and links to be sent in real time to one or more participants in the chat. This alone isn't really new ([AIM had a lot of this stuff a decade ago](https://en.wikipedia.org/wiki/AOL_Instant_Messenger#History)), but one thing that has changed is the speed and availability of these methods of communication. The other thing that has changed is the \"smartness\" of the servers relaying these messages, and that's where messaging as a platform begins.\r\n\r\n### What does \"messaging as a platform\" mean?\r\n\r\nThe term \"X as a platform\" can apply to many things in our digital world. In the development community, we call services that allow us to host our code \"[infrastructure as a platform](http://searchcloudcomputing.techtarget.com/definition/Infrastructure-as-a-Service-IaaS)\" (or \"infrastructure as a service\") because while there is infrastructure out there in the cloud, we only care about the platform that it allows us to build on. Messaging as a platform is more analogous to something like a \"website as a platform,\" so let's follow this analogy: \r\n\r\nIn a traditional website, forms are used to handle input from users. For example, when you want to sign up for a service, you put your email address and name into a form and then click submit. This triggers a bunch of stuff on the backend to register your account and show you a confirmation page. Meanwhile if you used a messaging app as a signup medium, you might text your email address to a specific phone number and then their service will automatically text you back a confirmation. The messaging system you used (eg: SMS, Facebook, Slack) was the platform that kicked off your signup - something that has traditionally been done via the web or a smartphone app.\r\n\r\n### What are some possible uses for message-driven platforms?\r\n\r\nSo messaging as a platform is becoming increasingly popular as [messaging apps become more popular](http://www.teamchat.com/en/messaging-platforms-the-next-big-thing/), but in my example above it's hard to see the real advantage of having users text you their email instead of just filling in a form online. On the other side, it's hard to see the advantage as a user because signing up might get you the same content regardless of whether you sign up via a web form or text message. Let's look at some messaging platforms and the ways that various people are using them today.\r\n\r\n**Slack bots** - Slack has hung their hat on the ease and accessibility for [developers to create bots](https://api.slack.com/bot-users). This community of slackbot creators has [released hundreds of open source bots](https://github.com/botwiki/open-source-bots) that automate everything from the mundane to the extremely complex and allow Slack users to do all sorts of things without leaving Slack's platform.\r\n\r\n**Intercom** - While Slack has become the go-to inter-team communication platform, Intercom has placed itself as the leader in sales and customer service chats for businesses. They have a platform that allows users on any website to chat directly with [real humans who work there](https://blog.intercom.com/bots-versus-humans/), asking questions or getting clarification before they sign up. Similarly, you can automate Intercom to proactively message users as they come to certain pages or enter specific inputs.\r\n\r\n**Twitter auto-DMs** - I'm sure the first marketers who discovered that you could automatically send direct messages to new followers had good intentions, but the automatic DM has been misused and abused. That said, Twitter is being used as an automated messaging platform for a [few interesting cases](http://www.pcworld.com/article/242338/10_twitter_bot_services_to_simplify_your_life.html).\r\n\r\n**Using Facebook messenger to order pizza** - Facebook opened up its [messaging platform](https://developers.facebook.com/docs/messenger-platform) to bots [earlier this year](https://www.technologyreview.com/s/601251/facebook-wants-you-to-chat-with-business-bots) and since then several companies have taken advantage of the platform's ability to take payments and interact with customers. Domino's now allows you to [order pizza via Facebook messenger](http://mashable.com/2016/09/15/dominos-pizza-facebook-bot/).\r\n\r\n**Google search results in a conversation** - Google just released Allo, a [messaging service](http://time.com/4500510/google-allo-app-release-date-2016/) that integrates with its search platform to allow chatters to search for things within a conversation. The implication here is that you could be talking with a friend about getting dinner and then use Allo to look for restaurants right in the middle of your conversation. For Google, the conversation is an interesting point for context, and I can imagine them showing different results based on the preferences of both parties rather than simply showing the best result for the asker.\r\n\r\n**Real time, on demand stock quotes** - This has been around for a long time, but it's worth including as a simple example of messaging as a service. You can sign up to receive stock quote alerts for specific companies or industries via a service like [Zignals](http://www.zignals.com/platform/stock_alerts/stock_alerts).\r\n\r\n**Arbitrary tasks or questions** (eg: [Siri](http://www.apple.com/ios/siri/), [Amazon Echo](https://www.amazon.com/Amazon-Echo-Bluetooth-Speaker-with-WiFi-Alexa/dp/B00X4WHP5E)) - Messaging platforms have moved beyond text, and one of the next frontiers seems to be spoken word. Apple, Google, Microsoft, and Amazon have voice-activated personal assistants that allow users to ask arbitrary questions or do simple tasks like create emails or calendar events. While few of these platforms are deeply integrated into third party services at this point, I'd bet that's coming soon. \r\n\r\n**Twilio for creating messaging services via SMS** - Finally, [Twilio](https://www.twilio.com/) has spent the past 8 years making SMS text messaging a more accessible platform for developers to create their own text bots or services. Using Twilio's tools, you can make bots, send alerts, broker communication between anonymous users, and much more.\r\n\r\n**WeChat allowing creation of apps within its chat app **- WeChat might not be a familiar name to us in America, but as the dominant Chinese messaging platform it influences a huge portion of the world's population. [They are now allowing users to create \"little programs\" or apps within their chat application](http://www.wsj.com/articles/tencent-tries-out-a-stickier-wechat-1475086017?mod=djemCIO_h). I have yet to see an example of something created within WeChat, but keep an eye out for this very soon.\r\n\r\n### Why does this matter?\r\n\r\nA decade ago, the prevailing wisdom was that your company needed a website. A couple years later it was a social media page, and now it's an app. It's not hard to imagine a future where chat becomes an essential marketing channel. In the short-term, we're seeing cutting edge companies use chat to rebuild existing applications, but I think that in the long-term certain applications will cease to exist elsewhere.\r\n\r\nIs there a need for every service to have a full-featured web or mobile application? Or, could a messaging app serve its customers just as well? At the same time, I realize that not every service will be served by messaging platforms. I don't think you'll be texting future employers your resume (although [maybe I'm wrong](http://lifehacker.com/how-i-turned-my-resume-into-a-chat-bot-1775565350)), but I could see a world where I don't have to log into Jimmy John's website just to order a sandwich.\r\n\r\nWhat do you think? Have you seen any novel uses of messaging as a platform? Where do you see the trend going? Let me [hear about it on Twitter](https://twitter.com/KarlLHughes).","createdAt":{"$$date":1475509829000},"updatedAt":{"$$date":1505264469139},"imageUrl":"https://i.imgur.com/K7esLaZ.png","postUrl":"","type":"blog","tags":[{"_id":"messaging"},{"_id":"chatbots"}]}
{"_id":"microservices-domain-driven-design","title":"How Microservices Help Enforce Domain Driven Design","content":"I'm working my way through a long backlog of episodes of Software Engineering Radio right now, and I just listened to [Eric Evans' episode on 10 years of Domain Driven Design](http://www.se-radio.net/2015/05/se-radio-episode-226-eric-evans-on-domain-driven-design-at-10-years/). Evans is the author of the original book on [Domain Driven Design](http://amzn.to/2287YWI), and during the episode he talked about some of the forces and trends that have come and gone in the past 10 years and how they've influenced and changed DDD.\n\n## What is Domain Driven Design?\n\nDomain Driven Design (or DDD for short) is a method of software development that encourages developers to use the same or similar terminology for creating the objects they work with as the business uses for its operations. The technical definition from Wikipedia is:\n\n> Domain-driven design is an approach to software development for complex needs by connecting the implementation to an evolving model. The premise of domain-driven design is the following:\n> \n> *   placing the project's primary focus on the core domain and domain logic;\n> *   basing complex designs on a model of the domain;\n> *   initiating a creative collaboration between technical and domain experts to iteratively refine a conceptual model that addresses particular domain problems.\n\nIn practice, this means that a business that sells shoes online should probably have database models and objects that reflect the needs of a shoe store. So, there may be a Catalog model that contains many Products that in turn have many Attributes. These attributes should include price, color, size, make, model, etc. In the case of an example like e-commerce - which has been done many times before - Domain Driven Design seems almost too obvious, but where DDD really helps is in the specialized and unique ways in which a business operates. For example, if you're an online shoe store that sells products for elite athletes you may offer very different services from one that sells products for children under 10\\. Sure, there's crossover, but those two domains are definitely different, so the software solution we use to sell them should probably be slightly different.\n\n## Where do microservices come in?\n\nLet's switch gears to talk about microservices for a minute. [Microservice architecture](http://martinfowler.com/articles/microservices.html) embraces small, encapsulated pieces of software deployed separately and usually accessible via an HTTP layer. In short, microservices today mean lots of small APIs that talk to each other and one or more frontend clients. The awesome thing about microservices and DDD is that they work really well together. One of the keys of a good Domain Driven Design system is enforcing bounded contexts, which means that within different parts of the organization the models you create may be thought of differently. For example, in our shoe store, the New Product Innovation team may look at Products as fluid objects with many interchangeable attributes while the Customer Service team may see those objects as very rigid items and may only care about attributes like price, make, model, and size. One cares about creating and updating products while the other cares about getting attributes of existing products. Microservices lend themselves to reflecting these bounded contexts in a number of ways, but in our shoe store example, let's think of a good Products API. This microservice might care about Products in many contexts, but it can offer different endpoints to deal with each. So, you could build some endpoints for the New Product team to use when designing, creating, or editing shoes (probably POST and DELETE and PUT calls) and other endpoints for the customer service team to read the data they care about in their day-to-day operations (probably GET requests).\n\n### Another example from Packback's domain\n\nAt Packback, we use this architecture pattern when thinking about our users in different contexts. We have two products ([Packback Books](https://www.packback.co/books/) and [Packback Questions](https://www.packback.co/questions)) which share the same Users microservice. This allows users of one product to skip the signup process for the other product, but gives them different information in their dashboard based on which product they're logged into. Often, the two frontends share the same backend endpoints, but occassionaly one uses different filters than the other to request different data.\n\n## In the end, DDD relies on strong communication\n\nLike many parts of software development, the hardest part is good communication between the technical people building the product and the people who make the business run day-to-day. I really like [Conway's Law](https://en.wikipedia.org/wiki/Conway%27s_law), which implies that companies with unhealthy communication habits are likely to build software with the same deficiencies. Domain Driven Design is a great tool to use in conjunction with microservices, but it only works as well as the organization can communicate and define its own domain. Have thoughts or comments about DDD and microservices? [Let me hear about them on Twitter](https://twitter.com/KarlLHughes).","createdAt":"2016-05-16 06:58:59","updatedAt":"2016-05-16 06:58:59","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=900","type":"blog"}
{"_id":"microservices-fa","title":"Incremental Development with Microservices at Fullstack Academy","content":"For the past couple years, I've been guest lecturing at several Chicago-area bootcamp programs, and most of the time I've delivered some form of this talk on microservices and software development. While the talk is technical, it's approachable for developers at just about any skill level (or so the Fullstack people have told me).\r\n\r\nI have also pitched a version of this talk to several conferences, and written on this topic (for [php[architect] magazine](https://www.karllhughes.com/posts/php-architect-9-2017) and [Codeship](https://www.karllhughes.com/posts/incremental-development-codeship)) in the past few months. I've done this talk at Fullstack three times this year, and this time, they recorded it for their YouTube channel.\r\n\r\nYou can [watch the video on YouTube here](https://www.youtube.com/watch?v=Q8iqzB0za6A).","type":"speaking","imageUrl":"https://i.imgur.com/d6so7Jo.png","postUrl":"","tags":[{"_id":"developer-bootcamps"},{"_id":"microservices"},{"_id":"fullstack-academy"},{"_id":"programming"}],"createdAt":{"$$date":1507333695759},"updatedAt":{"$$date":1507333708587}}
{"_id":"midwest-php-2016","title":"7 Talks I'm Looking Forward to Most at Midwest PHP 2016","content":"![midwest php 2016](https://i.imgur.com/kvaPP7n.png)I have been neglecting the conference circuit lately. While I make it out to many of the local PHP and Laravel meetups, I decided I'd kick it up a notch this year and attend a couple technical conferences. Since I've never been to Minneapolis, the price was reasonable, and I am an avid PHP fan, I figured [Midwest PHP would be a good start](http://2016.midwestphp.org/). Now that the lineup of speakers has been released, I'm really excited about some of these talks as well as the opportunity to meet some of the speakers and my fellow PHP nerds. I'll be tweeting and probably writing about some of these talks, but in preparation for the event, here are a few of the talks I'm looking forward to most this year:\n\n### 1. [Using PHP to Load Test Your Site and APIs](http://2016.midwestphp.org/session/lessons-in-load-testing-using-php-to-load-test-your-site-and-apis/)\n\nI'm a big fan of service oriented architecture because it allows you to scale pieces of your application independently, but all that modularity is basically useless if you don't know how much load you need to serve and how capable each piece of your application is at delivering it. Lately I've been looking into some load testing services, but they can get expensive and the options to configure them are often limited. If there's a good way to do this in PHP, I'm hoping [Jason Lotito](https://twitter.com/jasonlotito) will tell us about it.\n\n### 2\\. [Caching Best Practices](http://2016.midwestphp.org/session/caching-best-practices/)\n\nScaling has been on my mind a lot in the past few months (we're about to be serving a lot more pageviews at Packback), so naturally caching has been a big topic of conversation around the office. While I've implemented caching in a number PHP apps now ([including Varnish to achieve faster load time on my blog](https://www.karllhughes.com/2016/wordpress-1-second/)), I'm looking forward to hearing [Eli White](https://twitter.com/EliW) go into some advanced caching layers.\n\n### 3\\. [Managing Your Content with Elasticsearch](http://2016.midwestphp.org/session/manage-your-content-with-elasticsearch/)\n\nAfter hearing [Samantha Quiñones](https://twitter.com/ieatkillerbees) a number of times on [Sammy K's PHP Roundtable podcast](https://www.phproundtable.com/), I'm excited to hear her talk in person about the basics of Elasticsearch. I've been meaning to look into implementing this anyway (we currently use Solr at Packback), so this talk will give me an excuse to start.\n\n### 4\\. [How Long Will it Take? Estimation Methods](http://2016.midwestphp.org/session/how-long-will-it-take-estimation-methods-to-answer-the-impossible-question/)\n\nAs I've taken over managing the team at Packback, I've become a lot more concerned with estimation and project management than I used to be, so I'm interested to hear what [Jared Faris](https://twitter.com/jaredthenerd) has to say on the topic. A few new tools and methods to improve estimates would be a great asset to bring back to the team.\n\n### 5\\. [Rethinking Loops](http://2016.midwestphp.org/session/rethinking-loops/)\n\nIn the past year I've been working with more Javascript, and I've already noticed that it's changed the way I write PHP code. I no longer fear callbacks and mapping functions, but I still have room for improvement, so I'm hoping [John Kary's](https://twitter.com/johnkary) talk proves useful here. The last line of the description really got me:\n\n> Beware: after this talk you'll never look at for() and foreach() loops the same again!\n\n### 6\\. [The Hidden Architecture of the Domain](http://2016.midwestphp.org/session/the-hidden-architecture-of-the-domain/)\n\nAs our services at Packback grow, there's no way around the need to constantly refactor a little bit at a time. In doing so, one thing I've struggled with is knowing which pieces of our applications belong in the application, which belong in shared repositories (like Composer packages) and which are truly framework-level pieces of code. Woody's talk sounds like it might help me get a better handle on architectural solutions.\n\n### 7\\. [Services in the Enterprise](http://2016.midwestphp.org/session/services-in-the-enterprise-how-not-to-fail/)\n\nAs I've mentioned in this article, we have taken a service oriented approach at Packback, so I'm definitely looking forward to [Mike Stowe's](https://twitter.com/mikegstowe) talk about why SOA (service oriented architecture) has failed in enterprise applications. Hopefully we'll avoid a similar fate with the microservices we're building at Packback. Are you going to Midwest PHP this year? Be sure to [let me know on Twitter](https://twitter.com/KarlLHughes) and I'll add you to [my list of attendees to watch](https://twitter.com/KarlLHughes/lists/midwest-php)!","createdAt":"2016-02-25 01:19:49","updatedAt":"2016-02-25 01:19:49","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=865","type":"blog"}
{"_id":"modernizing-legacy-code","title":"Modernizing Legacy Code","content":"Last summer I inherited a codebase that had been worked on by a couple different contractors over the past year. Like many offshored projects, it was a mess: there was logic in the views, four different methods to update a user, it was running on an unsupported version of PHP, and of course there weren’t any tests. Still, this was a challenge that I was ready to take on.","createdAt":"2016-09-12T05:00:00.000Z","updatedAt":"2016-09-12T05:00:00.000Z","imageUrl":"","postUrl":"http://www.thegraidenetwork.com/blog-all/2016/9/12/modernizing-legacy-code-at-the-graide-network","type":"link","tags":[{"_id":"the-graide-network"},{"_id":"programming"}]}
{"_id":"moonclerk-php-library","title":"Moonclerk Recurring Payments PHP Library","content":"A few months ago I was looking into an easy way to set up recurring payments without building all the infrastructure on top of a payment processor like Stripe, Braintree, or Paypal myself. Somewhere along the way I found [Moonclerk](http://www.moonclerk.com/).\r\n\r\nMoonclerk is a wrapper on top of [Stripe](https://stripe.com/) that allows you to set up recurring payments for users without creating all the forms, options, and API calls yourself. Obviously there are pros and cons to using another layer in your payment collection process, but I'm a lazy developer, so I decided to give them a shot. While Moonclerk has a simple read-only API for accessing your users, payments, and form, they didn't have any libraries and I wasn't able to find any PHP clients for accessing their API, so I put one together. The result is a simple wrapper that uses Guzzle to call the Moonclerk API and return PHP objects based on your request. You just need an API key to start using it, and if you're taking advantage of Composer, including the library is as easy as adding a single line to your composer.json file. \r\n\r\nObviously the library is limited as Moonclerk only offers read access to data, but if you've got suggestions for improving it, let me know. Happy coding!","createdAt":{"$$date":1430121628000},"updatedAt":{"$$date":1492259422207},"imageUrl":"https://i.imgur.com/iqgSTus.png","postUrl":"https://github.com/jobapis/moonclerk-php","type":"link","tags":[{"_id":"php"},{"_id":"open-source"},{"_id":"moonclerk"}]}
{"_id":"moving","title":"Moving","content":"This week I moved out of the tiny one-room place I've lived at since I moved to Chicago in 2012. The little studio in Uptown, Chicago was one of the few places I could afford when I came here right after college, and when I moved in I had just four bags of clothing and miscellaneous cooking supplies to my name. I've bought a few things since then, but I still managed to move out alone without much trouble.\r\n\r\n### People don't realize how much their stuff weighs them down until they have to move it all.\r\n\r\n[Living out of my car](/posts/the-journey-begins-homeless-for-a-summer) taught me to pair down to the bare essentials. I had to get rid of all my furniture, most of my cooking stuff, and a lot of my clothes when I left Knoxville to hit the road, and initially it was hard. I kept wanting to include stuff that I knew would come in handy, but kept being held back by the reality that my car only had so many cubic feet of room. It forced me into a mentality that elimination is good, even after I stopped my wandering and came to Chicago.\r\n\r\n### The key to keeping your possessions light is questioning what you \"need\" regularly.\r\n\r\nI still have things I don't strictly \"need,\" but not a lot of them. Of the things I do have, I'd be willing to part with just about all of them in a minute if I really had to, and I continually test that by letting go of things regularly. If you want to keep the number of things you own to a minimum to avoid being encumbered by them, you have to continually push yourself to let go. Keep a few personal items that remind you of your favorite people and places, but remember that you aren't obligated to save every single gift someone gave you. Having lots of things to remind you of a person, time, or place isn't any better than having just one.\r\n\r\n### Remember what is important to you.\r\n\r\nA lot of people still don't \"get\" why I have slept without a bed for the past couple years, but it truly does remind me that things do not define my happiness. It helps me remember that people are the reason I wake up, come to work, and do fun things. I'm not earning money to support a lifestyle, but rather living life in a way that supports happiness. If you don't love what you do or don't love something you own, then find a way to let it go.","createdAt":{"$$date":1437979413000},"updatedAt":{"$$date":1493155068416},"imageUrl":"https://i.imgur.com/dwQu3VE.jpg","postUrl":"http://www.karllhughes.com/?p=764","type":"blog","tags":[{"_id":"personal"},{"_id":"moving"},{"_id":"minimalism"}]}
{"_id":"moving-to-a-new-place-my-first-post-in-chiago","title":"Moving to a New Place: My First Post in Chicago","content":"Back in September of 2011, I quit my cushy internship with a large medical manufacturing company in Knoxville to work on contract with small businesses and startups. My first client was Uloop, and now, less than one year later, I'm the newest member of a six-man team based here in Chicago.\r\n\r\nI moved up here and quickly found an apartment in Uptown, about 30 minutes on the train from the main office. Within a week, I fell in love with the city and the startup environment. I work a lot - 10 to 12 hours per day, 6+ days per week - but I love what I do. With two years of engineering experience under my belt, I can safely say I've never had a job that I loved as much as this one.\r\n\r\n## So what exactly do I do?\r\n\r\nThe same thing I've been doing...just more of it. Essentially, I develop software that helps me manage writers and editors at colleges across the country. In addition, I interview and hire new editors, answer lots of questions, and set big picture goals for Uloop's newly created news organization that I lead. It's hard to believe that I just started learning to program a year and a half ago, and now I am in charge of building revolutionary software to change the college news industry...wow.\r\n\r\nHonestly, it sounds more glorious than it is - this is a startup after all. I get paid half what I would if I were an engineer at a big company, I work longer hours, and I had to move to a completely new place. Okay, the last one was kind of a plus. As much as I liked going to school in Knoxville, I knew from day one that I wouldn't settle there long. I met some awesome people there, I loved the small-town feel, and the University of Tennessee provided me with a high-quality, low-cost education. Once again, nothing against Knoxville, but I'm 23, ambitious, and taking advantage of the big city opportunities. \r\n\r\n## Why Chicago?\r\n\r\nBecoming successful as an entrepreneur is all about connections. I don't care what industry you're in, how experienced you are, or how great your business model is. You'll never make it big without connections to the right people, customers, investors, and partners. Once again, nothing against Knoxville, but the number of connections available there are small. It's a great place to start a niche business when you want a relatively small, easily penetrable market, but you don't hear of notable web-based startups beginning there...there's a reason for that.\r\n\r\n## What's next?\r\n\r\nWho knows?  I love this city, and I've just started to get out and meet people.  The most difficult thing is being far from my close friends and family. Regardless, I'm optimistic and hopeful for big things. If you ever want to come up to visit, let me know. I hope to visit Knoxville and Memphis to see old friends often, but if I don't see you, I hope that we can keep up on social networks. Best of luck everybody, thanks for all your support and help so far!","createdAt":{"$$date":1346125432000},"updatedAt":{"$$date":1487537091485},"imageUrl":"https://i.imgur.com/FJN0ZYi.jpg","postUrl":"http://karllhughes.com/?p=238","type":"blog","tags":[{"_id":"personal"},{"_id":"chicago"},{"_id":"moving"}]}
{"_id":"multiple-offers","title":"Choosing Between Multiple Job Offers","content":"Weighing multiple opportunities or offers can be challenging, nerve-racking, and difficult. Many times one company will give you an offer while you’re still in the early stages with another, making it almost impossible to compare the two. Here's how I go through the process of weighing multiple job offers.","createdAt":"2016-03-04T06:00:00.000Z","updatedAt":"2016-03-04T06:00:00.000Z","imageUrl":"","postUrl":"https://www.themuse.com/advice/an-engineers-goto-guide-for-choosing-between-multiple-job-offers","type":"link","tags":[{"_id":"the-muse"},{"_id":"programming"},{"_id":"jobs"}]}
{"_id":"my-beef-with-twitter-taking-the-engagement-out-of-social-media","title":"My Beef With Twitter: Taking the Engagement Out of Social Media","content":"*In 2012 when I wrote this post I was getting jaded with Twitter. For about a year, I had spent a lot of time having conversations and meeting people there, but by 2012, Google+ was becoming a much better outlet.*\r\n\r\n*Ironically, Google+ has faded away and Twitter is being used daily by our president to handle foreign policy. While Twitter's basic premise doesn't seem that novel anymore, I now think that its weaknesses I wrote about here are actually some of its strengths. People on Twitter don't necessarily want to engage in long conversations with real people; they want to shoot out updates and condense complex issues into 140 characters or less.*\r\n\r\n*I still use Twitter, but most of the tweeting I do is on auto-pilot because as this piece points out, there's not much room to engage with people in a very meaningful way on Twitter.*\r\n\r\n-----\r\n\r\nI started tweeting in 2011.  I think I had an account for a year or two before then, but it took me a while to get into it. When I finally did, I fell in love with it. It was a way to constantly watch and participate in conversations with people that I knew (or wanted to know), and all the latest news was breaking over on Twitter.\r\n\r\nUnfortunately, it didn't take long for the honeymoon to end, and I moved away from using Twitter very often. While I think Twitter does have some upsides (using Twitter's [search to monitor your brand](http://wagepoint.com/blog/how-to-monitor-your-brand-on-social-media) is nice), it's _not_ the best place for engaging with other people. Here's why:\r\n\r\n## Noise Control\r\n\r\nTwitter is all about spewing out everything that gets posted equally.  It doesn't matter if the post is relevant to you in any way - it still makes it into your stream if you're following someone. The only way to really combat this is to unfollow someone, which isn't ideal. There are people I want to keep up with, and allow to send me direct messages, but who I don't really care about seeing every post for.  Lists are there, but they're clunky at best, and it would take me hours to go through every person I follow in order to appropriately list them.\r\n\r\n## Spam, Spam, Spam\r\n\r\nWith only 600 or so followers, I'm _far_ from a Twitter power user, yet I _still_ receive at least one spam mention or message _every day_.  I can't imagine how bad it is for those who have 10,000 or 100,000 followers. The inordinate amount of spam and fake accounts on the network prevent honest users from being able to connect with other people. I have to take a serious look at every link that gets sent to me before clicking for fear that the next one will hold some diabolical virus. Twitter [isn't doing much about this issue](http://www.technologyreview.com/blog/mimssbits/26704/) either. You can create a new account in seconds, and it's way to easy to automate messages and mentions.\r\n\r\n## Twitter Makes it Easy to Cheat\r\n\r\nEven _real people_ I know on Twitter tend to look like spammers. While [Facebook has taken measures to limit the amount of automated posting](http://edgerankchecker.com/blog/2011/09/does-using-a-third-party-api-decrease-your-engagement-per-post/) that can be done (and Google+ allows no automated posting), Twitter seems to embrace all the spammy tools it can get. People use automated systems to gain robot followers, send spammy DM's to new followers, and Tweet incessantly about their own sites. These tools may increase the _appearance_ of activity, but it's easy to spot the difference between dishonest and honest users.\r\n\r\n## Very Little Personal Connection\r\n\r\nIt's hard to tell much at all about your followers from only a profile photo and a quick look at their last few 140-character updates. Unfortunately, that's all you have to go on if you rely on Twitter to connect with people. While I _love_ that following new people can sometimes lead to a real life meeting, it rarely does. People hide behind the wall of their computer and inundate your stream with things they _want_ you to know about them, and nothing that is real.\r\n\r\nIf social networking can ever lead to real life networking, Twitter is not the best place for it to happen. The truth is that the Internet has outgrown Twitter. Back when social networking was an infant (2008-2009), Twitter was doing something innovative and exciting. Now, Twitter is just _way behind_, and they've done very little to address the serious issues with their network since the beginning.\r\n\r\nWhat do you think?  Do you still find Twitter valuable for engaging your community?","createdAt":{"$$date":1486901521000},"updatedAt":{"$$date":1486851052629},"imageUrl":"https://i.imgur.com/e2pmwAL.jpg","postUrl":"http://karllhughes.com/?p=173","type":"blog","tags":[{"_id":"social-media"},{"_id":"twitter"}]}
{"_id":"myths-working-engineer-startup","title":"The Myths You’ll Hear About Working as an Engineer at a Startup","content":"*I first published this piece in August, 2014 to some acclaim on [Hacker News](https://news.ycombinator.com/item?id=8237020). Since then, I've joined another startup, seen a few million dollars more raised, and these myths and truths hold true. There are pros and cons to working at startups, but I still think it's a pretty low-risk proposition for a software engineer.*\r\n\r\n-----\r\n\r\nWhen I first graduated from college and went looking for a job with a startup I had no idea what to expect. I knew what I didn’t want - I had done internships with some huge corporations already - but finding honest accounts from engineers who had worked at startups was difficult. Most of the articles I found were sugarcoated accounts of the rare success stories. Many of the early employees at Google and Apple and Facebook had written books and blog posts galore, but what about the thousands of less lucky startup employees out there? What about the average startup engineer's story?\r\n\r\nAt least [three out of four startups fail](https://www.wsj.com/news/articles/SB10000872396390443720204578004980476429190), and most of them that do succeed don’t have anywhere near the exit that the household names above have had. I suspected - and have since confirmed - that the true experience of working at a startup is much more textured.\r\n\r\nSince college I’ve been working in startups at various stages and I’ve met hundreds of employees at other startups as well. I'm part of a couple startup CTO networking groups, and most of my friends have or do still work for startups. While the glorious fairy tales that come out of the most successful companies might put stars in your eyes, the numbers aren’t in your favor if you think the next big exit will likely involve you.\r\n\r\nThat said, working at a startup - even one that isn’t “successful” - can be an interesting and rewarding experience. I’ve seen the downside and I’m still doing it along with thousands of others across the country. Here are a few of the myths I’ve heard as well as some of the truths I’ve learned while working as an engineer for early stage startups:\r\n\r\n## Myth: you’re going to get a huge equity payout\r\n\r\nThe overwhelming majority of startups aren’t big financial successes. Chances are, if you come into a company early on with a bit of equity your stock will be so diluted by the time an exit comes that it won’t make up for the salary cut you took to be there. That is, if you’re lucky enough to be involved in an exit at all.\r\n\r\nIf you leave early, are let go for any reason, or are found to have violated any part of your employment agreement, you might lose all of your stock. If you go into a startup as an employee for the money, you’re going to be disappointed 9 out of 10 times.\r\n\r\n### Truth: you’ll get to set the culture, standards, and technologies used\r\n\r\nMost engineers who come into an existing organization are met with a slew of predetermined rules, established policies, bureaucratic requirements, and “best” practices that you’re unlikely to change. On the other hand, when you come into a startup, almost everything is fluid. I’ve never been part of a startup team that didn’t welcome new ideas and tools if they could be implemented quickly. You are also likely to get some input on the way future engineers are hired and the way your technology team interacts with the business team. These extra-engineering responsibilities can be tough for some to handle, but if they sound like something you’d enjoy, you’ll likely fit right in at a startup. \r\n\r\n## Myth: you _have_ to work 80 hours per week all the time\r\n\r\nThere may be times where it’s necessary to put in extra hours. I know I’ve spent more than a few long nights and weekends coding in my past three years with startups, but those are balanced out by the option to telecommute, lax vacation policies, and flexible working hours when things aren’t as busy.\r\n\r\nYou should be ready to sacrifice a bit of your free time - especially if the engineering team consists of just one or two people - but you can’t expect to sustain a grueling 80+ hour work week for long. You’ll need balance in order to avoid burnout, and all but the worst employers will recognize this.\r\n\r\n### Truth: you’ll have more freedom to choose the projects you work on and how you do them\r\n\r\nEven though you might not be required to spend every weekend at the office, it’s possible that you’ll find yourself choosing to do so anyway. Unlike engineering at a big company, startups often allow you more freedom to choose the projects you work on and how you choose to do them: Want to create the next internal service in a new language? Why not? Want to create your own hybrid framework based on standards you’ve implemented on your engineering team? Go for it.\r\n\r\nThese things would be difficult if not impossible to get done in a large corporate environment, but when teams are small, the stakes are high, and people need to move fast, you have more room to try new tools and experiment. An environment that encourages learning and experimentation keeps engineers more motivated than one that stifles its technical talent.\r\n\r\n## Myth: you have to be a full-stack rock star hacker to work at a startup\r\n\r\nEvery time I see a job listing that demands a “rock star” developer who wants to work for shit money at a no-name company, I imagine a non-technical founder on the other end who is bound to underappreciate and undervalue some poor developer who gets suckered into working for him.\r\n\r\n**“Rock star” engineers sometimes work at startups, but usually they work for big companies who can pay them twice the salary and have multiple indoor water polo pools and racquetball courts.** Engineers who work at startups aren’t necessarily hacks, but they tend to come from non-traditional backgrounds, enjoy both the business and technological sides of their work, and have a passion for the problem they’re helping to solve. You don’t have to be a “rock star” - whatever the hell that is - in order to work at a good startup, but…\r\n\r\n### Truth: you must be willing to learn and teach yourself anything\r\n\r\nYou will probably have limited access to mentors and teachers when working at a startup. Big companies put junior engineers through training programs, send them to advanced classes, and make them sit through certification tests, but you rarely see any of those at a startup. Not knowing how to do something isn’t a valid excuse. One of the best skills you can learn if you intend to work for a startup is the ability to figure out things on your own.\r\n\r\n## Myth: startups are magical machines that are more productive and groundbreaking than large organizations\r\n\r\nYou might be exposed to moments of apparent genius while you’re working at a startup, but just as often your team will mistakenly ship something that doesn’t work. **The downside to working for an organization that isn’t bogged down with bureaucracy is that there’s less stuff in place to slow down new bugs as they enter production.**\r\n\r\n### Truth: startups are constantly facing uphill battles and you’ll rarely have the resources you need to do projects as well as you’d like\r\n\r\nIt seems like startups move faster and create solutions to difficult problems more efficiently than large companies, but the truth is that they normally have a lower quality threshold than their corporate counterparts. It’s sometimes difficult to accept this as an engineer because we strive for elegant, well-tested solutions, but the pace at a startup rarely allows for 100% code coverage. If you can live with sometimes letting go of a project that is “good enough” you might be able to make it in a startup environment.\r\n\r\n## Myth: there’s a lot of risk for engineers at startups\r\n\r\nIt’s true that financial circumstances and external forces can quickly shudder a burgeoning startup, but life as an engineer at a large company isn’t a whole lot better these days.\r\n\r\nAt least in a smaller organization you’ll (hopefully) have a close enough relationship with the founders to sense that things are looking grim before the doors actually close. Corporations are as likely to sell off a department without more than a week’s notice as they are to give employees severance packages.\r\n\r\n### Truth: the work environment is fun, the connections you’ll make are invaluable, and the flexibility is unbeatable\r\n\r\nI honestly enjoy coming into work every day. In part it’s because I like and respect the people I work with, in part it’s because I face new challenges and meet interesting people all the time, and finally I enjoy coming to work because I can do it on _my_ time. I’m a morning person, so I normally come in early, take a break in the afternoon to work out, and then leave when traffic settles down a little later in the evening. Some of our team prefers working late into the night. As long as we can all get together when we need to, it’s awesome to have the flexibility to work when you work best.\r\n\r\nI’m not going to lie and tell you that being an engineer at a startup is the best job for everyone. I’m not going to tell you that it will get you rich or make your life stress-free or increase your employability, but I do believe that if you’ve got the right personality it’s far more stimulating than any other job you can find. The opportunity to pursue a cause that I’m passionate about and that improves the state of education in this country makes my job worth the occasional headache, and succeed or fail, I am just glad to be going along for the ride.","createdAt":{"$$date":1491379233000},"updatedAt":{"$$date":1491403961563},"imageUrl":"https://i.imgur.com/fnNQjYz.jpg","postUrl":"http://karllhughes.com/?p=584","type":"blog","tags":[{"_id":"startups"},{"_id":"engineering"},{"_id":"programming"}]}
{"_id":"node-docker-javascript-january","title":"Tutorial: Building Your First Node App Using Docker","content":"Since its first release in 2013, Docker has quickly become one of the hottest topics in software development, and has been adopted by both large and small companies across the world. That said, there are plenty of developers who have never gotten a chance to use Docker, or been exposed to it enough to understand its benefits. In this article, I wrote for [Javascript January](https://www.javascriptjanuary.com/), I walked through building a Node/Express app with Docker, and offer up a [small example project](https://github.com/karllhughes/node-docker-demo) to help beginners get started.","type":"link","imageUrl":"https://i.imgur.com/cVMcocl.jpg","postUrl":"https://www.javascriptjanuary.com/blog/building-your-first-node-app-using-docker","tags":[{"_id":"Nodejs"},{"_id":"Javascript"},{"_id":"Docker"},{"_id":"Tutorials"},{"_id":"Programming"}],"createdAt":{"$$date":1515763517660},"updatedAt":{"$$date":1515763517660}}
{"_id":"nola13","title":"My College Media Presentations: NOLA 2013","content":"I was invited to speak at the College Media Association's 2013 conference in New Orleans, so I wanted to publicly post my presentations for anyone who is interested. Feel free to let me know if you have questions, comments, feedback, or whatever.\r\n\r\n### Sponsored Content in College Media\r\n\r\nhttps://www.youtube.com/watch?v=PM_6x7fLQKg\r\n\r\n### Gamification of the College Newsroom\r\n\r\nhttps://www.youtube.com/watch?v=J_y7op1kPok","createdAt":{"$$date":1382399695000},"updatedAt":{"$$date":1487631183285},"imageUrl":"https://i.imgur.com/DuZ0CYs.jpg","postUrl":"https://www.youtube.com/watch?v=PM_6x7fLQKg","type":"link","tags":[{"_id":"college-media-association"},{"_id":"conferences"}]}
{"_id":"not-just-code","title":"How I Hire: It's Not Just About Code","content":"It’s hard for an engineer to ignore the allure of working for a small, agile startup—especially if you’ve spent some time in the corporate world. Startups often provide an opportunity to be more involved the overall business, as well as less bureaucracy and a more flexible work environment.\\n\\nThat said, the engineering skills and personality traits that made you successful in a more traditional career path aren’t necessarily the ones that will entice a startup to hire you.","createdAt":"2014-12-10T06:00:00.000Z","updatedAt":"2014-12-10T06:00:00.000Z","imageUrl":"","postUrl":"https://www.themuse.com/advice/7-things-startups-want-in-engineers-besides-knowing-how-to-code","type":"link","tags":[{"_id":"the-muse"},{"_id":"programming"},{"_id":"hiring"},{"_id":"jobs"}]}
{"_id":"on-giving-thanks","title":"On Giving Thanks","content":"It's way too easy to skate through life expecting certain things from other people and not mindfully giving thanks. I'm as guilty of it as anyone, and it's not just something we should be paying attention to around the holidays. It really should be a yearlong, daily thing. Expressing gratitude [can actually make you happier](http://www.health.harvard.edu/newsletters/harvard_mental_health_letter/2011/november/in-praise-of-gratitude). \r\n\r\nRather than write more I'm just going to leave you with a song that makes me grateful for happiness, sadness, life, and death. Thank you, everybody!\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lPXWt2ESxVY\" frameborder=\"0\" allowfullscreen></iframe>","createdAt":{"$$date":1417420839000},"updatedAt":{"$$date":1492014535042},"imageUrl":"","postUrl":"http://www.karllhughes.com/?p=649","type":"blog","tags":[{"_id":"personal"}]}
{"_id":"on-leaving-uloop-for-packback-books","title":"On Leaving Uloop for Packback Books","content":"This month marked the end of my first startup experience and the beginning of my next one. I decided to leave Uloop after two years as their director of news, and take a position with Packback Books as their fourth full time team member and lead software engineer. Parting ways with my friends and colleagues at Uloop was a difficult decision, but I feel it was the right one for me at this point in my career. Leaving a job that I legitimately liked, compensated me fairly, and gave me the freedom to innovate may seem a bit crazy, but I have my reasons.\r\n\r\n### 1\\. It was time\r\n\r\nAs I mentioned, I have been with Uloop for over two years now, and before that I was essentially pursuing the same goals with my own startup, MyUdaily. I hope to always pursue challenging and exciting goals like the ones I had at Uloop, but after changing my approach several times, I realized that I may not be the right person to change college news yet. It's not to say that I look at my work with Uloop as a failure, but rather that it was a hugely important learning experience that brought me eons closer to my life goals than any other job could have done. I genuinely hope that my replacement and the rest of the team at Uloop will make it big, even if it means that I missed a golden opportunity by ducking out early.\r\n\r\n### 2\\. Connecting with Chicago\r\n\r\nUnlike Uloop, Packback's core is here in Chicago, and while I don't know if I'll stay here forever, I do know that I want to align myself with stronger connections in the city. I firmly believe that the most important thing you can do in your career is build connections, and if I'm going to be in a great city like this, I want to take full advantage of the opportunity.\r\n\r\n### 3\\. Strengthening my niche\r\n\r\nMy position with Uloop was a whole lot of everything. It gave me the opportunity to see how almost every piece of a web-based business works, and it allowed me to switch hats from developer to project manager to editor almost at will. That alone made the experience worth it, but I've reached a point in my life where I feel that I need to become a specialist more than a generalist. This opportunity with Packback will allow me to use my technical background, stretch my knowledge of web development, and manage people across the globe while staying in my niche: college publishing technology.\r\n\r\n### 4\\. The team, timing, and needs were aligned\r\n\r\nFinally, I can't say enough about the fortuitous timing. I met Packback's founder, Kasey Gandham, after a Technori pitch event last spring, and after grabbing coffee with him, I immediately knew that I wanted to keep him on my radar. At that point, they were still raising their first few dollars to make Packback a reality, and after a few months they had reached their goals. Kasey got in touch with me, and from the moment we began talking, I was ready to go. They needed a technical person who knew the college market, they had great connections with their target customers, and they needed to get going immediately. While there are plenty of startups in Chicago, finding one so well-aligned with my skills and experience and also had the funding to pay a living wage was incredible. Here's a little from Packback's founders, Mike and Kasey, who I now work with side-by-side every day. Enjoy!\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JBhgb44P_aI\" frameborder=\"0\" allowfullscreen></iframe>","createdAt":{"$$date":1386304290000},"updatedAt":{"$$date":1491314937244},"imageUrl":"https://i.imgur.com/EFSTrzT.png","postUrl":"http://karllhughes.com/?p=516","type":"blog","tags":[{"_id":"packback"},{"_id":"personal"}]}
{"_id":"one-thing-that-separates-successful-people-from-failures","title":"One Thing That Separates Successful People From Failures","content":"*This post was originally published in March of 2012, and despite the overly inspirational tone, I've decided to republish it in its original form. I don't write like this much anymore, so it's been interesting to go back and read these older posts.*\r\n\r\n*This is being republished as part of my [2017 daily publishing project](https://www.karllhughes.com/posts/2017-writing-goal).*\r\n\r\n-----\r\n\r\nRight now, I'm working on a series of posts for Uloop that [highlight startups on the East Coast](http://tennessee.uloop.com/news/index.php/1129-ecss). Over the past two weeks, I've gotten to meet with almost a dozen entrepreneurs, startup companies, filmmakers, and all-around successful people and it's amazing to hear that _all of them_ mention a single trait that separates successful students, employees, and entrepreneurs from those who are not: **Initiative.** \r\n\r\n## What is \"initiative\"?\r\n\r\nThe word can be phrased many different ways. Some call it _hustle_; some call it _drive_; some call it _people who just jump out there and do it_. Regardless of the verbiage, the principle is the same. **Successful People Don't Make Excuses. They _Try_ to Make Things Happen.**\r\n\r\nThe key here is that they _have to try_, not that they instantly succeed. Thomas Edison is a perfect example of this. The man tried hundreds (and maybe thousands) of materials in his light bulb before settling on something that worked. If he had spent years researching and learning instead of just getting out there and doing, do you think he would have succeeded?\r\n\r\n> I have not failed. I've just found 10,000 ways that won't work. - [Thomas Edison](http://www.brainyquote.com/quotes/authors/t/thomas_a_edison.html)\r\n\r\nEvery entrepreneur I have talked to has experienced at least some failures, but that's not what defines them. You know why? Because they had the initiative to _keep trying_. Any dream worth pursuing is a dream worth _fighting for_.\r\n\r\n## \"But what if I'm not ready to try?\"\r\n\r\nMost people I talk to have a dream. Most people I talk to also fail to ever pursue it. They give themselves excuses like \"when I get my next degree, I'll be ready,\" instead of _committing to it now_. They don't realize that if they simply _took the initiative_ and started pursuing their dream today, they _could_ make it happen. \r\n\r\n## \"But taking initiative is _different_\"\r\n\r\nPeople who take initiative are rarely immediately rewarded.  When I started my first business, I spent countless hours building and learning things that never made me a dime. In fact, I lost over $2000 building a blog that never made $100 in advertising revenue. People thought it was cool that I was trying, but they didn't want to do it, \"that sounds like _a lot_ of work...and you don't even make money?\" was their response. They're right. In the short term, taking initiative seems stupid.  It takes work, it will stress you out, you will pass up opportunities, and you may even get laughed at. \r\n\r\n## Final challenge: do something different\r\n\r\nI want all of my readers to find the joy that I have from _being different_.  I want to leave you with a small challenge: _do something different today_. Something that makes you uncomfortable, something that makes people laugh at you, something that opens you up to vulnerabilities. When you do, let me know about it.","createdAt":{"$$date":1486556563000},"updatedAt":{"$$date":1486511264731},"imageUrl":"https://i.imgur.com/ser1iv0.jpg","postUrl":"http://karllhughes.com/?p=93","type":"blog","tags":[{"_id":"inspiration"},{"_id":"success"},{"_id":"entrepreneurship"}]}
{"_id":"one-year-conference-summary","title":"My First Year Speaking","content":"For almost a year now I've been applying for (and speaking) at tech conferences. Midway through 2017, I made a goal for myself to speak at at least four conferences in a year, and I'm really happy to have accomplished that goal.\r\n\r\nAlong the way, I've run into many other developers who asked me about how I got into speaking and what my process was like, so I wanted to put this post together as a resource for prospective tech conference speakers. Whether you're just starting your career out or you're retired, you can _definitely_ speak at a conference if that's something you want to do. Here's how I did it:\r\n\r\n## My Process\r\nA lot of smart people with good advice will tell you to be selective and carefully craft a proposal for only a few conferences that are a great fit for your talk(s). That's not how I did it.\r\n\r\nHonestly, I didn't know enough about my talks, the audiences I was addressing, or how difficult it would be to get accepted to be picky, so I figured I would just cast a wide net to start out. First, I created a [huge list of conferences](https://www.karllhughes.com/posts/tech-conference-cfps), set up a notification system for myself ([you can use it too](https://www.cfpland.com/)), and started submitting 1-5 applications every week. The conferences I chose were mostly developer-focused, but a few were management or general technology oriented events.\r\n\r\nI came up with and pitched three different talks. One was pretty well defined as I had given it at bootcamps several times in 2016 and the other two were rough ideas without slides. I wrote blog posts for each of them (to show conference organizers that I knew the topic), and as they were accepted, I did each of the talks at local meetups to prepare. That forced me to have slides ready long before the actual event, and it allowed me to get some feedback from a friendly audience before going on the road. I also spent a lot of time practicing. By the time I gave a talk at a conference, I had typically given it in a mirror at least 20 times.\r\n\r\n## Results\r\nI submitted at least one talk to 43 conferences, was accepted at 7 of them, I declined 2 because of scheduling conflicts, and 1 was cancelled. That means that I spoke at 4/43 conferences I applied for, a rate of just under 10%. I didn't really have expectations for this first year, but since my approach was not very focused, a 10% speaking rate and 16% acceptance rate seems like a good start.\r\n\r\n## Lessons Learned\r\nNow that I have a baseline acceptance rate, I met my goal of speaking at 4 conferences, and I got to refine a few talks, here's what I would tell anyone considering speaking at this point:\r\n\r\n- **You don't have to be an expert in anything in particular to speak on it.** Working for startups, I don't have the luxury of being an expert in anything, and I'm sure that at some of my talks, there were people in the room who knew much more about the topic than I did. The thing is, people who are too experienced in a topic often have trouble bringing it down to a level that others can grasp within a 30 to 60 minute conference talk.\r\n- **Prepare and pick topics you are passionate about.** You're going to get sick of giving your talk. It's the same thing over and over and over again for months as you prepare, so make sure you pick something that you're very interested in and willing to focus on for months.\r\n- **Testing is a topic that conferences want covered, but few speakers are doing.** My most accepted talk was the one I've been doing on testing distributed systems. I never mark it as my best, but as I've gone to a number of conferences this year, I've realized that there are precious few speakers out there doing talks about software testing. If you want to get started, you might get the most success trying for something within this niche.\r\n- **It's okay to turn down conferences.** - Sometimes you apply for a conference and then your schedule changes. It's okay, and organizers understand. They have to reject hundreds of applicants every year, so they can take the sting of a little rejection now and then. That said, make sure you decline offers quickly so the organizers can fill your spot with an alternate.\r\n- **Be ready for conferences to be canceled.** This surprised me quite a bit, but three conferences I applied for (including 1 I was accepted at) were canceled. A couple were new conferences that just couldn't get the interest needed, and one gave no explanation. So, don't book your flights too early if they're non-refundable!\r\n- **Not every speaking gig is free.** While most conferences will give speakers a free ticket and hotel room, some (especially regional ones) may make you pay for your own travel. If this is going to be a problem, let the organizers know up front. I had one conference award me a grant to help pay for travel even though they typically don't offer it.\r\n \r\nWhile applying to over 40 conferences in a year was a great experience, I'm going to be pickier in the 2018. I love traveling, but doing one conference per month is probably too much for me at this point, so I'm hoping to take it down to 1-3 per year and will try to focus all my talks on a single niche.\r\n\r\nIf you've got other resources for new conference speakers, I'd love to see them. I'm still learning a ton about this process and trying to become a better speaker, so [find me on Twitter for more](https://twitter.com/karllhughes).","type":"blog","imageUrl":"https://i.imgur.com/mo5k8d6.jpg","postUrl":"","tags":[{"_id":"conferences"},{"_id":"speaking"}],"createdAt":{"$$date":1523214938972},"updatedAt":{"$$date":1523214938972}}
{"_id":"packback-1776-challenge-cup","title":"Packback at the 1776 Challenge Cup","content":"Last week, Packback was invited to pitch at the [Challenge Cup](http://challengecup.1776dc.com/) event hosted by 1776 and held at 1871. After the first round of one-minute pitches, we were invited back up to be one of two education startups to give our full pitch in five minutes.\r\n\r\nNormally Mike and/or Kasey would have handled this, but due to some scheduling conflicts with investor meetings, I got asked to fill in. I haven't done much public speaking since I was pitching my startup flop back in college, but it went well, and we ultimately won the education category. In May, we'll be presenting again in the finals in DC, and will have a chance to meet with influential investors and politicians in the area.\r\n\r\n[Summary of the event and winners from the Chicago Tribune](http://www.chicagotribune.com/bluesky/originals/chi-challenge-cup-1776-1871-bsi-20141030-story.html).","createdAt":{"$$date":1415001631000},"updatedAt":{"$$date":1491748686066},"imageUrl":"","postUrl":"http://youtu.be/YYez-o0qgH8","type":"link","tags":[{"_id":"packback"},{"_id":"presentation"}]}
{"_id":"packback-engineering","title":"An Update on Engineering at Packback","content":"As I enter my second full year of working with [Packback](http://www.packbackbooks.com), I can say that it's already been an exciting and challenging experience. When I came in on my first day, there were five offshore developers dragging files onto two servers with absolutely no discernable workflow, coding standards, or version control system.\r\n\r\nThe first few months were a free-for-all, but I learned a lot about [managing outsourced resources](http://www.karllhughes.com/2014/risk-of-offshore-outsourcing/), and some of the goods and bads associated with going that route in software development.\r\n\r\nIn Spring of 2014, we had closed a round of funding and knew that our first task was to expand the engineering team. [Steven Maguire](http://stevenmaguire.com/) was my first choice of the potential engineers that we looked at, and he soon came onto our team as our Head of Engineering. Working with Steven was one of the best learning experiences of my career.\r\n\r\nComing into my job with Packback, I wasn't sure that I wanted to be a software engineer at all, but Steven gave me an appreciation for the intricacies of a well-designed system. I learned that a big application doesn't have to be a big headache, that an organized product planning cycle makes all the difference, and that good software takes time and a level head to build. I wish I could work under Steven for another year because I feel like I still have much to learn from his experience.\r\n\r\n## But things can change quickly in a startup\r\n\r\n[Engineering in a startup can be quite a challenge](http://www.karllhughes.com/2014/myths-working-engineer-startup/), even under the best circumstances. Steven moved on from Packback last month, and as of this week I've taken over his responsibilities as the leader of our team of four engineers. Coming into a role like this without a ton of experience is a challenge, but I've got a great team to work with, and thanks to Steven, much of the technical architecture questions that I had a year ago have since been answered.\r\n\r\n## In short, we've got a great trajectory in place, so it's my job to keep it together and keep the momentum up\r\n\r\nPackback has matured a lot since I joined 15 months ago - largely thanks to Steven's influence - and I'm extremely excited and honored to be able to help out by leading the engineering team into 2015. There are still a lot of challenges ahead, but I am confident that we're ready to take them on. **Great things don't happen because of one person, but there's no limit to what a great team can accomplish.**","createdAt":{"$$date":1423029610000},"updatedAt":{"$$date":1492170702730},"imageUrl":"https://i.imgur.com/kir3G3s.jpg","postUrl":"http://www.karllhughes.com/?p=682","type":"blog","tags":[{"_id":"packback"},{"_id":"personal"}]}
{"_id":"packback-used-textbook-prices","title":"Textbook Prices: Packback's Open Source Price Comparison Tool","content":"Like a lot of startups, we rely heavily on open source software at Packback, and while it's fun to be able to spin up a project quickly with Laravel or Angular, we've long been looking for ways to give back to the open source community. This summer, we've released [a  few small open source projects](https://github.com/packbackbooks), but the one I'm most excited about for the future is our open source [textbook price collector](https://github.com/packbackbooks/textbook-prices).\r\n\r\n## About Packback's Price Comparison Pages\r\n\r\nWe have a catalog of over 1 million textbooks. While our primary business is renting digital copies of those textbooks, for students whose books we don't have or who really want to get their hands on a physical book, we offer a feature called price comparison.\r\n\r\nWhenever someone loads a product page, we send an asynchronous request to each of the used textbook resellers in our affiliate network. As the prices load, we show them on the product page, and when a student selects a price from our list, we make a cut of the sale and the student saves money. It's truly a win-win.\r\n\r\n## Open Sourcing Textbook Price Access\r\n\r\nOne of the big challenges in getting prices from each of the used textbook retailers is dealing with their APIs. Much like the [job board standardization project](/posts/job-board-api-1-release/) I've been doing on the side, Packback needed a way to standardize the data from each of these retailers so that requesting, receiving, and delivering prices to the user was pain-free. As of today, the textbook price collector works with the following providers:\r\n\r\n*   AbeBooks\r\n*   Amazon\r\n*   BookRenter (via CommissionJunction)\r\n*   Cengage (via CommissionJunction)\r\n*   Chegg\r\n*   Skyo (via CommissionJunction)\r\n*   ValoreBooks\r\n\r\n_To check out our open source textbook price collector, [click here](https://github.com/packbackbooks/textbook-prices)._\r\n\r\nThere's a lot of cool stuff that could be done with this open source project, so it's very exciting to be able to release it to the public. \r\n\r\nIf you've got a PHP project and you'd like to start using the textbook price collector, you can include it via composer: \r\n\r\n```\r\n\"require\": { \"packbackbooks/textbook-prices\": \"~0.1.3\" }\r\n```\r\n\r\nNext, create an instance of the class for the provider you're accessing and give it some ISBNS:\r\n\r\n```\r\n$isbns = [ // ISBNS ];\r\n$abeBooks = new AbeBooksPriceClient([ 'access_key' => ]);\r\n$prices = $abeBooks->getPricesForIsbns($isbns);\r\n```\r\n\r\nBesides comparing prices between books, you could use this project to collect historic price data from different retailers, compare used prices with new prices on textbooks, compare local and international editions, and much more. We're excited to see what you might build with this, and if you're interested in contributing or you need help using the project, feel free to drop me a line via [Twitter](http://www.twitter.com/karllhughes).","createdAt":{"$$date":1440713429000},"updatedAt":{"$$date":1505263522047},"imageUrl":"https://i.imgur.com/XptxLBtl.png","postUrl":"","type":"project","tags":[{"_id":"packback"},{"_id":"programming"},{"_id":"open-source"}]}
{"_id":"passwordless-login","title":"Why I Built a Side Project Using a Passwordless Login","content":"I don't know if this format is right for every application. Here are my justifications for implementing a passwordless login system on JobsToMail, but I look forward to hearing your thoughts as well.","createdAt":"2016-11-02T05:00:00.000Z","updatedAt":"2016-11-02T05:00:00.000Z","imageUrl":"","postUrl":"https://www.linkedin.com/pulse/why-i-chose-passwordless-login-my-latest-project-karl-l-hughes","type":"link","tags":[{"_id":"programming"},{"_id":"jobapis"}]}
{"_id":"peopleware","title":"Peopleware: All Technology Problems are Really People Problems","content":"*Two years ago I read Peopleware for the first time and wrote this blog post. That book was the most inspiring engineering leadership material I had read, and it's still definitely in my [top 5 recommendations](/posts/reading-for-engineering-managers).*\r\n\r\n-----\r\n\r\nOne of my big goals this year is [to read more](/posts/trello-as-a-reading-list), and while I've been mostly trying to stretch myself with fiction, I can't help cracking the spine on a few business and personal development books as well.\r\n\r\nOne of my favorites so far has been  _[Peopleware: Productive Projects and Teams](http://amzn.to/2nMhpkp). _While the majority of the book is filled with practical examples and data-driven analysis, the thesis really hit home for me: \r\n\r\n**People - not technology - are the reason that software projects (and by extension, software startups) live and die.**\r\n\r\nThis is my [first year managing a software engineering team](/posts/packback-engineering/), so I know I have a ton to learn, but **I've started to suspect that my job is more about handling diverse desires, goals, and issues between people than it is to manage the technology choices we as a team make.**\r\n\r\nThe nice thing about software is that it is predictable. Computers do what you expect them to and they do the same thing every single time. While creating software that is sustainable, testable, and extensible is no doubt challenging (one of the other books I'm reading now is _Clean Code_), the technology portion of software development is at least predictable. You can spend a few months learning patterns that make code workable most of the time, but figuring out how to make people work together is a lifelong exercise.\r\n\r\n## So what's the book about?\r\n\r\n_Peopleware_ starts out with an introduction to the authors and the methodology taken in crafting the book. Even if some of the examples and advice given later seem a bit too idealistic to implement, you have to appreciate the authors' data-driven approach to writing it. In the first few chapters, you get the idea that whether you're a software manager, project manager, or business founder, your job relating to products is more about managing people than managing technology.\r\n\r\nFrom this central point, _Peopleware_ branches into a series of real-world examples based on thousands of surveys the authors have performed at companies around the world. They cover topics ranging from the physical environment that engineers inhabit to the need for deadlines to creating friendly competition between developers. As a new manager, I immediately got inspired, but simultaneously knew that some pieces of this puzzle were far out of my control. For example, I'm not going to be able to move the engineering team at Packback off into a separate wing of the building because we (A) don't own a building and (B) don't have the money to buy one.\r\n\r\n### This book is essentially about project and team management\r\n\r\nCreating an effective team is about knowing your people and letting them slide naturally into a role in which they thrive. No manager can get good performance out of people who are doing work they find uninteresting and tiresome, but bad managers have a tendency to look at engineers as man-hours on a timesheet: we estimate this project will take 120 working hours, but we only have one engineer, so let's hire two more tomorrow and get the project done in a week.\r\n\r\nAnyone who's even scratched the surface of engineering management knows that you can't ramp up software developers like that, and that you're most effective engineers will likely churn out exponentially more work at better quality than a recent graduate who's just getting his feet wet. Even if you hired all expert level programmers, you can't burn people out by pushing them to do work they aren't interested in doing. The reality of software projects is that the work is challenging and ever changing, so you have to find and retain people who want to learn. \r\n\r\nMore than anything, people are knowledge; not just knowledge of the technology, but knowledge of each other. The longer a well-working team is together, the more seamless and natural their work becomes. It's the act of keeping high quality teams together that becomes the goal of the engineering manager. While the methods for doing this are different depending on the company and people involved, _Peopleware_ offers enough examples to be practically applicable in some way to almost any situation.","createdAt":{"$$date":1492153236000},"updatedAt":{"$$date":1492171375531},"imageUrl":"https://i.imgur.com/ceLqlH1.png","postUrl":"http://www.karllhughes.com/?p=717","type":"blog","tags":[{"_id":"books"},{"_id":"startups"},{"_id":"programming"}]}
{"_id":"php-architect-9-2017","title":"True Tales of Building PHP Microservices Featured in php[architect] Magazine, September 2017","content":"I've written a few blog posts (and submitted several conference talk proposals) related to the topic of building microservices in PHP. It's been great to refine my story on this topic so much over the past couple years, and most recently, I had a piece published in [php[architect] magazine](https://www.phparch.com/magazine/2017-2/september/) on the topic of microservices and PHP:\r\n\r\n> Microservices have generated a lot of buzz lately. Large companies like Amazon are using them to help segment their code bases and manage software at scale, while smaller startups are using microservices to add new features faster. PHP is a great language for building them; we have several lightweight frameworks available, building and deploying a PHP application is really fast, and it’s a language widely known across the world. In this piece, I will focus on two real-world applications and how teams I’ve led have used PHP microservices to improve the software products we built incrementally.\r\n\r\nThis is the first time I've had a technical article published in print, so it stands as a personal milestone.","type":"link","imageUrl":"https://i.imgur.com/o7JYvdz.png","postUrl":"https://www.phparch.com/magazine/2017-2/september/","tags":[{"_id":"php"},{"_id":"programming"},{"_id":"php[architect]"},{"_id":"microservices"}],"createdAt":{"$$date":1504731221506},"updatedAt":{"$$date":1507333540228}}
{"_id":"php-client-government-jobs-api","title":"A PHP Client for the Government Jobs API","content":"A while back I used the [Government Jobs API](http://search.digitalgov.gov/developer/jobs.html) for a sample project at a class I was teaching at Startup Institute. That was in Ruby, and they already included a link to their own [Ruby library for the API](https://github.com/GSA/jobs_api), so I figured I would make one in PHP - my language of choice for most things.\r\n\r\nI haven't made my own API client for anything open source, but I've been doing quite a bit of it for our internal APIs at Packback, so this was a really quick little exercise. I used [Guzzle](http://guzzle.readthedocs.org/en/latest/) to handle the HTTP requests, and composer to pull the whole thing together. I still have to write tests, and I haven't included all the available methods for their API yet, but that's the beauty of open sourcing things.\r\n\r\n### 2017 Update\r\nSince publishing this, I've actually built a pretty large collection of open source job board clients. They're now all part of a [Github organization called JobApis](https://github.com/jobapis), and you can find the Government Jobs Client on Github as well.","createdAt":{"$$date":1418198425000},"updatedAt":{"$$date":1491748985352},"imageUrl":"","postUrl":"https://www.jobapis.com/open-source/govt/","type":"link","tags":[{"_id":"jobapis"},{"_id":"php"}]}
{"_id":"php-docker-ci","title":"Continuous Integration and Deployment for PHP Command Line Apps","content":"A few weeks ago I wrote a post for Codeship outlining our method for building a [PHP command line application with Docker](https://blog.codeship.com/building-a-php-command-line-app-with-docker/). Today, the second part of this series was published: [Adding CI and CD to a PHP Command Line App With Docker](https://blog.codeship.com/adding-ci-and-cd-to-a-php-command-line-app-with-docker/).\r\n\r\nIn the tutorial, I'll show you how to use Codeship to build and test your Dockerized PHP application and then deploy it to a server with Docker Compose. I've been continuing to refine this process (I know most people prefer to use a container registry), but for basic purposes this works. Check out the article on [Codeship's blog](https://blog.codeship.com/adding-ci-and-cd-to-a-php-command-line-app-with-docker/) and let me know what you think.","type":"link","imageUrl":"https://i.imgur.com/U4bqYOy.png","postUrl":"https://blog.codeship.com/adding-ci-and-cd-to-a-php-command-line-app-with-docker/","tags":[{"_id":"programming"},{"_id":"codeship"},{"_id":"php"},{"_id":"docker"}],"createdAt":{"$$date":1494948916148},"updatedAt":{"$$date":1494948916148}}
{"_id":"php-docker-cli","title":"Building a PHP Command Line App with Docker","content":"At The Graide Network, we needed to automate a bunch of reminder emails and text messages being sent to our users. Every hour, we wanted to go into the database and find any reminders that needed to be sent, then queue up jobs to send each of them. \r\n\r\nHere’s what I go through in this tutorial:\r\n\r\n- Setting up a Laravel PHP command-line application\r\n- Writing a cron job to run our command every hour within a Docker container\r\n- Adding an acceptance test to verify that our command-line job works\r\n\r\nIn the second part of this tutorial, I'll cover deploying the application using [Codeship](https://codeship.com/) and [Docker](https://www.docker.com/).","type":"link","imageUrl":"https://i.imgur.com/N8f725d.png","postUrl":"https://blog.codeship.com/building-a-php-command-line-app-with-docker/","tags":[{"_id":"docker"},{"_id":"programming"},{"_id":"php"}],"createdAt":{"$$date":1493741272628},"updatedAt":{"$$date":1493929876074}}
{"_id":"php-job-search-api-clients","title":"Creating Standards for Job Search API Clients in PHP","content":"_Since publishing this, I've actually built a pretty large collection of open source job board clients. They're now all part of a [Github organization called JobApis](https://github.com/jobapis). Much of this post is now outdated, so if you run across it and want to know the latest state of this project, head over to [www.JobApis.com](https://www.jobapis.com/) to learn more._\r\n\r\n-----\r\n\r\nI've been playing around with several job search API's for the last year as a part of a personal research project. Basically I wanted to run a search query on several job board sites and receive a standard result. I decided to start by investigating 7 job board APIs. I eventually created a PHP API Client for each.\r\n\r\n## The problems\r\n\r\nAs you start reading the documentation on these projects, you'll quickly realize that there is very little standardization in the world of job board APIs. For my project, I needed to attack the following problems:\r\n\r\n1.  Every job board's API demands different request parameters\r\n2.  Ever API returns a different object; some will only do XML, some JSON, and the names of fields can be all over the place\r\n3.  Some require API/Publisher keys\r\n4.  Some have libraries, some don't; very few have good ones in PHP\r\n5.  Even if there are libraries, they still return non-standard results so you can't compare one with another\r\n6.  Many of the PHP libraries are outdated, and don't take advantage of stuff like [Composer](https://getcomposer.org/) which makes it super easy to include in a project\r\n\r\n## The solution\r\n\r\n### 1\\. Standardizing jobs and a jobs collection\r\n\r\nIn order to easily save jobs to a database or even compare jobs from more than one source, the results from the job search APIs needed to be standardized. I started by creating a [JobsCollection](https://github.com/karllhughes/jobs-objects/tree/master/src/Jobs/Collections) class that is designed to contain a collection ([like an array, but better](http://www.sitepoint.com/collection-classes-in-php/)) of jobs along with some common attributes related to the source and query made to achieve these results. I also wanted each job within each collection to be standardized, so I created a [Jobs class](https://github.com/karllhughes/jobs-objects/blob/master/src/Jobs/Job.php) that gives each job listing a set of standard attributes. _An example of a Jobs object returned from the Indeed API_ Finally, I wanted each API client to implement a standard set of methods, so I created an [interface to serve as the contract for these API clients](https://github.com/karllhughes/jobs-objects/blob/master/src/Jobs/Interfaces/JobsClientInterface.php). This step isn't 100% necessary, but I figured that in case I came back later to add more API clients for more job boards, it would help me ensure that each one was built similarly. This [collection of classes is on packagist](https://packagist.org/packages/karllhughes/jobs-objects) so that I could include it in each client easily.\r\n\r\n### 2. Creating PHP API Clients for each job board\r\n\r\nI created a project for each of the APIs and added them to Github. I'm continuing to add to this collection of job search APIs. You'll want to use the Version 2 releases of these clients (I'll merge them into master soon) because the Version 1 releases are missing the Jobs Collection standardization that I implemented later. I'll probably write a blog post for each later, but here's the basic process: First, I set up a Provider that is used to instantiate the client and job object. Laravel introduced me to dependency injection in PHP, so while my implementation is rather primitive, it at least allows me to unit test the client without difficulty. Next, I created the Client.php file. This handles all the basic methods needed to make API calls and returns the standardized job collection. Each API is different, but the process is pretty much the same for all of them:\r\n\r\n*   Create a request URL including your API key, publisher id, etc.\r\n*   Add query parameters for the keyword, location, page, count, etc.\r\n*   Make the request (I used Guzzle to handle that part)\r\n*   If the response is valid, send it to the Transformer and return the results\r\n\r\nThe Transformer.php takes the non-standard output from each API and matches the attributes up to standard attributes on each Job object. These objects are added to a collection in the Client and then returned.\r\n\r\n### 3. Examples and Demo\r\n\r\nEach project has a folder of examples and a few unit tests so if you'd like to dissect the code or use the libraries yourself that can be your guide.\r\n\r\n### 4. Next steps\r\n\r\nIf you'd like to contribute or you have feedback or questions, [just let me know](mailto:khughes.me@gmail.com).","createdAt":{"$$date":1427695239000},"updatedAt":{"$$date":1491749348781},"imageUrl":"","postUrl":"http://www.karllhughes.com/?p=710","type":"blog","tags":[{"_id":"jobapis"},{"_id":"php"}]}
{"_id":"php-open-source-checklist","title":"My PHP Open Source Project Checklist","content":"Open source software is becoming the norm, and not just for small companies, indie developers and startups. [78% of companies](http://www.zdnet.com/article/its-an-open-source-world-78-percent-of-companies-run-open-source-software/) are using open source software, and with [PHP being the most widely-used server-side programming language](https://w3techs.com/technologies/overview/programming_language/all), we need high quality, well built open source PHP projects. I've been working on several open source packages for both the [JobApis](https://github.com/jobapis) project as well as a couple [small projects](https://bitbucket.org/account/user/thegraidenetwork/projects/OS) for my team at The Graide Network in the past few months, and it's gotten me thinking about what a good open source PHP project needs. A project with great, clean, readable code is nice, but it's not really usable without all the other things that make a good open source project including tests, documentation, a license, etc.\r\n\r\nI would love to get feedback on this list from other devs, and I have to pass along credit for the ideas here. I learned about most of these items from PHP packages created by [the PHP League](https://github.com/thephpleague) and my friend (and League member) [Steven Maguire](https://twitter.com/stevenmaguire). From my experience working with open source packages, contributing to a few, and creating several, here's the list of things I have found most important when creating a high quality open source PHP project:\r\n\r\n### 1. Host the repository on Github\r\n\r\nI've been using Bitbucket at The Graide Network, but I have to say Github is [far superior for open source projects](http://blog.takipi.com/bitbucket-vs-github-its-more-than-just-features/).\r\n\r\n### 2. Write a quality Readme.md file\r\n\r\nThere are a lot of great [Readme file examples out there](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2), but I like to include the following sections on my projects:\r\n\r\n*   Intro\r\n*   Badges\r\n*   Installation instructions\r\n*   Usage/examples\r\n*   Testing policy/instructions\r\n*   Links to a contributing.md, license.md, and changelog.md file\r\n\r\n### 3. Include a Changelog.md file\r\n\r\nThe Changelog file is a short summary of the updates made in every version released. Use semantic versioning (see below), and if you've never written a changelog, here's a [great example of one](http://keepachangelog.com/en/0.3.0/). Make sure you update this file _for every release_. It's easy to forget until it becomes a habit.\r\n\r\n### 4. Document guidelines for contributing\r\n\r\nI like using a Contributing.md file so that Github shows it to people when they create issues or pull requests. Here's a good example from the [PHP League](https://github.com/thephpleague/skeleton/blob/master/CONTRIBUTING.md).\r\n\r\n### 5. Choose an open source license\r\n\r\nThis usually seems unimportant for brand new packages, but as soon as your project gains some traction, it's a huge deal. Companies using your project may or may not be able to depending on the license you choose. Here's a no BS comparison of [popular open source licenses](http://choosealicense.com/licenses/).\r\n\r\n### 6. Add a code Linter, check for PSR standards\r\n\r\nSquizlabs has [an excellent code sniffer](https://github.com/squizlabs/PHP_CodeSniffer/wiki) that will let you check your code against PSR-2 (and other) standards sets. This is really helpful once you have a few contributors and each may have their IDE set up differently. [Tabs vs. spaces is a real debate](https://www.jwz.org/doc/tabs-vs-spaces.html).\r\n\r\n### 7. Write unit and integration tests\r\n\r\nIf you haven't gotten to write many tests in your projects at work then open source projects is a great time to get introduced to testing in PHP development. I've [written a bit about testing before](https://www.karllhughes.com/2016/writing-tests/), but take my word, it's important and will save you a ton of headaches in the long-term.\r\n\r\n### 8. Use Travis and Scrutinizer\r\n\r\nThe pairing of [Travis-ci](https://travis-ci.org/) and [Scrutinizer-ci](https://scrutinizer-ci.com/) allows you to run your open source project's tests and get a code quality score for free. This stuff would cost hundreds of dollars per month on closed-source software, so it's awesome to take advantage of these tools on your open source projects for free. Here's a tutorial on why and how you can set [Travis and Scrutinizer up](https://www.airpair.com/continuous-integration/posts/your-code-sucks-travis-and-scrutinizer-ftw).\r\n\r\n### 9. Include a composer.json file, release the project on Packagist\r\n\r\nFor some reason a lot of good PHP developers I know are intimidated by releasing their open source projects on Packagist, but Composer is the standard in PHP package management, so it's really helpful for gaining users. It takes [about 15 minutes to release your first package](http://blog.jgrossi.com/2013/creating-your-first-composer-packagist-package/) (maybe less if you're a fast typer), so don't fear it.\r\n\r\n### 10. Use semantic versioning and Github's release tags\r\n\r\n[Semantic versioning](http://semver.org/) is another great tool for open source developers. If done correctly, it shows users of your package how stable the project is, whether or not updates will break their system, and lets them set rules about when to update or not update the project. Semver works nicely with git tags which are reflected in Githubs \"release tags\" feature. I like to copy the lines from the Changelog into my Github tag body as you can see in the [jobs-common project.](https://github.com/jobapis/jobs-common/releases/tag/2.0.0-beta)\r\n\r\n### 11. Create and label some issues\r\n\r\nI like to create a few known issues in any new open source repository. Even if a project is brand new and seems to work perfectly, there's probably room to improve test coverage, documentation, or enhance it with new features. Repositories with a few open Github issues look more active and give new potential contributors a place to start.\r\n\r\n### 12. Respond to contributors\r\n\r\nMy biggest pet-peeve when contributing to open source projects is unresponsiveness. I get that you may be too busy to review every PR within hours, but simply responding and letting people know you're considering their pull request is rude and makes your project look abandoned. Finally, I'd encourage you to check out [the PHP League's skeleton project](https://github.com/thephpleague/skeleton), which they use as a base for all their open source packages. If you've never started your own open source project before this is a great place to start. Also, if you'd like a printable version of this checklist, [click here](https://www.checkli.com/s/bBmbqXOe).\r\n\r\nIf you have items that you'd add to this checklist, let me know. I'm always open to new conversations on [Twitter](https://twitter.com/karllhughes) or via [email](mailto:khughes.me@gmail.com).","createdAt":"2016-10-10 16:36:07","updatedAt":{"$$date":1485957438111},"imageUrl":"https://i.imgur.com/XKTihFa.png","postUrl":"https://www.karllhughes.com/?p=992","type":"blog","tags":[{"_id":"open-source"},{"_id":"programming"}]}
{"_id":"presentation-intro-to-object-oriented-code-design","title":"Presentation: Intro to Object Oriented Code Design","content":"On Friday, March 14th I'll be giving this presentation to the developers-in-training at [StartupInstitute](http://startupinstitute.com/) here in Chicago. In this presentation I'll be covering the basic terminology of object oriented programming, examples of how they work in [Ruby](https://www.ruby-lang.org/en/), and a coding challenge. https://www.youtube.com/watch?v=FKQ6Ohj_PFY#t=162 The presentation slides are available here: \r\n\r\n<iframe src=\"https://docs.google.com/presentation/d/1CDhbfU7Hn4pSXUowseCfcYD5JU7_ToNIfzIdI12jl0I/embed?start=false&loop=false&delayms=3000\" height=\"299\" width=\"480\" allowfullscreen=\"true\" frameborder=\"0\"></iframe>\r\n\r\nIf you have any questions or you'd like to connect, feel free to [find me on Twitter](https://twitter.com/KarlLHughes).","createdAt":{"$$date":1394768226000},"updatedAt":{"$$date":1491314817928},"imageUrl":"https://i.imgur.com/uByoL0a.png","postUrl":"https://docs.google.com/presentation/d/1CDhbfU7Hn4pSXUowseCfcYD5JU7_ToNIfzIdI12jl0I/","type":"link","tags":[{"_id":"programming"},{"_id":"startup-institute"},{"_id":"presentations"}]}
{"_id":"prioritization-relative","title":"Prioritization is Always Relative","content":"When asking non-technical team members to prioritize their issues on an absolute scale I’ve noticed that they always classify their issues at one of the two highest priority levels.\r\n\r\nFor example, we track bugs in Freshdesk, so when a non-engineer finds a bug, they’ll file a ticket there and then I have a Zapier hook set up to push those new issues into Trello. Team members can select a priority level from the following list:\r\n\r\n* Low\r\n* Medium\r\n* High\r\n* Urgent\r\n\r\nIf a bug is marked “Urgent” that means I should probably drop everything and address it, otherwise I can wait until the end of the day to triage “High” priority items, or our next product meeting for Medium and Low priority issues…at least that’s how I intended it to work. After a few weeks of this, I’ve noticed that my team members — all wonderful, normal, and rational people — mark almost everything High or Urgent, even when they’re definitely not.\r\n\r\nFor example, last week a feature request was submitted by someone on the team to remove a text input box from a page. Simple enough request, but we had had the text box there for months, so I wouldn’t expect there to be a reason to drop everything and remove it. It was marked “Urgent.” When I grabbed another team member to follow up, they responded, “Oh no, don’t remove that! We need that.”\r\n\r\nClearly if the box was treated “urgently” and removed today there would be problems with other members of the team. I marked the issue Medium priority — meaning that we would discuss it at the top of the next product meeting to let all team members know why the change was being requested — and moved on with my day.\r\n\r\n## What is relative prioritization?\r\n\r\nAbove was an example of absolute prioritization gone wrong. Because team members feel the only way to get their issues noticed is to mark them Urgent, everything becomes “urgent.” In reality, we can only do things in relative priority to other things.\r\n\r\nFor example, if you gave me a list of 10 “Urgent” bugs to fix, I’d still have to put them in some sort of order before fixing each one. If I had 10 engineers, I might be able to distribute them and get a few done in parallel, but it’s more likely I would pair them up to tackle each bug one at a time.\r\n\r\nIn product meetings, we prioritize things relative to one another, and we rarely argue about what’s really important. This bug that’s preventing two users from doing a third tier feature is obviously less important than the bug that prevents users from submitting payment forms, right? Everyone agrees, and we put the bug with the bigger impact above the one with a smaller one.\r\n\r\nThis is relative prioritization, and it works really well. Absolute prioritization does not. Even with training, it's easy to see why every team member - jockeying for their own interests - will eventually fall into the bad behavior of classifying every one of their issues as the highest priority.","type":"blog","imageUrl":"https://i.imgur.com/E7ffvMs.jpg","postUrl":"","tags":[{"_id":"planning"},{"_id":"product-management"},{"_id":"startups"}],"createdAt":{"$$date":1495806857328},"updatedAt":{"$$date":1495806857328}}
{"_id":"prioritizing-after-an-inspirational-weekend","title":"Prioritizing After an Inspirational Weekend","content":"On Friday and Saturday we had our first ever Packback team retreat. We did a mix of activities designed to help the team grow closer together and cement a unified mission and values for the company. This is the first time I've been with a company that is truly run by idealistic leaders who want to embody our values, so it's exciting and inspirational to dig into these important tenants. I think we all really enjoyed getting to know each other better (here's a bit from [my teammate Eric on his thoughts](https://www.facebook.com/BinarySentinel/posts/10208324567858938?pnref=story)).\r\n\r\nAfter I got back from the Packback trip, I served as a judge in this year's [WildHacks at Northwestern University](http://wildhacks.org/). I've never participated in or judged a hackathon, so I wasn't sure what to expect, but the students did an absolutely amazing job building some really cool projects in just 24 hours. As an engineer who now spends more of his time managing and planning, it was truly inspiring to see people who were so young but still so productive.\r\n\r\n### Back to reality\r\n\r\nComing back into the office on Monday morning was a bit of a comedown. While I love my job, and I can really geek out about improving processes, hiring, and engineering, it's a little hard to come back to the grind after such an inspiring weekend. I felt a little overwhelmed as I had at least a dozen pages of notes and ideas from the weekend that I now had to start unpacking. So, here's the process I've been using to get back to normal this week: \r\n\r\n### 1. Organizing my notes\r\n\r\nLike I said, I had a lot of notes from the Packback retreat, and unfortunately they weren't really organized in any way. The first thing I did on Monday was to go through them and figure out how to split them up (mostly using Trello).\r\n\r\n### 2. Being honest about priorities\r\n\r\nThe hardest thing about having so many good ideas generated for you in a weekend is that you can't act on all of them at once. I had to pull out the ones that were immediately relevant (especially those related to hiring) and put those at the top of my to-do list. Many great ideas went to the \"future ideas\" column of my Trello board, but hopefully I'll get to all of them someday.\r\n\r\n### 3. Biting of reasonable chunks of action every day\r\n\r\nFinally, I had to move my brain from \"free-thinking\" mode to \"action\" mode. This sounds silly, but for me, brainstorming or ideation and execution are very different functions, and it's very hard to switch between the two rapidly. By compartmentalizing my time and splitting my day into \"action\" and \"ideation\" times, I can be much more effective\r\n\r\nWhat tips do you have for decompressing and prioritizing actions after an inspirational weekend or conference? Let me [hear your thoughts on Twitter](http://www.twitter.com/karllhughes).","createdAt":{"$$date":1448440226000},"updatedAt":{"$$date":1493561088787},"imageUrl":"https://i.imgur.com/ruJpRSp.jpg","postUrl":"http://www.karllhughes.com/?p=822","type":"blog","tags":[{"_id":"packback"},{"_id":"personal"},{"_id":"management"}]}
{"_id":"pursue-your-passion-period","title":"Pursue Your Passion. Period.","content":"*My views on happiness when I wrote this back in September, 2012 were admittedly simplistic. I've seen enough people now who pursued their passions and still aren't happy because they either lack financial stability or are genetically inclined towards depression. While I still think that everyone who can should pursue a career that they love, I no longer think that this pursuit is the magic key to happiness.*\r\n\r\n*Happiness is a complicated function of feeling fulfilled in your day-to-day life, your financial security relative to those around you, your genetic predisposition to happiness, and probably dozens of other factors. There's more research on this topic [here](https://www.psychologicalscience.org/observer/serious-research-on-happiness#.WKrl6xIrKfQ) and [here](https://www.theatlantic.com/magazine/archive/2009/06/what-makes-us-happy/307439/) that you can check out.*\r\n\r\n-----\r\n\r\nIt's amazing how many bright, capable twenty-somethings I know who just _aren't happy_. Studies show that [general happiness starts dropping off](http://www.gallup.com/poll/123452/americans-least-happy-50s-late-80s.aspx) around 20 years old, and doesn't rebound until people hit their mid-60's. This just baffles me.\r\n\r\n## Why Are People With So Much Potential Unhappy?\r\n\r\nFrom what I've found by talking with friends, classmates, and colleagues, most of their unhappiness stems from _their profession_. Most working Americans [spend 52% of their waking hours working](http://www.bls.gov/tus/charts/chart1.pdf) so it makes sense that if you don't like your work, you won't really be very happy. Many in my friend group chose their careers based on their perceived likelihood of success and monetary gain. The truth is, pursuing something for money isn't going to make you a happier person if you still don't have more time to do what you love.\r\n\r\n## The Limiting Factor: Time\r\n\r\nMoney doesn't buy time. Nothing buys time. That's why 20-somethings who pursued their high-paying job just for the sake of money don't tend to be significantly happier than those who are unemployed or living with their parents. Twenty-somethings, like everyone else, want to have more time to do things that they love; things they're passionate about; things that make them feel good.\r\n\r\n## The Ah-hah Moment\r\n\r\nI think that at some point in life, everybody has an \"ah-hah\" moment where they realize that money isn't buying them happiness. People who don't figure this out will inevitably get unhappier and unhappier until they reach the realization (or a breaking point), and they'll lose time all the while. The \"ah-hah\" moment happens when you realize that no matter the pay cut, you _have_ to pursue something that you love. You _have_ to spend that 52% of your time doing things that fulfill you, make you feel accomplished.\r\n\r\nSo, my advice to twenty-somethings is exactly the same as it is to anyone else: **pursue things that you love.** If you've got a little talent and creativity, you'll find a way to make enough money to survive so long as you let _nothing_ stand in the way of what you love. It may mean that you work twice as long every day as anyone else, but if you love your work, _why not?_ Work is not a means to an end (money), but a lifestyle. If you aren't pursuing something you love, you'll never make an impact on the world, and you will never feel like what you did mattered.","createdAt":{"$$date":1487570453000},"updatedAt":{"$$date":1487595123969},"imageUrl":"https://i.imgur.com/1QWmYdF.jpg","postUrl":"http://karllhughes.com/?p=248","type":"blog","tags":[{"_id":"happiness"},{"_id":"success"},{"_id":"passion"}]}
{"_id":"qualities-of-a-good-developer","title":"The Qualities I Look for in Junior Level Hires","content":"The truth is that every company, hiring manager, and human resources representative you meet during your job search is different, so there’s no magic list of traits an entry-level candidate must have to become a web developer. That said, this list comprises my top qualities based on hiring junior level devs at startups for the past few years.","createdAt":"2016-04-13T05:00:00.000Z","updatedAt":"2016-04-13T05:00:00.000Z","imageUrl":"","postUrl":"http://blog.startupinstitute.com/2016-04-13-qualities-of-a-good-developer-karl-hughes/","type":"link","tags":[{"_id":"programming"},{"_id":"hiring"},{"_id":"jobs"},{"_id":"startup-institute"}]}
{"_id":"reading-for-engineering-managers","title":"Essential Reading for Software Engineering Managers","content":"I started [trying to read more](https://www.karllhughes.com/2015/trello-as-a-reading-list/) a couple years ago, and this year I've been knocking out some of the most popular engineering management books out there. Since a lot of new and aspiring software managers ask me about this, I figured I would go ahead and put together a list of some of my favorite books for software engineering managers.\r\n\r\n## Highly recommended\r\n\r\n![](https://i.imgur.com/LViJWlM.jpg)\r\n\r\n### [Peopleware: Productive Projects and Teams by Tom DeMarco](http://amzn.to/2cGxfoK)\r\n\r\nThe nice thing about software is that it is predictable. Computers do what you expect them to every single time, but figuring out how to make people work together is a lifelong exercise. Peopleware has helped me on my journey to figuring that out. _I wrote a more detailed review of Peopleware back in 2015\\. [Click here for more](https://www.karllhughes.com/posts/peopleware/)._ \r\n\r\n### [Building Great Software Engineering Teams by Josh Tyler](http://amzn.to/2c8oKVF) \r\n\r\n\"The challenge of scaling up a team can be intimidating...Josh Tyler has spent nearly a decade building teams in high-growth startups [most recently at Course Hero]...He draws on this experience to outline specific, detailed solutions augmented by instructive stories.\"\r\n\r\n### [The Goal: A Process of Ongoing Improvement by Eliyahu M. Goldratt](http://amzn.to/2clpCCh)\r\n\r\n\"The Goal is a gripping, fast-paced business novel about overcoming the barriers to making money. You will learn the fundamentals of identifying and solving the problems created by constraints. From the moment you finish the book you will be able to start successfully addressing chronic productivity and quality problems.\" \r\n\r\n### [The Mythical Man-Month by Frederick P. Brooks Jr.](http://amzn.to/2ccFrxR)\r\n\r\n\"Few books on software project management have been as influential and timeless as The Mythical Man-Month. With a blend of software engineering facts and thought-provoking opinions, Fred Brooks offers insight for anyone managing complex projects.\"\r\n\r\n### [Startup Engineering Management by Piaw Na](http://amzn.to/2ctXdNr)\r\n\r\nThis book covers a variety of engineering topics for managers including:\r\n\r\n*   Why a manager should consider doing management work.\r\n*   How a manager should put together his team.\r\n*   The important things to consider when interacting with engineers.\r\n*   How to hire top engineers for your startup.\r\n*   How to pick engineering leaders.\r\n*   How to define processes and when don’t you need them.\r\n\r\n### [The Checklist Manifesto by Atul Gawande](http://amzn.to/2cVk0zV)\r\n\r\n\"The volume and complexity of knowledge today has exceeded our ability as individuals to properly deliver it to people—consistently, correctly, safely. We train longer, specialize more, use ever-advancing technologies, and still we fail. Atul Gawande makes a compelling argument that we can do better, using the simplest of methods: the checklist.\"\r\n\r\n![](http://i.imgur.com/kxUTUTJ.jpg)\r\n\r\n### [How to Win Friends and Influence People by Dale Carnegie](http://amzn.to/2cDFKE3)\r\n\r\n\"This grandfather of all people-skills books was first published in 1937\\. It was an overnight hit, eventually selling 15 million copies. How to Win Friends and Influence People is just as useful today as it was when it was first published, because Dale Carnegie had an understanding of human nature that will never be outdated.\"\r\n\r\n## Good reads\r\n\r\nMost of these were really good books, but they just don't relate _quite_ as directly to engineering management. Still worth looking into if you're interested in software engineering, startups, leadership, and other related topics. \r\n\r\n- **[The Lean Startup by Eric Ries](http://amzn.to/2ccHgut)**\r\n- **[What Color is Your Parachute? by Richard N. Bolles](http://amzn.to/2ccHqSG)**\r\n- **[How to Fail at Almost Everything and Still Win Big by Scott Adams](http://amzn.to/2c8CxLU)**\r\n- **[The Decision Maker by Dennis Bakke](http://amzn.to/2c8Dzrs)**\r\n- **[Disrupted: My Misadventure in the Start-Up Bubble by Dan Lyons](http://amzn.to/2c8BYC0)**\r\n- **[Essential Scrum: A Practical Guide to the Most Popular Agile Process by Kenneth S. Rubin](http://amzn.to/2ccGcGU)**\r\n- **[Clean Code: A Handbook of Agile Software Craftsmanship by Robert Martin](http://amzn.to/2cjAohP)**\r\n- **[The Innovator's Dilemma by Clayton M. Christensen](http://amzn.to/2cjz9Py)**\r\n\r\n## Next on my list\r\n\r\nI'll try to remember to update these as I read through them, but here are some of the books next on my reading list:\r\n\r\n- **[Managing Humans: Biting and Humorous Tales of a Software Engineering Manager by Michael Lopp](http://amzn.to/2cjzlyr)**\r\n- **[Slack: Getting Past Burnout, Busywork, and the Myth of Total Efficiency by Tom Demarco](http://amzn.to/2cVkW7A)**\r\n- **[The 4 Disciplines of Execution by Sean Covey](http://amzn.to/2clrlHP)**\r\n- **[Turn the Ship Around: A True Story of Turning Followers into Leaders by L. David Marquet](http://amzn.to/2ccHodv)**\r\n- **[How to Make Sense of Any Mess: Information Architecture for Everybody by Abby Covert](http://amzn.to/2ccI9Dv)**\r\n\r\nIf you have other books that I should put on my reading list, [let me hear about them on Twitter](https://www.twitter.com/karllhughes).","createdAt":{"$$date":1473791325000},"updatedAt":{"$$date":1505265096943},"imageUrl":"","postUrl":"https://www.karllhughes.com/?p=931","type":"blog","tags":[{"_id":"books"},{"_id":"engineering"},{"_id":"programming"}]}
{"_id":"red-flags-engineers","title":"6 Red Flags for Engineers","content":"We engineers actively mock job descriptions with the phrase “We’re looking for a rock star” in combination with “who is willing to work for sweat equity to produce an MVP (minimum viable product).” These terms raise an immediate red flag, but they're not the only ones to watch out for.","createdAt":"2015-02-09T06:00:00.000Z","updatedAt":"2015-02-09T06:00:00.000Z","imageUrl":"","postUrl":"https://www.themuse.com/advice/6-red-flags-to-avoid-when-applying-to-engineering-jobs","type":"link","tags":[{"_id":"the-muse"},{"_id":"programming"},{"_id":"jobs"}]}
{"_id":"remote-development-environment","title":"Setting up a Remote Development Environment with Google Chrome and DigitalOcean","content":"*I tried out this remote development setup for about 6 months back in late 2015, but it just ended up being too painful to use the remote IDE all the time. [PHPStorm](https://www.jetbrains.com/phpstorm/) has a remote development option though, so I may try that. Now that Docker for Mac is out and working well, I haven't run into the same issues I once was with running lots of VMs.*\r\n\r\n*Still, this isn't a bad setup if you're interested in developing on a smaller machine or you move computers often.*\r\n\r\n-----\r\n\r\nMy Macbook Pro is a couple years old now and I've been thinking about switching to something more portable (that new [MacBook is awful tempting](http://www.apple.com/shop/buy-mac/macbook/space-gray-256gb)), but being a developer, I don't want to get stuck with an underpowered device that won't run any project I have to throw at it for the next few years.\r\n\r\nThe inspiration for this project hit me when I saw my colleague Eric Tendian logging into his remote desktop PC at home through his Chromebook. If you're comfortable on the command line and aren't afraid of working in Linux, then why not make your whole development environment remote?\r\n\r\n## Why would you want to do development work on a remote machine?\r\n\r\nFirst, let's talk about why you would want to go through the process of developing on a remote machine. There are certainly some tradeoffs - I'll talk about the cons toward the end of the article - but here are the advantages of a remote work environment:\r\n\r\n*   **Portability:** Don't have your computer with you, but you want to make a quick code change? This set up allows you to have access to your dev environment anywhere you have an SSH connection, meaning any terminal, Chrome web browser, or even a mobile app.\r\n*   **Cost:** A new Macbook Pro will set you back between $1300 and $3000, but if you can do your dev work on a Chromebook and a Digital Ocean droplet, you can spend less than $200 up front and $40/month or less to keep your environment running.\r\n*   **Environmental Consistency:** I almost always work with Linux servers, and while 95% of the time, there's no real difference between them and my Mac OSX, it's nice to know that my development environment more accurately mirrors our server's.\r\n*   **Future Proofing:** As more of our tools go to the cloud, I think it's reasonable to assume that more of our computing power will too. The economies of scale and awesome tools for virtualization are making it cheaper all the time to get server space, and with the internet being available just about everywhere, connectivity is becoming less of an issue.\r\n\r\nAs I got into researching this project, I realized I was far from the first person to have this idea, so there are a ton of great tools and guides out there. Here's what I went through to get my set up and running: \r\n\r\n### 1. Setting up the DigitalOcean droplet\r\n\r\nDigitalOcean's droplets are scalable virtual private servers that range in price from $5/month to $160+/month depending on the size and bandwidth you need. Setting up a new one is pretty simple, but here's a [good guide if you are new to provisioning Linux](https://robots.thoughtbot.com/remote-development-machine). Once I created the droplet, I used my Mac's terminal to log in as the root user. Once in, I created a new user so that I could lock down the root user (a major security issue), and then I [gave the new user an SSH key](https://www.howtoforge.com/linux-basics-how-to-install-ssh-keys-on-the-shell) so that it could connect with remote services and servers.\r\n\r\n### 2. Getting essential Chrome Apps\r\n\r\nUp to this point, I had done all the work in my bash terminal, but I ultimately wanted to be able to get in via Chrome. I also wanted a cloud text editor (for when I inevitably got sick of vim), a way to make calls to the server, and a way to navigate my databases. Here are the collection of tools I ended up settling on:\r\n\r\n*   [Codeanywhere](https://codeanywhere.com/) (also includes a basic shell, but it's very slow)\r\n*   [Chrome Secure Shell](https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en)\r\n*   [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en) (great if you do a lot of work creating API's)\r\n*   [Chrome MySQL Admin](https://chrome.google.com/webstore/detail/chrome-mysql-admin/ndgnpnpakfcdjmpgmcaknimfgcldechn/related?hl=en)\r\n\r\n### 3. Configuring the DigitalOcean droplet for remote web development\r\n\r\nNow the hardest part (if you're not a sysadmin): configuring your DigitalOcean droplet.\r\n\r\nLinux is an awesome operating system, but there isn't a lot installed or configured by default. Depending on the kind of development you need to do, this step will vary greatly. For me, I had to install PHP 5.6, Apache, Composer, and a few essential PHP extensions. Having done this before, it wasn't a huge deal, but be prepared to spend some time on this. An alternative method would be to find an image or use one of DigitalOcean's application images to get you started. ![](https://i.imgur.com/feVAuoG.png) If you get stuck, feel free to [leave me a message on Twitter](http://www.twitter.com/karllhughes) and I'll see if I can help.\r\n\r\n## Downsides to remote development\r\n\r\nAs promised, I do want to acknowledge the negatives to taking this approach to development. While I haven't gotten to a point where I'm doing all my dev work on a remote server, I have switched a number of my side projects over, and here's what I've encountered so far:\r\n\r\n*   **Security:** If you don't lock down your server, anyone who knows the IP/web address can see your projects on the web. If you need to expose the projects to an open port, the I'd recommend using Apache's basic auth or locking down the IP addresses that can access the site.\r\n*   **Connectivity:** Obviously you must be online for this approach to work. This isn't really a problem since I have to be online to do just about any development work anyway, but if you're used to working offline this approach may frustrate you.\r\n*   **Cost:** For a high end DigitalOcean droplet with 16GB of ram, you'll spend $160/month. At that price, you could finance a Macbook Pro over two years and have something to sell back at the end of it. While most web developers won't need a server with 16GB of ram, it may not end up being the cheapest option if you do.\r\n\r\n**Other uses for a remote environment** Having your development projects in a convenient remote location gets you a lot more than just an easy way to develop on any machine. Here are some other reasons you may want to try this approach:\r\n\r\n*   Use a remote environment to set up and experiment with Docker containers instead of using virtual box locally\r\n*   Share your remote development environment between developers to minimize environmental issues\r\n*   Host your clients' projects remotely to allow them easy access to your code and exact server setup when you complete the project\r\n\r\nQuestions? Comments? Having trouble? [Find me on Twitter and let's chat](http://www.twitter.com/karllhughes).","createdAt":{"$$date":1493539232000},"updatedAt":{"$$date":1493560971191},"imageUrl":"https://i.imgur.com/USkbqGm.png","postUrl":"http://www.karllhughes.com/?p=820","type":"blog","tags":[{"_id":"programming"},{"_id":"google"}]}
{"_id":"resume-trajectory","title":"Your Resume Should Illustrate Your Trajectory","content":"When a hiring manager reviews your application, he’ll want to see a positive and compelling career progression that fits with the role you’re applying for. If your last job was as a junior front-end developer, and now you’re applying for a back-end role, think about why this move makes sense and how employers might interpret it. Does it seem like you’re trying to build full-stack experience? Or does it seem like you’re desperately applying for any and all jobs you can find?","createdAt":"2016-01-12T06:00:00.000Z","updatedAt":"2016-01-12T06:00:00.000Z","imageUrl":"","postUrl":"https://www.themuse.com/advice/9-key-things-the-hiring-manager-is-looking-for-on-your-developer-resume","type":"link","tags":[{"_id":"the-muse"},{"_id":"programming"},{"_id":"jobs"}]}
{"_id":"rethinking-hiring","title":"Rethinking the Hiring Process","content":"A year and a half ago when I joined The Graide Network, I left a role managing and hiring an engineering team to be the first developer at a new startup. Our hope was that as the company grew, my role would shift away from individual contributor to team lead, and now it's happening with our [next full-time software engineering job opening](https://github.com/thegraidenetwork/job-openings/blob/master/positions/software-engineer-1.md).\r\n\r\nI've had a lot of time to think and read about hiring since [I last did it at Packback](http://www.karllhughes.com/posts/hiring-process), and I wanted to make some significant changes to my process. In this blog post, I'll outline some of my problems with the typical engineering interview process and how I'm now attempting to solve them by rethinking my hiring process at The Graide Network.\r\n\r\n## The Hiring Problem\r\n\r\nAnyone who's hired people will tell you that it's hard. There are lots of constraints, no way to fairly compare two candidates, and good candidates for one team may be horrible for another. Because it's so hard, the process has evolved to favor people who think like the interviewers, who know someone at the company, or who perform well in high-pressure interviews. It leaves people with non-traditional backgrounds struggling, often works against diverse candidates, and is nothing like the day-to-day work that most engineers do.\r\n\r\nFor example, a typical interview may require a phone screen with HR or a recruiter who tests for \"soft skills.\" Next, an engineering manager may screen for baseline technical skills, and then the candidate may be asked to complete an independent project or come into the office for a whiteboarding session. In either case, the interview is nothing like a typical day working as an engineer (although the \"take-home\" project may be the closest in some environments).\r\n\r\nSoft skills are important, but \"tell me about a time when...\" questions favor people who are quick to make things up (I've always had to bend the truth to get my stories to fit the question at hand), and they [don't demonstrate real judgment or problem-solving skills](https://www.forbes.com/sites/lizryan/2014/03/04/why-i-hate-behavioral-interviewing/#7229c954693c). It's impossible to assess someone's character in a 30-minute phone screen, so at best, you can weed people out who are completely unreliable or have poor oral communication skills. Similarly, it's very hard to judge a person's technical ability in all things during a 1 hour tech screening. The field of web development (and software engineering in general) is so vast that nobody is going to match your requirements perfectly. You can ask them what technologies they're familiar with and see if they can have a coherent conversation about technical topics, but you probably can't bump up against the edges of all of their knowledge, especially if it doesn't overlap completely with your own.\r\n\r\nI used to assign a \"take-home\" project to candidates who passed my initial phone screening. My thinking was that this would allow them some room to flex their creative muscles, and it wasn't time-constrained. Plus, it didn't require my team to spend much time with candidates until they completed the project and the candidate could do the work at a time convenient to their schedule. The problem with this independent project is that _it didn't tell us anything about how a candidate would work in a group_, so we still had to have another session with them and the rest of the team. We lost many good candidates because they didn't invest time in the \"right\" parts of the project either. For example, if someone didn't write tests or didn't cover enough cases, they might not look as good as someone who did even if the project didn't strictly require it. We also couldn't really tell how long someone took on the project or if they had help from others, so it's impossible to say whether or not we were even testing the candidate.\r\n\r\nFinally, I've never done whiteboarding or live coding sessions with candidates, but [a lot of people really hate them](https://theoutline.com/post/1166/programmers-are-confessing-their-coding-sins-to-protest-a-broken-job-interview-process), and I think there's a good reason for that. When in the real world is a programmer pushed in front of an audience to solve a problem with an obscure algorithm, no time for independent research, and no access to resources (a la the internet/Stack Overflow)? I would never do this job if that were my day-to-day. Testing programmers at something they aren't actually expected to be good at and expecting to learn something about how they would work at your company is delusional, and I think these kind of interviews only serve to make the hiring team feel smarter and ensure better outcomes for engineers with traditional CS backgrounds.\r\n\r\n## A ~~Better~~ Different Way\r\n\r\nAs I said above, I'm trying something different this time around, but I can't tell you it's better, worse, or equal to the approach I have used before. That said, I'll walk you through my process and the reasons I've decided on it.\r\n\r\n#### Step 1: An Informational Interview\r\n\r\nInstead of setting up \"phone screenings,\" I'm treating our first call as a two-way [informational interview](https://en.wikipedia.org/wiki/Informational_interview). The candidates need to know whether or not a place like The Graide Network would be good for them just like I need to know if they've worked with none, some, or all of the same technologies we use. I don't try to suss out deep technical knowledge, but if there's something in there work history or resume that stands out, I'll ask about it. I end the call by selling them on the role and seeing how interested they are in us versus any job that's available.\r\n\r\n#### Step 2: An In-Person Pairing Project\r\n\r\nThis is the meat of the interview, and it's much more similar to what I do with team members in real life. We pick an open source project with a few issues we can make progress on in 2-3 hours, schedule a time to get together, and then pair program on the issues. This helps me assess their critical thinking ability (especially when they're the navigator), their communication skills, the speed at which they pick up new things, and our ability to work closely together. Similarly, (I hope) it allows them to see whether or not they'd like to work next to me for the next few years. Finally, we'll do more questions and answers if there is anything that I feel like wasn't answered in the first informational session.\r\n\r\n#### Step 3: Meeting the Founders\r\n\r\nWe're a small startup, so it's important that new hires make a good impression on our founders and that they can buy into the mission. I don't believe that every single employee has to be insanely passionate about the business, but I do think that it adds a lot of mileage to early employees. The technical problems we're solving will change often and sometimes they'll be boring, but our mission and core team is likely to be pretty consistent for the next few years.\r\n\r\nBehind the scenes, I am doing some other vetting as well (like checking their references and resume for inconsistencies), but that's pretty much it. I always tell bootcamp grads and new managers that there's no one way to hire, so I'm not naive enough to think that this new method will be perfect, but I hope it eliminates some of the biases and pain that the traditional interview process entails.\r\n\r\nI look forward to [hearing your feedback on Twitter](https://twitter.com/karllhughes). What would you do differently as a hiring manager?","type":"blog","imageUrl":"https://i.imgur.com/hKMDnvX.jpg","postUrl":"","tags":[{"_id":"hiring"},{"_id":"interviews"}],"createdAt":{"$$date":1514516180362},"updatedAt":{"$$date":1514516180362}}
{"_id":"risk-of-offshore-outsourcing","title":"The Risk in Sending Your Startup's Technology Offshore","content":"*When I wrote this in September, 2014 I was managing an offshore dev team for the first time, but almost every business I have worked with before and since has had some connection to an offshore engineering team. I've updated a couple points here, but mostly my advice is the same. Outsourcing overseas may seem \"cheaper\" than hiring a local developer, but be prepared for it.*\r\n\r\n-----\r\n\r\nTo the non-technical startup founder, offshore outsourcing seems like a godsend. For pennies on the dollar, you can get programmers in India, Vietnam, South America, or the Ukraine to put together your software product in just a few short weeks, so why would you even try to go through getting a technical co-founder or raising funds to hire an engineer?\r\n\r\nEvery startup I've worked for has used offshore development teams to some extent and with varying degrees of success. It's true that outsourcing some work overseas can save you a ton of money, but if you're in an early stage startup, it might not be the best way to get your MVP together. In fact, [it can be a huge risk](http://www.zdnet.com/outsourcing-exec-urges-stop-outsourcing-your-software-development-7000004315/) that can impede the process of raising funds and hiring a permanent engineering team in the future.\r\n\r\n## Here are a few things to keep in mind if you're considering going the outsourced route:\r\n\r\n### 1. It's extremely difficult to judge the quality of outsourced work without your own local engineer\r\n\r\nIt's not hard to find developers who can search the internet and hack together a piece of software that appears to work. You'd be amazed at some of the spaghetti-stringed crap I've seen that meets the business requirements for a project, but is almost unreadable. Unless you've got someone technical on your startup's team, you're not going to know what is going on under the hood of your app, and this can lead to a ton of problems down the road (more on that in a minute). \r\n\r\n### 2. Prepare to work some odd hours and deal with communication issues\r\n\r\nThis might not be a big deal if you're used to working long hours at your startup, but it's something to keep in mind anyway, especially if you want to keep a sustainable schedule. Somebody needs to manage your overseas team, and if their workday is 12 hours ahead of yours it can be tricky.\r\n\r\nAdditionally, you'll need to be able to clearly communicate expectations and specs for your project in spite of language and cultural barriers. While most offshore contractors speak English, that doesn't mean they have the same communication style as we do here in America. For example, in India, [it's impolite to say \"no\" or \"I don't understand\" to your superiors](http://www.accelerance.com/blog/the-7-ways-an-indian-programmer-says-no). This can obviously cause huge communication mismatches when outsourcing your product development, so it's important to know what your overseas developers are really saying.\r\n\r\n### 3. Things will get lost when you transition to a permanent local team\r\n\r\nEven if you have a good amount of overlap between hiring permanent local developers and your devs overseas, you won't have 100% efficiency during the transition period. If the expected pace of development doesn't allow for this slowdown, you're going to run into even bigger problems with your project. \r\n\r\n### 4. Each feature can become a line item in your technical debt\r\n\r\n\"[Technical debt](https://martinfowler.com/bliki/TechnicalDebt.html)\" is a term that too few business people take seriously, but it's a huge red flag to engineers. By having loads of technical debt, you are admitting that **you encouraged a pace that was not sustainable and you lack respect for the work that good engineers do**.\r\n\r\nThis is fine for a minimum viable product, because most people plan on rebuilding much of that once they prove feasibility and raise funds, but if you find yourself still using an MVP laden with technical debt from a bad outsourced job for months (or years), you're likely wasting a ton of resources just patching things up every week instead of building a sustainable, well organized product.\r\n\r\n### 5. Hiring and retaining local engineers could be more difficult\r\n\r\nNobody wants to come into a team with five overseas developers, two servers, and _no version control_, but I've been there before. If you get sucked into using a shabby outsourcing team, you're going to have a very hard time finding engineers who want to come in and deal with the cleanup.\r\n\r\n## Some tips for working with offshore talent\r\n\r\nSo how do you balance the need to create a low-cost MVP with the fact that offshore work adds extra risk to your already shaky business? You carefully choose a good contractor to work with and you learn to manage them well. Here are a few of the things I've learned while working with overseas developers at startups: \r\n\r\n### Use referrals and a sample assignment to find good team\r\n\r\nThe difference between a good overseas developer and a crappy one is huge, and the price may not be the best way to judge quality. Use a firm that is referred to you by someone technical whom you trust if possible. If not, be sure to give them some kind of small assignment to test their ability before you hire them full time. Don't just rely on code samples and resumes they send you as these are super easy to fake.\r\n\r\n### If at all possible, have a local engineer manage and oversee their work\r\n\r\nIdeally you want someone you can trust who can also read and write code to help you manage your overseas team of developers. Contractors - especially those used to working for companies on a tight budget - rarely care about building sustainable projects, so it makes a huge difference if you have a technical leader to push them to do it right rather than just fast.\r\n\r\n### If not, watch for signs that the offshore team lacks planning or leadership\r\n\r\nIf you get a freelance developer or small team to work on your project, make sure a single individual on their end and a single individual on your end will serve as the point contact. It doesn't work to have three managers on your side giving each developer different projects at will. Planning and organization are even more critical when you give up control to an overseas tech team. \r\n\r\n### Force your outsourced team to write documentation\r\n\r\nYou can avoid a lot of trouble if you demand detailed documentation whenever a new feature or product is added. This might add some cost to your app up front, but believe me, it will eliminate enough hours of duplicate work that it will be well worth it.\r\n\r\n### Try to compartmentalize their projects; make organizational and architectural decisions at home\r\n\r\nYou may have a massive idea for a project, but you should really try to break it up into smaller, more digestible sub-projects before you pass it off to a contractor. I've found that offshore teams get overwhelmed, finer points get miscommunicated, and results are worse the more you give them to bite off at once.\r\n\r\n### Get demos early and often\r\n\r\nGiving any group of developers a huge stack of requirements and 3 months to go build something is a recipe for disaster. Get your offshore team into a workflow where they give you a demo of a working (or at least partially working product) every one to two weeks. I can't tell you how many times I've heard founders get screwed by handing off their product to a team overseas only to check back in three months later to find that nothing was working as they expected.\r\n\r\n### Keep your features lean and don't fool yourself into thinking that your MVP will stand the test of time and traffic\r\n\r\nSo many non-technical people think that just because a project is finished and seems to work that it's \"done,\" and they can wipe their hands of it forever. When it comes to software, this is a dangerous way of thinking as the problems you solve in your MVP will be worlds away from the problems you encounter at a scale of 100 thousand, 1 million, or 10 million users. Treat early versions of your product for what they are.\r\n\r\n### Budget time and money in your roadmap for the transition\r\n\r\nFinally, you should plan to move more of your development in-house as you raise funding, and this means you'll need time and money in your budget for the transition. An overlap of 1 to 3 months is probably sufficient, but it could definitely go for longer depending on the complexity of your application.\r\n\r\nGot other tips for outsourcing at a startup? Had a good or bad experience? Let me hear about it on [Twitter](https://twitter.com/KarlLHughes).","createdAt":{"$$date":1491465657000},"updatedAt":{"$$date":1491493528447},"imageUrl":"https://i.imgur.com/InFNMOw.jpg","postUrl":"http://karllhughes.com/?p=587","type":"blog","tags":[{"_id":"outsourcing"},{"_id":"startups"},{"_id":"programming"}]}
{"_id":"roadblocks-project-estimation","title":"Roadblocks to Project Estimation","content":"*When I first published this in April, 2015, we were trying to obsessively estimate our projects at Packback. Looking back, this was premature. The truth is, we should have simply been breaking down our projects into smaller bites when there were problems, but I was a new manager and wanted to have some metrics to feed up the chain.*\r\n\r\n*I don't push estimation as much anymore when there's just one engineering team as the loss of productivity measuring estimates vs. actual time is probably higher than the minute gains in optimizing estimates. Instead, I would encourage each engineer to outline their solution before starting. This makes them think through the problem, which is really the goal of estimating anyway.*\r\n\r\n-----\r\n\r\nProject estimation is something that every engineering and product manager wants to get good at, but it seems to be a problem that very few have mastered. I'm not especially great at estimating things, but from the past few years with startups, I have noticed some things that tend to stand in the way of a decent project time estimate.\r\n\r\nSome of these things are in control of the engineering and product team, but some are outside business forces that are almost impossible to predict. In a startup, these issues are compounded by a tight or non-existent budget and managers who may be inexperienced.\r\n\r\n## New team members\r\n\r\nIt's nobody's fault, but new team members need time to adjust and learn your team's system and technology. Even if they have worked with similar code, your implementation is almost certainly different, and even if it's not, your team's personal and political dynamic is different. I've said this before, but the biggest mistake managers can make is thinking of engineers as interchangeable cogs in a machine. The truth is that every one is different, and getting them into the groove of a new position takes time and introduces unknowns into a project.\r\n\r\n## A constantly changing project spec\r\n\r\nGood businesses iterate a lot on their products. Poorly run businesses fail to finish testing one thing before they move on to the next.\r\n\r\nIt can be challenging, but getting the product owner and engineering team to agree to a minimum requirements list will make everyone happier down the line. I say \"minimum\" requirements because if we're obeying agile principles, that is just our starting point for future iterations. Even if we need something more advanced down the line, we have to agree on the minimum that the app must do.\r\n\r\n## Unfamiliar technologies\r\n\r\nI encourage my team to experiment with new platforms, frameworks, and tools, but estimation doesn't play well with new variables like this. We try to get our experimenting out of the way before we get to the meat of our project and draw up our estimated timeline to completion. Occasionally something new enters the mix, but I've learned that it always slows things down more than the developer expects. In the long run, using something outside of your current toolbox may be the best choice, but you'll probably give up short term gains to introduce it.\r\n\r\n## Research projects\r\n\r\nSome projects are two-way research projects. On one end, the business wants to know the technical limitations of a new project in order to determine the spec, and on the other end, engineering needs to do research before we can honestly answer the question about what's possible. We had a project like this at Packback recently relating to gathering thousands of textbook prices every day. Nobody on our engineering team specializes in big data, and we collectively lacked the experience to estimate a project like this or know how to limit its scope. It's caused a lot of back and forth between the business and engineering team, and it's been a challenge to estimate.\r\n\r\n## Deployment\r\n\r\nI love small teams because you get to work on a little of everything, but that also means everyone has to do some of the dev-ops. In a larger organization this might not be such a pain point for project estimation, but at a small company like Packback, it's a challenge that adds a lot of unknowns, especially when we're spinning up a new project or using a new stack. The only thing I've found to help alleviate this so far is to standardize deployments as much as possible. If you're going to use Digital Ocean in one place, use it everywhere; if you're running automated tests with Codeship in one project, use it in all your projects.\r\n\r\n## Dealing with scale\r\n\r\nCreating a web application that works for 100 users is easy. It doesn't matter how clean your code is or how good your monitoring service is or if one even exists. This same pain of scaling applies to other engineering projects as well ([there is an episode of Developer Tea that uses the analogy of making 100 sandwiches vs. 1 sandwich](https://developertea.com/episodes/9981)).\r\n\r\nWhat challenges have you encountered when estimating projects?","createdAt":{"$$date":1492239602000},"updatedAt":{"$$date":1492259062973},"imageUrl":"https://i.imgur.com/4PREITr.jpg","postUrl":"http://www.karllhughes.com/?p=726","type":"blog","tags":[{"_id":"programming"},{"_id":"product-management"},{"_id":"estimation"},{"_id":"agile"}]}
{"_id":"roles-of-startup-cto","title":"The Many Roles of a Startup CTO","content":"\"Chief Technical Officer\" sounds like a glamorous title. It's right up there with \"Chief Executive Officer\" and \"Chief Financial Officer\" in the pecking order of a company's leadership, and at big organizations, it's quite an honor to hold. At an early stage startup, the distinction is slightly less exclusive. \r\n\r\nAfter talking to a lot of people in CTO or VP of Technology roles at bigger organizations, I've realized that the job in a startup is _way_ different from the same job in a fortune 500 company; probably much more different than that of CEO or even CFO. The trick is that in a startup, you can hire developers and IT people to do specific tasks, work in certain languages, or architect your projects, but filling in the rest of the gaps is still a huge responsibility, and it's likely that all that work will fall to the CTO. So rather than just oversee big picture technology direction or strategic partnerships (although he/she will certainly do that too), a startup CTO pretty much does a bit of everything. Here are just a few of the things we end up taking charge of - whether we like it or not: \r\n\r\n### 1. Building the MVP (Minimum Viable Product)\r\n\r\nMost people who want a technical co-founder probably want someone to do this. Creating the first iteration of a startup's product usually falls to the CTO, and that makes a lot of corporate CTO's really bad for the job. Big company CTO's are usually 2 or 3 levels of management away from day-to-day engineering. \r\n\r\n### 2. Hiring engineers, IT professionals, and data managers\r\n\r\nFinding and bringing on engineering talent is one of the hardest things tech startups have to do right now. The job market is really bad for employers right now (lots of demand for talent, only so many engineers) and hiring for cultural fit is often a challenge for people who are used to working in lonely silohs as developers. \r\n\r\n### 3. Figuring out company-wide security\r\n\r\nI've never implemented a security policy before, but when one of our partners asked to see ours, it immediately fell to me to come up with one. Without established standards, I've found a lot of startups security to be absolutely atrocious or non-existent, so it's usually up to the CTO to shape things up. \r\n\r\n### 4. Product management\r\n\r\nMost startups I've seen have a non-technical product manager and a de-facto technical project manager in their CTO. This usually means that while his primary goal is to make the vision of the non-technical manager a reality, it also means that he's got to manage the flow of work into his engineering or tech team.\r\n\r\n### 5. Application architecture\r\n\r\nMVP's rarely have a lot of high level architecture work, but when the time comes to plan a startup's version 2, the company rarely has the luxury of hiring a professional application architect. This work tends to fall to the CTO at least for a while.\r\n\r\n### 6. Bug triage\r\n\r\nAs a startup grows, it usually finds the need to hire a low-wage customer service person (or get a service overseas to handle it), but what happens when this person or a customer finds a bug? It's unlikely that you've built a quality assurance team (see the next point), so it heads to the CTO to distribute bugs to his team accordingly. \r\n\r\n### 7. QA and testing\r\n\r\nOnce again, I've rarely seen an early stage startup with a dedicated QA team or even single person. Small companies usually come up with a system that splits testing and validation work between developers, but that system is usually dictated by...you guessed it...the CTO. This is the kind of tedious work that most corporate CTO's have long ago eschewed, and it adds to the challenge of finding a good CTO at a startup.\r\n\r\n### 8. Dev ops\r\n\r\nThis has been my biggest challenge. As an application developer, my role at Packback has been the first time I've had to figure out application deployment on a relatively complex system from scratch. At first that meant a lot of shitty shell scripts and SSH-ing into the server, but I've picked up some tools to make it easier along the way. Once again, the CTO picks up the slack here until your startup can hire someone to handle it.\r\n\r\n### 9. Data management\r\n\r\nBig data is hot right now, but data scientists are a luxury that smaller startups usually have to wait on. Even if you can collect millions of data points on your customers, it's useless without a CTO who can come up with a decent system for storing and accessing this data securely.\r\n\r\n### 10. Vendor relationships\r\n\r\nWe live in an API-driven world as developers. I can't remember the last time I built a project that didn't connect to at least two or three third party services from Google Analytics to Cloud SQL servers to Amazon S3\\. It's awesome to have so much power at your fingertips as a developer, but as a CTO it's a lot to manage. You have to know who's updated which libraries, which plan you signed up for, and who's got access to your secret keys.\r\n\r\n### 11. Overseeing the version 2.0\r\n\r\nAt some point in a startup's life-cycle it comes time to rebuild the MVP that is now likely being stretched way beyond its initial use case. Unless your startup has grown incredibly fast or you've pushed this step off for an extra long time, your CTO will probably be doing most of the planning work on this version as well. By this point, his role will be different than it was during the MVP days; now he'll have to manage a team of people rather than build it all himself.\r\n\r\n### 12. Team growth management\r\n\r\nAnother reason that startup CTO's are rarely the same people who work as big company CTO's is that [managing growth of technology team is really hard](http://www.bersin.com/blog/post/2014/07/How-Do-We-Excite2c-Manage2c-and-Retain-the-Tech-Team.aspx). At the beginning you could excite your employees by offering them cool projects with lots of technical challenges. Now you've got to attract more specialized people with benefits, vacation days, and career advancement. Managing growth with 100 employees is totally different than managing growth with 5. \r\n\r\n### 13. Employee retention\r\n\r\nTech workers have options, so it's rare to keep one for more than 2 or 3 years these days. That means that as your startup exits the \"tiny startup\" phase and enters the \"mid-sized startup\" phase it's likely that your CTO will start dealing with some churn. Early employees yearn for the excitement of their first months with the company and start looking for new challenges or founding their own companies. The CTO who originally started building this thing alone in his apartment is now trying to convince his best talent to stay and minimize turnover.\r\n\r\nThese challenges are far from the only ones that early startup CTO's face, but they are some of the biggest ones, especially for people who mostly just want to write code. Have any other roles that the CTO fills at your company? Let me hear about it here or on [Twitter](http://www.twitter.com/karllhughes).","createdAt":{"$$date":1433141126000},"updatedAt":{"$$date":1488386049918},"imageUrl":"https://i.imgur.com/e43eJtu.jpg","postUrl":"http://www.karllhughes.com/?p=743","type":"blog","tags":[{"_id":"management"},{"_id":"startups"},{"_id":"cto"}]}
{"_id":"ryan-rhoten-having-fun-career-podcast","title":"My Tips on Having Fun in Your Career","content":"Back in December [Ryan Rhoten](http://www.ryanrhoten.com/) got in touch with me about being a guest on his podcast. Ryan's show features business professionals who offer advice, tell stories, and answer Ryan's questions. It's a very well done show, so it was an honor to be included. On the show, Ryan and I talked about Packback, hiring - especially when it comes to startups, and my advice for having fun in your career. You're going to spend a lot of your life working, so you better love it. Let me know what you think of the episode!","createdAt":{"$$date":1423461617000},"updatedAt":{"$$date":1487034651433},"imageUrl":"https://ryanrhoten.com/wp-content/uploads/2015/01/Karl-L-Hughes.png","postUrl":"http://www.ryanrhoten.com/karl/","type":"link","tags":[{"_id":"podcast"},{"_id":"ryan-rhoten"},{"_id":"advice"}]}
{"_id":"security-tips-startups","title":"Security Tips for Engineers at Early Stage Startups","content":"*Since publishing this post in August, 2015 I've become somewhat fanatical about getting my company's employees, my wife, and my family to use the internet securely. Data breaches are very easy now. People use many services on a daily basis, so shared passwords is an increasingly common attack method. If you're a typical internet user, get a [password manager](https://en.wikipedia.org/wiki/Password_manager); if you're a CTO or engineer at a startup, get ready to own security.*\r\n\r\n-----\r\n\r\nIt's rare for early stage startups to make security a high priority. You don't hear two first-time founders bouncing ideas off each other that include a plan for mitigating phishing attacks on their early employees.\r\n\r\n## 1. Someone needs to own security\r\n\r\nThe first problem with security at a startup is that someone needs to really own it. That doesn't mean your first hire should be a Chief Security Officer or that you need to make your engineers spend 40 hours per week on it, but someone should be the go-to person when it comes to questions of security. The key is that they have to care about security and they have to have the latitude to do something about it when they see a problem.\r\n\r\n## 2. Security is part of everyone's job\r\n\r\nThat said, the person in charge of security at a startup isn't the only one who should know your company's policies or keep all the passwords. Everyone - including new hires - should be taught the basics. In my experience, young startup employees are some of the worst when it comes to security; they keep their passwords on a text file on their desktop and every single one of them is \"password1\". While a lot of engineers worry about complex security attack vectors, those employees are probably your weakest link.\r\n\r\n## 3. Use a framework\r\n\r\nSQL injection is so easy to prevent, but only if you have a framework that mitigates it. Whether you've rolled your own or you're using something open source, don't ever set up a project that takes user input without a framework to prevent code injection attempts.\r\n\r\n## 4. Perform security audits regularly\r\n\r\nEvery 6 months you should change all the passwords on all your systems and services. Remember that your server is just one place where attackers could break in; your code repositories are only as strong as the weakest team member's Github password. If you get in the habit of conducting an effective security audit regularly it can often reveal problems and vulnerabilities that may have otherwise gone unnoticed.\r\n\r\n## 5. Don't touch credit card data\r\n\r\n[PCI compliance](https://www.pcisecuritystandards.org/merchants/how_to_be_compliant.php) is time consuming and expensive, so it's unlikely that an early stage startup will be able to do it. Fortunately, there are dozens of credit card processors that prevent you from ever storing or touching credit card data on your servers. Stripe and Braintree are two of my favorites.\r\n\r\n## 6. Set up monitoring and logging\r\n\r\nFinally, a good security engineer keeps an eye out for the unknown unknowns, and one of the best ways to do this is by setting up monitoring and logging on your servers.\r\n\r\nHave your own security tips for early stage startups? Let me hear your thoughts on [Twitter](http://www.twitter.com/karllhughes).","createdAt":{"$$date":1493193638000},"updatedAt":{"$$date":1493212522880},"imageUrl":"https://i.imgur.com/20vtqSOl.jpg","postUrl":"http://www.karllhughes.com/?p=779","type":"blog","tags":[{"_id":"security"},{"_id":"programming"},{"_id":"startups"}]}
{"_id":"self-awareness-dashboards-and-evaluating-culture","title":"Self-Awareness, Dashboards, and Evaluating Culture","content":"While I haven't been writing here in the past month, I've been working on a few guest posts that all happened to go live last week. Here are some quick summaries with links to the original posts:\n\n### Developing Self-Awareness\n\nIn college I made milkshakes at Chick-fil-A, delivered catering orders for a sandwich shop, tested washing machines at GE, pitched at business plan competitions, ran a couple of half-marathons, helped lead an engineering fraternity, and taught myself to make websites. It took me six and a half years to finish my undergraduate degree but, by the time I got out, I had tried enough things so that I knew what I did and didn’t want in my career. Developing a high level of self-awareness will prevent you from wasting time in a job that you'll hate, and it makes you a much more effective leader and team member. **[Read the rest on Startup Institute's blog](http://blog.startupinstitute.com/2016-07-07-developing-self-awareness/).**\n\n### Figuring Out Engineering Culture During Interviews\n\nEngineering culture is defined as, \"the way we _build_ things around here.\" As a job seeker, the difference between working at a company with a strong emphasis on engineering culture and one without is stark. While you probably won’t be 100% sure what it’s like to work somewhere until you’ve been there for a week or two, there are plenty of great questions you can ask your potential future employers to suss out any red flags. **[Read the rest on The Muse](https://www.themuse.com/advice/the-interview-questions-engineers-must-ask-to-figure-out-what-a-companys-cultures-really-like).**\n\n### Dashboards for Agile Teams\n\nWe're big on tracking metrics at Packback, so when I started up a Twitter conversation with [Ali Pourshahid](https://twitter.com/ali_pourshahid), the Head of Engineering at Klipfolio, it made sense to collaborate on an article. This post expands on one I wrote [earlier for this blog](https://www.karllhughes.com/2016/sprint-tracking/), and it goes into some of the specific tracking metrics that both Klipfolio's engineering team and ours at Packback use to help keep tabs on how things are going throughout our sprints. **[Read the rest on Klipfolio's Blog](https://www.klipfolio.com/blog/how-dashboards-help-agile-software-development-teams).** ![](https://i.imgur.com/AGZW0YK.jpg) _This is a random photo I took in Arizona earlier this year. Enjoy!_","createdAt":"2016-07-12 13:56:40","updatedAt":"2016-07-12 13:56:40","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=915","type":"blog"}
{"_id":"senior-engineers-what-makes-them-stand-out","title":"Senior Engineers: What Makes Them Stand Out?","content":"I was recently asked by the editors at The Muse to contribute some thoughts on what makes a software engineer \"senior\" versus \"junior\" or \"mid-level\". This is really hard because it's a subjective and relative title. One thing that I do believe is that the title \"senior engineer\" has little to do with number of years of experience, but a lot to do with the quality of those years of experience. I ended up coming up with 7 characteristics of senior engineers: **1\\. They Have Strong Debugging Skills** **2\\. They Know When Not to Do Something** **3\\. They Mentor Others** **4\\. They Review Code Meticulously** **5\\. They Can Communicate Complex Technical Ideas** **6\\. They Specialize** **7\\. They Admit What They Don’t Know** To read more including full explanations of the above list, [check out the article on The Muse](https://www.themuse.com/advice/7-traits-that-make-senior-engineers-stand-out-from-more-junior-team-members?ref=carousel-slide-0). ![](https://i.imgur.com/uElw8Ah.jpg) If you have additions to the list, feel free to [let me hear them on Twitter](http://www.twitter.com/karllhughes).","createdAt":"2016-08-17 15:00:24","updatedAt":"2016-08-17 15:00:24","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=924","type":"blog"}
{"_id":"shiphp-book","title":"Book: Building PHP Applications in Docker","content":"Last month I finished my first book - a step-by-step guide for PHP developers who want to learn Docker called \"Building PHP Applications in Docker\". It's about 10,000 words (40 pages), and it covers quite a bit if you're new to Docker.\r\n\r\nDownload the book for free at [www.shiphp.com](https://www.shiphp.com/).\r\n\r\nThe goal of the project is to use the free book, blog posts, and open source software to market courses and training programs that will be paid. I'm still working on the course (or courses), but this strategy will allow me to reach a critical mass of users _before_ I invest a ton of time in the course or training programs.\r\n\r\nIn the meantime, I'm definitely interested in feedback. If you're a PHP developer who's interested in Docker, please let me know what you'd like to see in future blog posts or courses by [reaching out on Twitter](twitter.com/karllhughes).","type":"project","imageUrl":"https://i.imgur.com/uMywG3a.png","postUrl":"","tags":[{"_id":"php"},{"_id":"programming"},{"_id":"docker"},{"_id":"books"}],"createdAt":{"$$date":1507147850038},"updatedAt":{"$$date":1507320821684}}
{"_id":"shiphp-docker-php-tutorials","title":"A Collection of Docker and PHP Tutorials","content":"As part of [my 2017 writing goal](https://www.karllhughes.com/posts/2017-writing-goal), I decided to spend this month writing a series of short \"How-Tos\" for people trying to learn PHP or up their skills. Since a lot of the work I've been doing lately has involved PHP and Docker and I've found precious few resources on that topic, many of my posts center around using Docker containers to accomplish typical PHP tasks.\r\n\r\n**A few that you may want to check out if you're new to PHP and Docker:**\r\n\r\n- [Running a PHP script within a Docker container](https://www.shiphp.com/blog/2017/php-script-in-docker)\r\n- [Running a PHP web application within a Docker container](https://www.shiphp.com/blog/2017/php-web-app-in-docker)\r\n- [Installing Composer packages using Docker containers](https://www.shiphp.com/blog/2017/composer-php-docker)\r\n- [Using PHP environmental variables in Docker containers](https://www.shiphp.com/blog/2017/env-php-docker)\r\n- [Running a PHP/MySQL application in Docker containers](https://www.shiphp.com/blog/2017/php-mysql-docker)\r\n- [Running a PHP/Postgres application in Docker containers](https://www.shiphp.com/blog/2017/php-postgres-docker)\r\n- [Running PHPUnit tests in Docker containers](https://www.shiphp.com/blog/2017/phpunit-docker)\r\n- [Running a SlimPHP application in Docker containers](https://www.shiphp.com/blog/2017/slimphp-docker)\r\n- [Running Wordpress with Docker containers](https://www.shiphp.com/blog/2017/wordpress-docker)\r\n- [Running a Laravel Application in Docker](https://www.shiphp.com/blog/2017/laravel-docker)\r\n\r\nCheck out all of my latest PHP tutorials at [Shiphp.com](https://www.shiphp.com/).","type":"blog","imageUrl":"https://i.imgur.com/pHQ5aKr.jpg","postUrl":"","tags":[{"_id":"php"},{"_id":"docker"},{"_id":"shiphp"},{"_id":"programming"}],"createdAt":{"$$date":1498226703327},"updatedAt":{"$$date":1509930519302}}
{"_id":"side-project-checklist","title":"The Side Project Marketing Checklist: Making it Go Viral","content":"Like many developers, I've been building side projects in my spare time for years. One of the most fun things about being a software developer is having the ability to build tools that solve your own problems, so most of these projects have been very specific to my needs, but a couple have had potential for market appeal.\r\n\r\nThe problem for me has always been [effectively marketing my side projects](https://www.sideprojectchecklist.com/2017/why/). Typically, I build a product for myself, try a few things to get the word out, and then lose interest. This has led to most of my projects languishing in obscurity, but this year I'm trying to change that.\r\n\r\n## The Side Project Marketing Checklist\r\n\r\nI like organizing things, and after reading [Atul Gawande's Checklist Manifesto](http://amzn.to/2fLymZ3) a couple years ago, I've been really into checklists. Since I wanted to get better at marketing my side projects, I figured the best thing to do would be to make a big checklist for them. [I put the checklist out on Github](https://github.com/karllhughes/side-project-marketing), and soon after [I built a landing page](https://www.sideprojectchecklist.com/) and [posted in on Hacker News](https://news.ycombinator.com/item?id=14942902).\r\n\r\nIn the first 24 hours, almost 31,000 people saw the list.\r\n\r\n![](https://i.imgur.com/f9zRhQ0.png)\r\n\r\nI was blown away. The repository has been [trending on Github](https://twitter.com/KarlLHughes/status/894619969316638720) for the past two weeks now, and it's been linked to and shared on hundreds of smaller sites as well. I quickly put up an email signup form and got a few hundred email subscribers. Hundreds of people shared it on other social networks as well.\r\n\r\n## Creating the list\r\n\r\nI spent about an afternoon compiling the first version of the list. After a couple re-works and reorganizations, I felt pretty good about it. Most of the tactics were things I had either tried or been told about by friends at startups. No project will use _every_ item on the list, but I wanted the list to be comprehensive. That way, when I started a new project, I could copy the list, remove the items that didn't apply to this project, and then I'd have a simple step-by-step guide for marketing the project.\r\n\r\nMaking the whole thing fit into a single page was important to me. Side projects aren't companies with dedicated marketing resources - they're just something you spend a few hours per week on - so I knew that spreading the list out across a bunch of pages wouldn't work.\r\n\r\nI also knew that I wouldn't have space in the checklist to include tutorials for _how_ to do everything, so instead I linked out to other resources that other people have written on the topics.\r\n\r\nInitially the list was just a markdown file, but after I had a good working version, I decided to use [Github Pages and Jekyll](https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/) to build a little landing page around it. I bought a domain name and put it all out there at [SideProjectChecklist.com](https://www.sideprojectchecklist.com/).\r\n\r\nI also decided that there were two things I wanted users to do when they got to the site:\r\n\r\n1. Star the repository on Github.\r\n2. Sign up for my email list.\r\n\r\nI made those two calls to action very prominent on the site without being annoying that way people would gravitate to one or both of those options.\r\n\r\n## Promoting it\r\n\r\nMy plan from the start was to use the side project checklist to market the side project checklist. This was my first project where I used the checklist from the start ([here's how I use it](https://www.sideprojectchecklist.com/2017/how-to-use/)), and I'm actually surprised at how well it worked.\r\n\r\nI had no idea that the checklist would resonate as strongly with people as it has, but I do think that a big part of its success was luck. Still, there were some things that made an outsized impact when I was promoting it:\r\n\r\n1. I posted it on Reddit first. There are a lot of great subreddits for side projects and startups that appreciate this kind of post.\r\n2. Next I shared it to some Slack groups I am in.\r\n3. Once I had a few stars on Github and another contributor, I shared it to Hacker News. The crowd on Hacker News loves posts about side projects (that's where [IndieHackers](https://www.indiehackers.com/) built pretty much all of their followers) but the post hadn't picked up a ton of traction on Reddit earlier, so I wasn't sure.\r\n\r\nAs it started picking up steam and hit the front page of Hacker News, I started making a plan for following up on its success:\r\n\r\n1. I made an email list and put two sign up forms on the checklist. A couple people said that was too much, but I thought it was better than adding a popup or one of those exit-intent things.\r\n2. I started thanking people on Twitter who were sharing it. Twitter makes it easy to [search for tweets by URL](https://twitter.com/search?q=https%3A%2F%2Fwww.sideprojectchecklist.com&src=typd).\r\n3. I made a plan for weekly blog posts and a weekly email newsletter. While I knew the success from Hacker News wouldn't last forever, I wanted to capture and hold at least a little audience to help me improve the checklist over time.\r\n\r\n## The future\r\n\r\nWhile I still don't have a rock-solid plan for monetizing the checklist (I'm not sure it'll be worth it until it's a bit bigger), I do have a roadmap for marketing the project and getting more contributors.\r\n\r\nThe whole project is open source! So, if you have a suggestion to improve it or you'd like to learn more, check it out on [Github](https://github.com/karllhughes/side-project-marketing) or [on the web](https://www.sideprojectchecklist.com/).\r\n","type":"project","imageUrl":"https://i.imgur.com/cuhZODE.png","postUrl":"","tags":[{"_id":"open-source"},{"_id":"side-projects"},{"_id":"marketing"}],"createdAt":{"$$date":1502910495033},"updatedAt":{"$$date":1507321759496}}
{"_id":"signs-engineering-job-trap","title":"Signs That an Engineering Job Might be a Trap","content":"When you're gainfully employed, it's easier to be a clear judge of a bad job than when you're desperate for your next paycheck. Fortunately for those of us in technical fields, there are usually a lot of jobs going around; it's really a matter of finding one that doesn't suck. I put together my thoughts for a piece on the Muse this week. Here are the six red flags I watch for in engineering jobs:\r\n\r\n1.  Lack of Technical Understanding Throughout the Organization\r\n2.  History of High Turnover\r\n3.  On-Call Expectation\r\n4.  Unrealistic Timelines\r\n5.  Lack of Opportunities for Growth\r\n6.  A Sense of Crisis\r\n\r\nCheck out the link to the whole article below.","createdAt":{"$$date":1424066445000},"updatedAt":{"$$date":1491685144977},"imageUrl":"https://i.imgur.com/mwAvD4T.jpg","postUrl":"https://www.themuse.com/advice/6-red-flags-to-avoid-when-applying-to-engineering-jobs","type":"link","tags":[{"_id":"the-muse"},{"_id":"programming"},{"_id":"engineering"},{"_id":"advice"}]}
{"_id":"simple-business-ideas","title":"25 Simple Business Ideas for Anyone","content":"There are pros and cons to running your own business, but there's way too much emphasis put on starting something technically complex. Many great entrepreneurs started by just getting started on _something_.","createdAt":"2014-06-02T05:00:00.000Z","updatedAt":"2014-06-02T05:00:00.000Z","imageUrl":"","postUrl":"https://www.linkedin.com/pulse/20140602144258-72782361-25-businesses-you-can-start-while-looking-for-a-job","type":"link","tags":[{"_id":"entrepreneurship"},{"_id":"business"}]}
{"_id":"social-media-101-be-human","title":"Social Media 101: Be Human","content":"I've been active on social networks for almost my whole life. It's weird to say that, because people just a few years older than myself couldn't claim this about themselves. My generation is the first to grow up with it, and the first to form their thoughts about customers, sales, and marketing with social media tightly integrated into the conversation.\r\n\r\nIt's amazing to me to think about how different my business classes and experiences would have been had I gone to college in 1990. They would have taught me about cold calling, print advertising, and telemarketing instead of blogging, social media, and email marketing. Social networks in their current form didn't really evolve until the mid 2000's, and even then, businesses weren't really sure how to use them.\r\n\r\nMy generation is the first that has had some form of social networking profile for practically their whole lives. Whether it be the AIM screen name we got in 5th grade or the LiveJournal account we kept in Jr. High, we don't know what the world would be like without social media, and I think that gives us a unique perspective on how to effectively use it. Somebody recently asked me what tip I would give to businesses trying to build their brand on social media. The first thing that came to my mind - because it bugs me so much when businesses don't do it - is _to be human_. \r\n\r\n## How can a business be \"human\" online?\r\n\r\nThe way that individuals use Facebook is so drastically different than how businesses use it that it should be easy to see a problem. Social networks have effectively brought people who are far apart in distance closer together by allowing them to communicate more effectively.\r\n\r\n### Why then, do so many businesses treat social media like it's their chance for a world-wide commercial?\r\n\r\nThe truth is that business communication on social media should much more closely mirror personal communication on social media. You shouldn't think of Facebook or Twitter as an outreach tool so much as a tool to get closer to and listen to your customers. By doing that and highlighting your satisfied customers who talk about you, you're being human, and your efforts will be infinitely more effective in the long run.\r\n\r\nWhat do you think? How can businesses be human and still retain a professional image on social media?","createdAt":{"$$date":1359214411000},"updatedAt":{"$$date":1488315878241},"imageUrl":"","postUrl":"http://karllhughes.com/?p=352","type":"blog","tags":[{"_id":"social-media"},{"_id":"facebook"},{"_id":"twitter"}]}
{"_id":"spring-race-season-2015","title":"Spring Race Season, 2015","content":"Two weeks ago I traveled to Atlanta to do the [Publix Georgia Half Marathon](http://www.georgiamarathon.com/), and then this past week I did the [Chitown Half Marathon](https://www.allcommunityevents.com/chi_town_half_marathon/chi_town_half_mar_home.html) along the lake here in Chicago. They were my first two races of the season, so I wasn’t sure what to expect, especially since I’m a bit heavier now than I was at the end of last race season. It looks like I’m still making consistent improvements though.","createdAt":{"$$date":1428904839000},"updatedAt":{"$$date":1492257663135},"imageUrl":"https://40.media.tumblr.com/94fd135ae4e11a46bf4d69ac0b68527b/tumblr_inline_nme5z40Kpp1rzcaez_500.jpg","postUrl":"http://www.karllhughes.com/?p=721","type":"blog","tags":[{"_id":"running"},{"_id":"personal"}]}
{"_id":"sprint-tracking","title":"Building an Agile Sprint Tracking System","content":"I've found [Agile](http://agilemethodology.org/) to be a great tool for helping startups build software at a predictable pace while remaining flexible enough to deal with the changing needs of an inherently volatile organization. Still, there are some challenges to implementing it, and just because you put a working system in place doesn't mean you won't run into issues along the way. A few things that we've struggled with when implementing [Agile at Packback](https://www.linkedin.com/pulse/agile-startup-our-product-process-packback-karl-l-hughes) include:\n\n*   Bottlenecks between our design, frontend, and backend team members\n*   Consistently predicting the amount of work we can get done in any single sprint\n*   Showcasing team members who go above and beyond (and conversely holding those who underperform accountable)\n*   Rewarding \"team players\" who help the group succeed, not just themselves\n\nAs we've improved our process over time, here are the steps we've taken to solve the above challenges and more:\n\n### Step 1: Implement Tracking\n\nOur first step was to implement a [Scrum framework](http://scrummethodology.com/). Since I've covered this in a [previous blog post](https://www.linkedin.com/pulse/agile-startup-our-product-process-packback-karl-l-hughes), I'll skip the details, but basically, our system tracks estimated points, completed hours, and number of stories delivered by each team member in each area of our codebase.\n\n### Step 2: Build a Review System\n\nOnce we got in the habit of tracking our points consistently, the next step was to build a basic summary of each sprint to review after it was complete. This would help us keep up with our average throughput and serve as a rough estimate of how well we did as a team in estimating and completing points. Here are some of the metrics we review after each sprint: ![](https://i.imgur.com/kfhCyQc.png) The above chart tells us at a glance how productive each of us were and how evenly distributed our work was between job functions. A note about this review process: just because a team member has lower numbers doesn't mean he or she performed especially poorly, so we have to take note of anomalies. For example, it's reasonable that a developer got sidetracked by taking care of a number of hard to estimate bugs that came into the sprint late, and therefore didn't get as many points as he normally would. Over time these sorts of events tend to even out, but it's a good idea to record them anyway.\n\n### Step 3: Real Time Sprint Progress\n\nOnce we had a system in place for reviewing our sprints, I really wanted to take it to the next level and allow the whole team (and even people outside the engineering team) to see in real time how our sprint is going. While [burndown charts](https://en.wikipedia.org/wiki/Burn_down_chart) are the typical gauge for sprint tracking, they aren't the only effective way to visualize progress. Since we use Trello for tracking our sprints, I decided to hook up some charts in [Klipfolio](https://www.klipfolio.com/) using Trello's API. Here are the three main \"klips\" (Klipfolio's word for widgets) we keep an eye on:\n\n#### 1\\. Planning\n\nThis chart shows us at a glance how many pieces of work are specced and designed for the next sprint as well as how evenly distributed work is for the current sprint. This helps us reduce planning bottlenecks as well as offers a visual indicator if the workload is out of balance (eg: too much work for the frontend devs, not enough for the backend). ![](https://i.imgur.com/A54ryi0.png)\n\n#### 2\\. Sprint goal\n\nNext, we have a visual indicator of how close our sprint is to being finished and the percentage of points we've completed. There's also a bar chart that shows where the work is distributed in the process. This helps us see if lots of items are stuck in QA or if we're way behind our scheduled pace. ![](https://i.imgur.com/84YmLMF.png)\n\n### 3\\. Team contributions\n\nFinally, we have a chart that breaks down how much each team member has contributed to the sprint in progress and the type of work that has been completed (frontend, backend, etc.). While we don't push competition between team members, I think it's helpful to point to a metric like this when someone puts in extra effort and gets more done than we expect of them. Conversely, it could be a sign that we didn't estimate points well. Either way, this chart makes it clearly visible where outliers are. ![](https://i.imgur.com/EFeL1KU.png)\n\n### Step 4: Iterating on the results\n\nAgile is all about continuous improvement, so even though we have a system that works today, we're always looking to tighten it up based on the challenges we face. For example, I've recently seen more bugs work their way into sprints after they start, and our system doesn't really credit bug fixes well. I'll be working on a way to improve that in the next iteration. Another issue we are constantly aware of is that estimates are never a perfect metric in themselves. We don't always get them right, so sometimes people get more or fewer points than they deserved. We'll eventually figure out a way to improve this and we may bake it into our tracking system down the road. I hope this is helpful to other small organizations implementing Agile and sprint tracking. If you have questions, your own tips, or whatever else, [let me hear about it on Twitter](https://www.twitter.com/karllhughes).","createdAt":"2016-04-25 04:40:07","updatedAt":"2016-04-25 04:40:07","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=892","type":"blog"}
{"_id":"start-learning-code-2015","title":"Start Learning Code in 2015","content":"If you've made a resolution this year to learn a new skill, why not start with one of [the most in-demand career wise](http://www.good.co/blog/2014/07/08/25-hottest-in-demand-career-skills-get-hired/)? You may assume that to understand something as complex as web development, you need to go back to school or enroll in expensive classes. Think again.\r\n\r\nBelieve it or not, many web developers don’t have a formal education in the trade. There are plenty of free and [inexpensive tools](http://blog.brazencareerist.com/2012/05/11/9-mostly-free-resources-that-will-help-you-learn-how-to-code/ \"9 (Mostly Free!) Resources That Will Help You Learn How to Code\") to help you learn web development skills without investing much more than your own time and brainpower.","createdAt":{"$$date":1421072046000},"updatedAt":{"$$date":1491593385206},"imageUrl":"","postUrl":"https://www.brazen.com/blog/archive/career-growth/how-to-learn-to-code-without-going-back-to-school/","type":"link","tags":[{"_id":"programming"},{"_id":"education"}]}
{"_id":"startup-retirement","title":"Planning for Retirement While Working at a Startup","content":"As I've entered my late 20's and begun to solidify my career path in startups, I've started to listen to everyone's advice about saving for retirement. This got me inspired to do some research, ask other startup employees what they do, and try some things out. While I'm not a financial professional, I hope this post gives you a good jumping off point if you work for a startup and you're wondering about retirement.\r\n\r\n### Isn't equity in a startup an investment?\r\n\r\nWhen I was just leaving college I figured I wouldn't have to worry about it. The way I figured it my equity in one of these startups I worked for was bound to pay off someday, so I could just live paycheck-to-paycheck until that happened. I've worked for three early stage startups now, and have a network of friends and mentors who have gone through every stage of growth. One thing has stood out to me from countless conversations: _don't count on equity._ First, even a significant amount of equity in an early stage startup will get diluted. Second, exit events are pretty rare, and without one [that stock may never turn into cash](https://www.quora.com/If-a-startup-doesnt-issue-an-IPO-isnt-acquired-will-an-employees-equity-ever-be-worth-anything). Third, employees get \"Common Stock\" which means that they won't get any payout [until after investors have made their money back and more](http://stockoptioncounsel.com/blog/negotiating-equity-what-is-the-total-preference/2014/2/13). But, this isn't a blog post about startup equity, so I won't dig into the topic anymore. **Suffice it to say that no; equity in a startup is _not_ a good retirement plan.** So where should startup employees (or founders) start when it comes to retirement planning? Here's the process I've gone through over the past few years, and I hope it's a helpful starting point for some of you:\r\n\r\n### Step 1: Spend less than you make, and start saving\r\n\r\nThat sounds super obvious, but when I talked to one of my friends about it she wasn't sure if she was spending more than she made. This is simple to check: just look at your total bank account balance from one year ago and then look at what it is today. Subtract any new debt that you've accrued (credit cards, loans, etc.) and that's where you stand. If the difference is positive, then you've spent less in the past year than you've made; otherwise, [find a way to spend less](https://www.nerdwallet.com/blog/finance/spending-plan-regain-control-money/).\r\n\r\n### Step 2: Build an emergency fund\r\n\r\nSomething is better than nothing, so if this whole process intimidates you, start slow. Just open a savings account online and start putting $100 in it every month. Once you get in the habit and you know you're spending less than you make, build up an emergency fund. This will be a backup plan in case your startup fails, you have a big unexpected expense, or you need cash in a pinch. Most people recommend saving up 6 to 12 months of your salary in an emergency fund. I'm a bit less conservative, so I keep around 4 months of after-tax salary knowing that if I had to I could stop spending as much on certain things or use my credit cards. It also helps that engineering jobs are plentiful these days so I feel less pressure than some others may.\r\n\r\n### Step 3: Max out your IRA contributions\r\n\r\nOnce you start investing real money for retirement you'll start paying real taxes. If your company has a 401k (many startups don't, but larger ones may), then put in as much money as they'll match. Otherwise, put up to the yearly max into an [IRA](https://en.wikipedia.org/wiki/Individual_retirement_account). I like the Roth IRA option as it lets me pay taxes on my money now and  take it out tax-free when I'm retired, but Traditional IRAs may be better if you think you'll be in a lower tax bracket when you stop working. Look up the [differences here if you're not sure](https://investor.vanguard.com/ira/roth-vs-traditional-ira).\r\n\r\n### Step 4: Get an HSA if you can\r\n\r\nHigh deductible healthcare plans are the new norm. Whether you've got health insurance through your startup or the Affordable Care Act, you may qualify for a Health Savings Account. These are actually [really awesome tax-free savings vehicles, especially if you're young and healthy](https://www.betterment.com/resources/life/truth-about-hsas-and-retirement/). The way it works is that any money you put into an HSA is put in pre-tax. Then, as long as you use the money in that HSA for health care related costs (eg: prescriptions, copays, etc.) then you don't pay tax on that money when you spend it. If you invest the money you have in an HSA and it grows, it could be a significant amount by the time you retire and likely have bigger medical expenses. The other benefit to an HSA is that if you do get sick or injured before you retire and your health insurance won't cover everything, that money can be used without penalty (or taxes) before you're 65 since you'll use it on medical expenses. It's like a medical emergency fund mixed with a retirement fund.\r\n\r\n### Step 5: Move your money into index funds or hire a fiduciary\r\n\r\nIRAs, 401ks, and HSAs are basically wrappers for the money you want to save for retirement. That means they don't inherently earn interest, but because most people won't be touching the money for a long time, they put their IRA, 401k, or HSA money into an investment like stocks or bonds. The reason for this is that [compound interest is very powerful](http://moneyminiblog.com/investing/compound-interest/). ![](https://i.imgur.com/1ugIATV.jpg) If you're completely in over your head at this point, then it might be worth hiring a fiduciary. Don't just look for the first financial advisor you can find though. [Registered fiduciaries are different in that they work for you and don't get commission from selling you certain investments](http://money.usnews.com/money/blogs/the-smarter-mutual-fund-investor/2015/03/19/is-your-financial-advisor-a-fiduciary). _Beware financial advisors who aren't fiduciaries. They're probably just glorified sales people._ If you feel strong - like you can handle this yourself - then look into [index funds](http://www.investopedia.com/terms/i/indexfund.asp). These funds let you buy a large swath of stocks or bonds, giving you instant diversification without the work or buying individual stocks yourself. Read up on diversification of funds too though because the mix you buy when you're 25 may be very different from the mix you should buy at 45. There's much more that could be said on this topic, but since this is getting more advanced, I'll leave you to do your own research if you're interested.\r\n\r\n### Further reading\r\n\r\nI read a couple good books on the topic of saving money and investing this year: [Money, Master the Game by Tony Robbins](http://amzn.to/2aznRjE) (I know, I was skeptical of Tony Robbins too, but it's legitimately a good book) and [Rich Dad Poor Dad by Robert Kiyosaki](http://amzn.to/2aG6WBY). A couple blogs I've found helpful are [NerdWallet](https://www.nerdwallet.com/) and [Vanguard's blog](http://vanguardblog.com/). Finally, if videos are more your thing, check out _[How the Economic Machine Works](https://www.youtube.com/watch?v=PHe0bXAIuk0)_ and [John Oliver's spot on retirement plans and the danger of financial advisors](https://www.youtube.com/watch?v=gvZSpET11ZY). Have your own tips for startup employees looking to save for retirement? [Hit me up on Twitter](https://www.twitter.com/karllhughes) and I'll add them here. _Disclaimer: this should be obvious, but I'm not a financial advisor, fiduciary, or even a professional in the industry, so take my advice with a big grain of salt. I'm just an engineer who works at startups and wants to retire someday. Use my advice as a springboard to do your own research or talk to your own financial planner._","createdAt":{"$$date":1470665142000},"updatedAt":{"$$date":1508689333462},"imageUrl":"https://i.imgur.com/LRoLTlK.jpg","postUrl":"https://www.karllhughes.com/?p=921","type":"blog","tags":[{"_id":"money"},{"_id":"retirement"},{"_id":"finances"}]}
{"_id":"stress-a-little-its-okay","title":"Stress a Little, It's Okay","content":"*I've always been pretty good at dealing with stress, but as I get older and new things come up to stress me out, it's helpful to go back and remember that a little stress is okay. I wrote this post back in July of 2012, and is being published as part of my [2017 daily writing project](/posts/2017-writing-goal).*\r\n\r\n-----\r\n\r\nDespite what some may tell you, a little bit of stress can actually be a good thing. Before you shake your head and tell me I'm crazy, let's look at what research says on stress:\r\n\r\n*   Stress keeps your brain sharper\r\n*   Stress causes an increase in creativity\r\n*   Ambition and stress keep you happy\r\n*   Stress is _normal_\r\n*   Stressed people let themselves fall in love\r\n*   Movement and stress make you live longer\r\n\r\nDon't believe me? Check my sources: [the Huffington Post](http://www.huffingtonpost.com/todd-buchholz/stress-not-a-bad-thing_b_1711666.html?utm_hp_ref=books&ncid=edlinkusaolp00000009#slide=1292017) & [Woman's Day](http://www.womansday.com/health-fitness/stress-management/7-ways-stress-can-actually-be-good-for-you-104481).\r\n\r\n## Why you and I need a little stress\r\n\r\nRelaxation and complacency are the enemies of productivity.  Working hard, feeling mental stress build, and fighting your way through the anguish all make you a more productive and ambitious person, even though they do make you feel \"stressed.\" The truth is that boredom doesn't benefit you in any way.  When you look at your upcoming week and think, \"oh gosh, I have so much to do,\" be thankful!  If you didn't, you might be letting your brain rot away. \r\n\r\n## How to deal with it in a healthy way\r\n\r\nNow, if you feel stress, that doesn't mean you should just throw in the towel.  In fact, that's probably the worst way to handle stress.  Stress that leads to inaction breeds more stress, and more inaction, so when you feel the screws turning, it's time to get up and act. Here's how I deal with it when my life starts getting stressful:\r\n\r\n### 1.  Stop working and make a list\r\n\r\nWhat do you _have_ to accomplish today?  Next, look at the coming week.  What do you _have_ to get done.  If you can prioritize your stresses, you're much more likely to succeed at the next step.\r\n\r\n### 2.  Focus on the task at hand\r\n\r\nI think most people deal with stress poorly because [they lose focus](https://www.karllhughes.com/posts/training-for-focus-four-ways-eyes-big-picture). If you constantly think about the hundreds of things you need to do, you'll never get anywhere. That's what you made the list for though. You don't have to remember those things since you wrote them down for later.\r\n\r\n### 3.  Take a break\r\n\r\nI know, you don't have time for a break, right?  It doesn't matter because regularly planned breaks will help you work better, and allow you to keep your focus longer.  Use break time to work out, go to lunch with a friend, or call a family member.\r\n\r\nStress can be expose weaknesses, but it's also a great way to remember what's really important and refocus yourself. Some people handle stress very poorly, becoming overwhelmed by their mounting troubles, but others - those who have a stress plan - take action based on a focused plan when things get stressful.\r\n\r\nWhat do you think?  Do you let stress overcome you, or have you learned to turn it into a good thing?","createdAt":{"$$date":1487397647000},"updatedAt":{"$$date":1487431302720},"imageUrl":"https://i.imgur.com/ZllpgO0.jpg","postUrl":"http://karllhughes.com/?p=234","type":"blog","tags":[{"_id":"stress"},{"_id":"focus"},{"_id":"organization"}]}
{"_id":"student-debt-crippling-graduates","title":"Student Debt is Crippling Half of Loan Holders","content":"College costs continue to rise and the income disparity between college and non-college educated people is at an all-time high.","createdAt":"2017-01-19T06:00:00.000Z","updatedAt":{"$$date":1485289359483},"imageUrl":"https://i.imgur.com/b63WHb9.jpg","postUrl":"https://medium.com/@karllhughes/student-debt-is-crippling-half-of-loan-holders-1039e0d79a0a#.d62oqkem6","type":"link","tags":[{"_id":"student-debt"},{"_id":"economoy"},{"_id":"college"},{"_id":"education"}]}
{"_id":"student-loan-bubble","title":"When Student Loans Go Bad, We’re All on the Hook","content":"There’s not going to be a bailout for the next financial crisis because the federal government already owns the bad debt. 40% of federal student loans are given to parents and students with subprime credit scores, and 11% of the Parent Plus loans are already delinquent (no payments made for over a year). We’ve racked up over $1,200,000,000,000 in student loan debt — quadrupled since the year 2000 — and the government is not showing signs of slowing down.","type":"link","imageUrl":"https://i.imgur.com/biPtn4C.png","postUrl":"https://medium.com/@karllhughes/when-student-loans-go-bad-were-all-on-the-hook-a31cbd62dd6e","tags":[{"_id":"student-loans"},{"_id":"education"},{"_id":"economics"}],"createdAt":{"$$date":1493127091327},"updatedAt":{"$$date":1493127091327}}
{"_id":"success-is-in-your-attitude","title":"Success is in Your Attitude","content":"*Back in March of 2012 when I wrote this article, I had been reading [Dale Carnegie's \"How to Win Friends and Influence People\"](http://amzn.to/2kJSw6t) which definitely shows up in the tone of this post. That said, I agree with my past self that attitude is probably the biggest defining factor in framing success. I've grown a bit more realistic (read cynical) now, but I do still think that persistence and positivity will take you further than formal schooling or financial backing.*\r\n\r\n-----\r\n\r\n> A successful man is one who can lay a firm foundation with the bricks others have thrown at him. - [David Brinkley](http://www.brainyquote.com/quotes/topics/topic_success.html#ixzz1pNUVcQbp)\r\n\r\nI'm amazed by people.  Every day, I hear someone tell me, \"I wish I could do X...\" or \"If I had Y, I'd be happy.\"  Everyone wants to be happy, right? Everyone wants to be a _success_, although we all define it differently. What causes some people to _actually succeed_, and others to live like drones - floating through life until retirement and dying with a million, \"I wish\"es on their tounge? \r\n\r\n## A successful attitude\r\n\r\nI've gotten to meet hundreds of successful entrepreneurs, inventors, publishers, and businessmen over the years.  The more I talk with those people, the more I love spending time with them.  The difference between _successful_ people is in their attitude, and when you meet someone with the attitude of success, _you are infected_. \r\n\r\n#### Elements to a successful attitude\r\n\r\n*   Persistence\r\n*   Positivity\r\n*   Passion\r\n*   Organization\r\n*   Self-reliance\r\n\r\nThere are very few people who embody all these requirements, hence there are a limited number of successful people in the world.  While all these above traits are important, I have one master saying that trumps and encompasses all of them:\r\n\r\n## \"Never make excuses\"\r\n\r\nThat is _literally_ the only thing you have to do in order to be successful. [Everyone has a dream](http://www.globotreks.com/features/19-reasons-ignore-everybody-follow-your-dreams/). For example, one of my friends wants to be an artist. Her parents wanted her to go to college so they paid thousands of dollars for her to get a psychology degree. Now, instead of chasing her passion in art, she works a middle management job at a retail outlet. When I asked her why she never pursued art - her dream - she said, \"it's just too hard, plus I'd have to get another degree...\" \r\n\r\nShe will _never_ be successful.  She has already given in - at 20-something years old - to the pattern of making excuses. She will _never_ chase her dreams, she will _never_ change the world, and she _will_ always have a nagging feeling of failure in the back of her mind.\r\n\r\nWhile this description sounds bleak, _millions_ or maybe _billions_ of people float through life like this young woman. Everyone has a dream; only [3% of people actually chase theirs](http://www.successvibe.com/forum/archive/index.php/t-228.html).\r\n\r\n## What Do You Want to Be?\r\n\r\nI'll leave you with this final question: _What do you want to be? Successful? Or Average?_","createdAt":{"$$date":1486463815000},"updatedAt":{"$$date":1486463815000},"imageUrl":"https://i.imgur.com/13VT2fr.jpg","postUrl":"http://karllhughes.com/?p=84","type":"blog","tags":[{"_id":"success"},{"_id":"attitude"}]}
{"_id":"tech-accomplishments-the-graide-network","title":"Our Top Technology Accomplishments at The Graide Network","content":"I started working with The Graide Network in July, and since day one, we've had a seemingly endless list of tasks to tackle. That's a good thing for a startup though, and thanks to the team's ability to organize and prioritize tasks, we were able to accomplish a lot in the last half of 2016. Here's the rundown of projects we completed last year.","createdAt":"2017-01-18T06:00:00.000Z","updatedAt":"2017-01-18T06:00:00.000Z","imageUrl":"","postUrl":"http://www.thegraidenetwork.com/blog-all/2017/1/16/tech-accomplishments","type":"link","tags":[{"_id":"the-graide-network"},{"_id":"management"},{"_id":"programming"}]}
{"_id":"tech-conference-cfps","title":"A Curated List of Tech Conferences for Speakers","content":"Since June, I've applied to speak at a number of tech and developer conferences across the world. It's been fun to refine my proposals and I got accepted to speak at three already (I'll be posting about each, just check out the [Speaking](https://www.karllhughes.com/types/speaking) section of my site).\r\n\r\nAnyway, one of the biggest challenges has been keeping up with which conferences happen when, where, and when proposals are due. In order to keep track of it all, I've created a table in [Airtable](https://airtable.com/invite/r/4EaSmQNr) that [you can view](https://airtable.com/shry5mX0LQOFa0rnw), and a [free notification service that will tell you when CFPs are due soon](https://www.cfpland.com/).\r\n\r\n<iframe class=\"airtable-embed\" src=\"https://airtable.com/embed/shry5mX0LQOFa0rnw?backgroundColor=cyan&viewControls=on\" frameborder=\"0\" onmousewheel=\"\" width=\"100%\" height=\"533\" style=\"background: transparent; border: 1px solid #ccc;\"></iframe>\r\n\r\n[Airtable](https://airtable.com/invite/r/4EaSmQNr) is one of my new favorite tools. It allows you to create visual databases as easily as a spreadsheet.\r\n\r\nIf you have your own conferences to add to my list, feel free to [submit your conference here](https://www.cfpland.com/#submit).","type":"blog","imageUrl":"https://i.imgur.com/BuWXXki.png","postUrl":"","tags":[{"_id":"speaking"},{"_id":"conferences"}],"createdAt":{"$$date":1507916929672},"updatedAt":{"$$date":1523212290413}}
{"_id":"technical-maturity","title":"Knowing Your Startup's Technical Maturity Level","content":"*As a startup developer I'm always trying to strike a balance between pragmatism and optimization. Since publishing this in October, 2015 I've continued to come back to this checklist as a baseline for startups who need more reliable software, and many of the items on this list were the first we tackled at [The Graide Network](http://www.thegraidenetwork.com/blog-all/2017/1/16/tech-accomplishments).*\r\n\r\n-----\r\n\r\nDeveloping software or products at a startup is a gradual process. I've often talked about how I don't believe software needs to be perfect from day 1 - in fact, I think [non-technical founders should get as far as they reasonably can on their MVP's before investing in engineering resources](/posts/creating-a-tech-startup-without-a-developer). Engineers are expensive; and until you know what the product is that you need to build and how it will make you money, bringing on technical talent is just a waste of their time and your money.\r\n\r\nEventually though, a startup needs to build strong technology for a few reasons: a technology company with a mature product can easily hire and onboard engineers; they know that releases aren't scary; they have confidence in their product; it's (relatively) easy to find good people who want to join their team; processes are in place to allow features to be released at a predictable pace. In short, life is easier when your technology is mature.\r\n\r\nOn the other hand, a startup company with an immature product has irregular bugs and downtime; their customers are often frustrated when using their app; employees fear the technology; and nobody is quite sure how things work. It's fine to start off this way if you have to, but no serious company can grow without becoming technically mature first.\r\n\r\n## So how can we gauge a startup's technical maturity level?\r\n\r\nFirst, let me say that _functionality alone is a terrible gauge of a startup's technology_. That's right, just because your app \"works\" doesn't mean your technology is stable, working, or secure. In fact, one of the most dangerous places to be as a founder is to think you've got a software product that can grow and scale when what you've really got is an impossible mess. But how can you tell the difference? \r\n\r\n## My scale for measuring a startup's technical maturity\r\n\r\nI've defined 4 stages of technical maturity for a startup product. I have used these when evaluating or giving advice to startups as well as when we launch new things at Packback, but they're definitely a work in progress. I welcome your [thoughts and feedback on Twitter](http://www.twitter.com/karllhughes).\r\n\r\n### 1. Functionality\r\n\r\nMost of the product's basic features are implemented and have been released on a local, development, or simple production environment. The product works 90%+ of the time as expected.\r\n\r\n#### Technical Details\r\n\r\n*   Unit tests are sparse or non-existent\r\n*   Often lots of \"spaghetti code\" and poor separation of concerns\r\n*   May have a few acceptance or end-to-end tests if lucky\r\n*   Typical of MVPs developed by low-cost overseas labor, sloppy contractors, or hackers\r\n\r\n### 2. Deployability\r\n\r\nThe product can be painlessly pushed out to servers and updates can be made without excessive effort. The functionality on production servers is the same as on local/development servers. \r\n\r\n#### Technical Details\r\n\r\n*   Server(s) have been provisioned and configured correctly\r\n*   Configuration or deployment method is repeatable (eg: new servers can be spun up or down as needed)\r\n*   Devs are able to deploy code without SSH-ing into servers regularly\r\n\r\n### 3. Stability\r\n\r\nInconsistent or hard to reproduce bugs have been ironed out of the product. The product has users and a system for reporting and responding to bugs in a timely manner. Product improvements come through a defined pipeline and time is budgeted for paying down technical debt.\r\n\r\n#### Technical Details\r\n\r\n*   Testing across all major features\r\n*   New features are implemented cleanly\r\n*   Coding standards are adopted\r\n*   Application can handle variable loads (eg: it can scale up when needed)\r\n*   Some documentation is available to developers\r\n\r\n### 4. Expandability\r\n\r\nThe developer(s) have high confidence in the product's stability, and aren't afraid of adding new developers or features quickly. Code is readable, documented, and well-tested.\r\n\r\n#### Technical Details\r\n\r\n*   Tests across all major and minor features\r\n*   Continuous integration system runs tests automatically\r\n*   Changes don't regularly break existing functionality\r\n*   Must get to this point before bringing on many new devs, especially entry level/interns","createdAt":{"$$date":1493464855000},"updatedAt":{"$$date":1493483096576},"imageUrl":"https://i.imgur.com/9lz5BG7.jpg","postUrl":"http://www.karllhughes.com/?p=816","type":"blog","tags":[{"_id":"programming"},{"_id":"startups"},{"_id":"leadership"}]}
{"_id":"testing-docker","title":"Improving Your Test Suite with Docker","content":"For the last couple years I've had a lot of success using Docker in my test environment. While I think the tool has a lot of potential for production too, it's easiest to get started with local and continuous integration systems.\r\n\r\nLast week I published a guest article on Codeship's blog outlining 7 ways that you can get started using Docker to improve your test suite. While the examples are in PHP and Node, the principles should work for any language.\r\n\r\nIf you want more Docker tutorials and info, check out [my other blog, Shiphp](https://www.shiphp.com/) where I write about Docker and PHP.","type":"link","imageUrl":"https://i.imgur.com/oEhlYxA.jpg","postUrl":"https://blog.codeship.com/7-ways-to-improve-your-test-suite-with-docker/","tags":[{"_id":"codeship"},{"_id":"docker"},{"_id":"testing"},{"_id":"programming"}],"createdAt":{"$$date":1526935939315},"updatedAt":{"$$date":1526935939315}}
{"_id":"testing-layers","title":"Testing the Layers in a Microservice Architecture","content":"We've gotten to make some [huge improvements to the tech stack](http://www.thegraidenetwork.com/blog-all/2017/1/16/tech-accomplishments) at The Graide Network over the past year, but one of the things I'm most proud of is our automated testing system. When I joined the startup last fall, there were no tests; no way to tell if something was wrong on the site; no way to catch bugs before they went into production. Needless to say, we couldn't ship much code in the first few weeks.\r\n\r\nSo, we started to invest in a test suite by writing some Behat tests in [Mink](http://mink.behat.org/en/latest/). Our application wasn't written to be tested, so unit tests were initially next to impossible, but behavior-driven tests gave us at least a little confidence to start refactoring to microservices.\r\n\r\nOver the next few months, we've built out six microservices on the backend, an [Angular](https://angular.io/) frontend application, and made some major improvements to slim down the legacy application. At a high level, our architecture looks something like this:\r\n\r\n![](http://i.imgur.com/kQrADqw.png)\r\n\r\n## So how do you test it?\r\n\r\nOne of our biggest challenges in managing our microservice architecture is testing. This seems to be a common problem for architects who choose microservices; we're far from the first company to encounter and solve this problem. One of the most helpful resources I've found is [Martin Fowler's Testing Strategies in a Microservice Architecture](https://martinfowler.com/articles/microservice-testing/), which I would strongly recommend.\r\n\r\nWhile Fowler's approach is great from a general perspective, I wanted to offer up details on our implementation and how a microservice testing approach works in practice.\r\n\r\n## Testing layers\r\n\r\nEach of our microservices and each frontend application lives in its own repository and on its own server, so everything is highly decoupled. The great thing about this is that we can switch components out and upgrade individual APIs without taking the whole system down. The challenge with this architectural choice is figuring out how to test each individual service without standing up all the services it depends on.\r\n\r\nOur testing strategy is broken down into several layers within each application and integration layers around multiple components of the application.\r\n\r\n### Layer 1: API tests\r\n\r\nEach API (or microservice) is written in [Laravel](https://laravel.com/), and communicates with internal APIs, external APIs, and a database over an HTTP or TCP connection. These are pretty typical PHP applications, but instead of serving up user views, they return JSON responses.\r\n\r\nAs for testing, we use a mix of unit, integration, and acceptance tests as seen here:\r\n\r\n![](http://i.imgur.com/R5KyCsC.png)\r\n\r\n#### A. Unit tests\r\n\r\nSince we rely on a well-tested framework, we choose not to test some components which are already adequately tested in Laravel. While a lot of developers put application logic in their controllers, we keep our controllers slim and instead pass off most of the business logic to Jobs, Repositories, and Models, but pretty much every custom layer in the application is unit tested.\r\n\r\n#### B. Integration tests\r\n\r\nSome pieces of the application lend themselves especially well to integration tests. For example, the [Eloquent Models](https://laravel.com/docs/5.4/eloquent) we write are so tightly bound to the database that it's convenient - and more productive - to integration test them with a real database connection rather than try to mock it.\r\n\r\nWe keep our models slim, so our integration tests just verify that they retrieve data from the data as we would expect. For example, here's a typical model in our Assignments API:\r\n\r\n```php\r\n<?php namespace GraideNetwork\\Assignments\\Models;\r\n\r\nuse GraideNetwork\\Base\\Models\\AbstractModel;\r\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\r\n\r\nclass Inquiry extends AbstractModel\r\n{\r\n    use SoftDeletes;\r\n\r\n    protected $dates = ['deleted_at'];\r\n\r\n    protected $guarded = [\r\n        'created_at',\r\n        'updated_at',\r\n        'deleted_at'\r\n    ];\r\n\r\n    public function assignment()\r\n    {\r\n        return $this->belongsTo('GraideNetwork\\Assignments\\Models\\Assignment');\r\n    }\r\n\r\n    public function scopeGraiderRequest($query, $userId = null)\r\n    {\r\n        return $query->where('type', config('enums.inquiry_types.REQUEST'))\r\n            ->where('graider_id', $userId);\r\n    }\r\n}\r\n```\r\n\r\nOur integration tests for this model just need to check two things:\r\n\r\n- If we query this model using `with('assignment')`, does it return its parent assignment?\r\n- If we query this model using the `graiderRequest($userId)` scope, will it find all Inquiries that are of the `type` `Request` and where the `graider_id` matches the `$userId` passed in.\r\n\r\nWe try to test the unhappy cases as well (eg: if we query without the `with('assignment')` argument, it should _not_ retrieve the parent assignment).\r\n\r\n#### C. Acceptance tests\r\n\r\nLet me make a distinction here: we call any tests that test a single microservice or frontend application \"acceptance\" tests, while tests that test the entire network of services and applications are called \"end-to-end\" tests. Your terminology may vary, but the distinction is important.\r\n\r\nIn order to run an acceptance test on an API, we test each microservice and its database connection _without_ testing the other APIs in our system. We do this by mocking the HTTP Client at runtime and binding the mocked version of the client to Laravel's application service provider (this bit of code [is actually open source](https://bitbucket.org/thegraidenetwork/tgn-clients/src/26cbb2fe38c9067df37e33cf074589b5a916bf61/src/Testing/AcceptanceTester.php?at=master&fileviewer=file-view-default) if you'd like to see it). When we write each acceptance test, we just need to let the test know which mocked API calls will be made and what they will return. This effectively decouples our microservices for testing purposes.\r\n\r\n### Layer 2: HTTP Client library tests\r\n\r\nWe don't test our internal API clients within each microservice because they are used in multiple places. So, we [released a Composer Package](https://bitbucket.org/thegraidenetwork/tgn-clients) for our microservice HTTP clients, and wrote unit and integration tests there.\r\n\r\n![](http://i.imgur.com/u0F1RAS.png)\r\n\r\n#### A. Unit tests\r\n\r\nThe unit tests within our HTTP client package are pretty simple since our internal HTTP clients are just wrappers around [Guzzle](http://docs.guzzlephp.org/en/latest/). They ensure that parameters are passed in, transformed, and sent Guzzle, and that the expected response is passed back to the caller.\r\n\r\n#### B. Integration tests\r\n\r\nOur HTTP client integration tests actually make calls to the microservices. These are still a work in progress, but the idea here is that these integration tests (in addition to each API's internal acceptance tests) will help ensure that the APIs are responding as we expect.\r\n\r\n### Layer 3: Frontend tests\r\n\r\nWe have two frontend systems: our legacy application, which sits in front of all the microservices and our Angular frontend app, which will eventually replace the legacy application. Since we're moving away from the legacy frontend, I'll omit it, although we do currently unit and end-to-end test that application as well. As for the Angular frontend application, the testing layers look like this:\r\n\r\n![](http://i.imgur.com/qEyLDWs.png)\r\n\r\n#### A. Unit tests\r\n\r\nJust like with our backend code, we unit test each sub-layer within the Angular application by mocking any dependencies ([Angular's dependency injection makes this easy](https://angular.io/docs/ts/latest/guide/dependency-injection.html)) and using [Angular CLI](https://github.com/angular/angular-cli) to wrap the Karma tests. As with any testable code, the key is to keep components lean, but I'm admittedly still learning a lot about the best way to structure an Angular app.\r\n\r\n#### B. Integration tests\r\n\r\nWe don't run end-to-end tests directly within our Angular app, but we do run integration tests with mocked API responses. This ensures that the entire Angular application is transforming and presenting data as we would expect, but it allows us to avoid requiring all of our backend microservices to be running just to run the test suite.\r\n\r\n### Layer 4: End-to-End tests\r\n\r\nWhile [some developers eschew comprehensive end-to-end test suites](https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html), I do find that they hold some value, especially in preventing regression when your company is small and does not have dedicated testing resources (eg: our team at the Graide Network). But, I also realize that end-to-end tests are probably the least helpful in a microservice architecture as they don't tell you on their own where something went wrong; just that it did.\r\n\r\nSo rather than build an end-to-end testing suite in our code (which application would it even \"live\" in?), we decided to use a third party service called [Ghost Inspector](https://ghostinspector.com/) which automatically runs our end-to-end test suite twice per day on our dev server. Ghost inspector lets you record tests by simply clicking around your webapp, so an intern or even a product manager can create tests in a pinch. Once recorded, Ghost will run the tests automatically at a specific time (or when triggered by your CI server) and report back to you if something goes wrong.\r\n\r\nOur dev environment resets itself between the Ghost Inspector runs so that next time the end-to-end suite goes, the application will have the data it expects.\r\n\r\n![](http://i.imgur.com/hzQv09b.png)\r\n\r\nUnlike the other testing layers we use, the end-to-end tests actually run the whole network of services. There's no mocking of clients or API calls, so the kinds of tests we can do are somewhat limited. For example, it's not possible to determine if an email or Slack notification was sent when testing with Ghost Inspector. But, that's why we have multiple layers of tests. On its own, no single testing layer is a good indicator of our application's health, but in concert these testing layers help us ensure that our code is working every time we deploy it.\r\n\r\nHave feedback or questions? Have your own microservice testing strategy? I'd love to hear about it! [Find me on Twitter and start a conversation](https://twitter.com/KarlLHughes).","type":"blog","imageUrl":"https://i.imgur.com/vTbDied.jpg","postUrl":"","tags":[{"_id":"programming"},{"_id":"testing"},{"_id":"microservices"}],"createdAt":{"$$date":1492593339670},"updatedAt":{"$$date":1492593518083}}
{"_id":"testing-layers-codemash-2018","title":"Testing Layers Talk at Codemash 2018","content":"This year I was invited to speak at [Codemash](http://www.codemash.org/), a huge, multi-disciplinary event for software engineers, project managers, web developers, and others in the industry. I gave my talk on Testing Layers in Distributed Architectures, but unlike [the 25-minute version I gave at AP Strat & Practice](https://www.karllhughes.com/posts/api-strat-2017-presentation), this version was a full hour long.\r\n\r\nWhile the weather deteriorated on Friday (and my session was in the last time slot), I had a large, highly participatory audience who gave me some great feedback during the session. I didn't get to screencap or record this session (my own fault, I just forgot to turn on Quicktime), but [the slides are available on Google Drive](https://drive.google.com/open?id=1B1Y5Uwi9TcETEsGM2691Sqw41n1J9PDvYRxaUUfirYs). I'm really glad that so many people in software development are interested in testing, and I can't wait to give the talk again at [U of I's Webcon in April](http://webcon.illinois.edu/).","type":"speaking","imageUrl":"https://i.imgur.com/2pR8pAo.png","postUrl":"","tags":[{"_id":"codemash"},{"_id":"conferences"},{"_id":"speaking"}],"createdAt":{"$$date":1515854460163},"updatedAt":{"$$date":1515854478139}}
{"_id":"testing-layers-js-chicago","title":"Testing Layers at the Javascript Chicago Meetup","content":"Last week I was able to give a short 20-minute version of my talk on Testing Layers in Distributed Systems that I'm going to be giving at a couple conferences in the upcoming year. Unfortunately, the audio is a little quiet, but it gives you a little bit of an idea what to expect.\r\n\r\n<iframe style=\"width: 100%; min-height: 400px;\" src=\"https://www.youtube.com/embed/_o5-g4Boe1s?rel=0&showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\nThanks to the [JS Chicago Meetup](https://www.meetup.com/js-chi/) organizers and members for letting me give this talk. If you're into Javascript and in the Chicago area, you should definitely [check this meetup out](https://www.meetup.com/js-chi/).","type":"speaking","imageUrl":"https://i.imgur.com/HdefFJg.png","postUrl":"","tags":[{"_id":"testing"},{"_id":"speaking"},{"_id":"javascript"},{"_id":"video"}],"createdAt":{"$$date":1508607453495},"updatedAt":{"$$date":1508607554421}}
{"_id":"testing-matters","title":"Why Automated Software Testing Matters","content":"In preparation for my [talk next month at API Strategy & Practice](/posts/api-strat-2017-presentation), I've been thinking a lot about testing. Ever since I started writing automated tests a few years ago, I've found it to be one of the most useful tools for building maintainable software, but I still meet developers all the time who don't write tests. Sometimes it's because their boss (or the business team) won't let them, sometimes it's because they've never explained the benefits to them, and sometimes they just don't care.\r\n\r\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">When I hear a team lead say they don't have time to let their engineers write tests because of all the bugs. <a href=\"https://twitter.com/hashtag/TDD?src=hash&ref_src=twsrc%5Etfw\">#TDD</a> <a href=\"https://t.co/jrrcae0vNr\">pic.twitter.com/jrrcae0vNr</a></p>— Karl L Hughes (@KarlLHughes) <a href=\"https://twitter.com/KarlLHughes/status/892802662265171977?ref_src=twsrc%5Etfw\">August 2, 2017</a></blockquote>\r\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\r\n\r\nFortunately, if the reason you're not writing tests is one of the first two, there's hope. You _can_ point to real business value generated by testing, and it doesn't take a huge software system or a long period of time to do so. Just remember that your time as a developer is valuable, so when you say that you can save yourself (and future devs) time, that has real dollars attached to it.\r\n\r\n## The Benefits of Testing\r\nAs you can see in the diagram below, the cost of writing no tests or of manually testing every case is lower initially. This is because setting up an automated test suite and getting developers familiar with a test-driven workflow will take some time. Eventually though, maintaining code without tests will lead to costly production bugs, and a manual testing strategy scales linearly (as you add more code, testers must spend more time doing tests).\r\n\r\n![](https://i.imgur.com/jxkXLuT.png)\r\n\r\nAutomated tests actually make maintaining your code cheaper, and here's how:\r\n\r\n### 1. Testing helps minimize the number of bugs released\r\nBugs are expensive and production bugs are the worst offenders. According to [the IBM System Sciences Institute](https://www.researchgate.net/publication/255965523_Integrating_Software_Assurance_into_the_Software_Development_Life_Cycle_SDLC), fixing a production bug costs 100x more than fixing one at design, and over 15x more than fixing a bug at implementation. Automated tests can help developers catch edge-case bugs before they make it into production and force other developers to drop everything and fight fires.\r\n \r\n### 2. Automated test suites help prevent regression\r\nIn addition to catching new bugs, a strong automated test suite can help prevent regression. As [Eric Elliot](https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d) says, \"Manual QA is error prone...It’s impossible for a developer to remember all features that need testing after making a change to refactor, add new features, or remove features.\" Testing becomes even more important when multiple developers are working on the project over a number of years. Newcomers can't safely work on code that doesn't have tests. While you can rely solely on manual tests, this cost grows linearly as the number of features increases, while automated tests can be written once and run very frequently for little to no cost.\r\n\r\n### 3. Writing testable code improves overall quality\r\nCode quality is another long-term investment that [pays off for large software systems](https://writing.pupius.co.uk/velocity-vs-quality-3d0417fba991). Unit testing can dramatically improve quality when working with developers who are still learning about encapsulation, dependency injection, and scoping, and it is even more advantageous in [weakly typed languages](https://en.wikipedia.org/wiki/Strong_and_weak_typing). When every new class must have unit tests, it forces developers to stop and think about their architectural choices.\r\n\r\n### 4. Tests enhance documentation\r\nGood code should be easy to read and at least partially [self-documenting](http://wiki.c2.com/?SelfDocumentingCode), but there's almost always room for use-case based documentation. That's where testing comes in. Good test suites give other developers (or maybe just future you) a better idea of what the code was intended to do.\r\n\r\n### 5. Tests help guide code reviewers\r\nFinally, as an important part of the development process, reviewing code can be tedious and prone to error. Having tests gives the reviewer a place to look for potential errors or missed edge cases. During code reviews, I often start with the tests, ensuring that they are well-written and don't miss any important cases _before_ I look at the actual code.\r\n\r\nIf you're still having trouble convincing your boss or coworkers that tests are worth your time, [reach out to me on Twitter](https://twitter.com/karllhughes). I'd love to pick up the conversation there.","type":"blog","imageUrl":"https://i.imgur.com/AsAT1rM.png","postUrl":"","tags":[{"_id":"testing"},{"_id":"programming"},{"_id":"engineering"}],"createdAt":{"$$date":1506967877911},"updatedAt":{"$$date":1506968069067}}
{"_id":"textbook-industry-revolution","title":"Why the Textbook Industry is Ripe for a Technological Revolution","content":"*When I first wrote this in September, 2014 I was just a few months in at [Packback](https://www.packback.co/), a company founded to upset the ancient college textbook market. Packback has since refocused on software for the classroom, but I still believe there's a huge need for change in the way we distribute textbooks. If you've got any ideas in that market, I'd love to hear about them!*\r\n\r\n-----\r\n\r\nI'll admit that I'm a bit biased in writing this, but my interest in publishing started long before I joined a company that's setting out to [change the way textbooks work](http://blogs.wsj.com/venturecapital/2014/08/12/after-shark-tank-packback-seeded-for-pay-per-view-e-textbook-rentals/).\r\n\r\nWhen I was in [Engineering Entrepreneurship](http://www.engr.utk.edu/eep/eep.html) in college, one of the fundamental principles we were taught to observe was the move from physical products to digital services. The move from location-bounded distribution channels has often changed much more than just the cost of goods; we've also seen it shift the pricing models, customer support practices, and user acquisition strategies of several huge industries over the past few years.\r\n\r\n### If you need an example of this shift, take a look at the video and movie rental business\r\n\r\nAt one time, video rentals happened in small \"mom and pop\" stores or on a wall at your closest convenience store. As tends to happen with widely fragmented industries, a couple of amalgamated chains eventually rose to prominence - Blockbuster being the dominant one in most of the United States. Blockbuster is now all but extinct, and family video stores are a rarity - even in small towns - thanks to digital distributors like Netflix, Amazon Prime, cable companies, and the low-cost physical alternative, Redbox.\r\n\r\nAlong with the change from physical distribution of VHS tapes (later DVDs) to mostly digital channels (eg: the Internet), the way that consumers pay for this content has also changed. Most now opt for \"per month\" payments over the old \"per use\" option available at Blockbuster.\r\n\r\nSimultaneously, the customer support network has moved from physical stores in high-dollar locations to any number of low-cost call centers around the country (or even the world). Both of these changes along with others have given customers more power and lowered the cost of renting movies and TV shows significantly.\r\n\r\n## So how do we know the textbook industry is ready for this change?\r\n\r\nI don't think anyone would argue that eventually students will replace their bulky physical books for digital versions, but digital books have been around for a while now. Why hasn't the textbook industry changed? What's preventing digital textbooks from becoming the standard?\r\n\r\nIn short, **publishers and higher learning institutions have been a big roadblock to change**. Both are made up of large, established, slow-moving organizations and with neither side pushing against the other, but both pushing to keep competitors out of the market, we haven't yet seen a digital alternative to textbooks that was strong enough to upset the balance. Is that day finally here? I would argue, yes, and here's why:\r\n\r\n### 1. The textbook pricing model is outdated and unsustainable\r\n\r\nMany of the top competitors in the textbook publishing industry are several decades old, and their pricing model has been in place for just as long. Historically one of the biggest drivers in adoption of new technology is a better price for consumers, and as publishers have started to offer textbooks in digital format, they have yet to significantly change the way they charge students for books. In some ways they've actually made it less favorable to students (eg: renting digital books for 75% of the price of a purchase without the opportunity to sell them back), and this will definitely be a driving force for students and schools to change.\r\n\r\n### 2. Low cost alternatives are gaining traction\r\n\r\n[Education costs more than it ever has](http://www.npr.org/2014/03/18/290868013/how-the-cost-of-college-went-from-affordable-to-sky-high), and that means we're likely to see sweeping changes as the public demands more knowledge for less money. Many of these changes will be in new innovative institutions (eg: [MOOCs](http://en.wikipedia.org/wiki/Massive_open_online_course)), and some will undoubtedly be in the media that professors use to transmit knowledge to students. We're already finding more professors who offer low-cost or free alternatives to traditional textbooks, and you can [expect that trend to continue](http://www.usatoday.com/story/news/nation/2013/08/20/students-say-no-to-costly-textbooks/2664741/) with open source textbooks, torrented digital copies, and textbook-free courses.\r\n\r\n### 3. The current system relies on an expensive physical sales force and distribution network\r\n\r\nThere's a reason that textbooks are so expensive even as they move into the digital realm, and a big part of it is the way in which they are selected and sold.\r\n\r\nRemember that publishers don't actually \"sell\" their books to students; they sell to the institution - usually through a department head or professor. Once their book is accepted as the default for a particular course or department, they let the bookstores and other licensed retailers handle distribution, but keeping those books on the shelves requires a massive sales effort on the publishers part. They have to maintain relationships with thousands of professors, and that takes manpower of the kind we rarely see in the digital goods world. This outdated, sales-centric model is a huge chink in the armor of the old guard.\r\n\r\n### 4. The big players are old, and most tech companies in the space are already mature\r\n\r\nYou know that publishers are archaic organizations, but most of the companies in the best place to tackle the textbook problem (eg: Amazon, Google, Apple) are also pretty mature and at this point, slow moving beasts as well. This means that the textbook distribution and publishing space is open for new competitors who can move fast, think differently, and challenge the status quo. Packback is just one of many companies that I think will be innovating in this space over the next decade.\r\n\r\nIt remains to be seen which companies will be the \"Blockbusters\" of textbooks and which will emerge as the \"Netflixes\", but it's certain to be an exciting ride for those of us in the industry. I will say this though: if you like stability and predictability, textbook publishing may not be the best place for your career. A revolution is right around the corner, and if you're not looking to innovate quickly, you're likely to go down in flames before you know what's happening.","createdAt":{"$$date":1491559245000},"updatedAt":{"$$date":1491592934728},"imageUrl":"http://i.imgur.com/m4yfd8I.jpg","postUrl":"http://karllhughes.com/?p=597","type":"blog","tags":[{"_id":"textbooks"},{"_id":"startups"},{"_id":"packback"}]}
{"_id":"the-growth-of-a-disruptive-geek-my-story","title":"The Growth of a Disruptive Geek: My Story","content":"I am often asked by friends and family members who see my [controversial posts](https://plus.google.com/u/1/101080316492181821858/posts/eJJo2FhJPMM), \"How do you get so many people to comment on your stuff?\"\r\n\r\nI'll admit, not every one of my posts stirs the pot, but I usually know which ones will when I post them. This won't be a \"stir the pot\" type article, but rather, a story of how I got started in the business of creating conversations on the web. \r\n\r\n## 8th Grade: I was the geek who could make websites\r\n\r\nIt started when my family got an internet connection. This was around 2000, so it was 56k dial up from AOL that I could only use for 30 minutes a day because we only had one phone line. I was, at the time, an avid Lego user, so building things naturally tickled my fancy. When I realized that computer programs and websites were just things built by people, I realized that I _had_ to know how they worked.\r\n\r\nI bought my first coding book in 7th grade, and began to struggle through Visual Basic. I didn't get far because I was not patient enough and you couldn't Google things to find tutorials as well as you can now. So, I moved to the web, where I quickly grasped HTML - a much simpler concept for a 12 year old. In 8th grade, I made my first website (hosted on Geocities or Yahoo!, I don't remember).  It was a collection of rumors that I had gathered from my cooler friends in the class about who liked who, who got caught kissing someone, and which teachers were picking their noses. It was completely stupid, but it quickly got noticed. I used AIM to pass the word around to everyone in the class using an anonymous account called \"SecretDirt\" and pretty soon, the students, faculty, and teachers at my school were trying to find out who had created this awful piece of work.\r\n\r\n## High school: I sold out\r\n\r\nDespite the rush of building, launching, and quickly deleting \"SecretDirt\", I wanted to be cool in high school. I went to a bigger school where I knew almost no one, and joined the football team in order to fit in better with the people I knew would be a part of the \"in\" crowd.\r\n\r\nEven so, I was always a bit of an outcast among the social elite in high school (likely due to my lack of natural athletic ability), and found myself in the middle-range of \"not quite nerds, but decidedly uncool anyway\" people. I got very involved in Student Counsel, and made it to the VP spot my senior year. I started trying to fit in more with the intellectual kids, but they were skeptical as I acted too much like a jock for their decidedly \"un-jock\" ways. Even so, I had a good group of fellow middle-grounders like myself, but I was careful not to pursue anything too geeky.\r\n\r\n## College: f*ck it, Engineers make more money\r\n\r\nI liked math and physics, but I kept that to myself in high school. When I got to college, I quickly realized that those old high school stereotypes are _completely stupid_, and had no bearing on your place in the real world. I declared my major within a couple weeks - Mechanical Engineering. I knew three things about myself at the time: (1) I liked working with people, (2) I wanted my career to involve _creating_ things, and (3) I was faster at learning math and science related topics than most people.\r\n\r\nBesides that, I knew that as an engineer, money would never be an issue. I grew up relatively poor, so I knew what it was like for a family to struggle with money, and I didn't want to be in that position. Being an engineer who understood people would be a huge plus, right?\r\n\r\n## Post-College: back to the drawing board\r\n\r\nAfter working two years of internships with three different companies as a mechanical engineer, I knew what I didn't want to do. I was doing fine in my classes, but finding it increasingly difficult to care. I had worked long enough to know that engineers didn't use third year heat transfer in their day-to-day work. Hell, they didn't even use the Pythagorean Theorem. The top-level engineers didn't even _do_ engineering; they made lower-level guys who actually understand the stuff _do work_ for them.\r\n\r\nEven so, I wasn't going to quit after 5 years of studying and working on this. I started teaching myself web development, founded a blog at the University of Tennessee, quit my job, and found enough freelance clients to pay the rent.\r\n\r\nAt this point, I was struggling. I had been paid for working 30 hours per week as a technical writer, when in reality, I was spending between 10 and 15 hours per week working, and another 10-15 hours per week at my desk learning to build websites. My bosses always loved my work, and I was always ahead of schedule. I didn't see a reason to work more when I got paid the same amount as my peers, produced the same results, and worked half as much. Call me dishonest if you want, but in an hourly job, there's no incentive to work harder than you have to.\r\n\r\nMy blog at UT started to catch on. Over 200 students applied to write within the first two months, and in weeks we had over 80 regular writers. Most of the content was crappy, but we had a few articles that carried us to well over 10,000 pageviews per month by the end of the semester.\r\n\r\n## A Passion Unlocked\r\n\r\nI realized at this point that I loved managing people and managing a platform. I wrote some of the viral articles myself. The best ones were coincidentally the most controversial. \r\n\r\n\"Never go to Niceley's\" was a scathing piece about the poor service I experienced at a brand new bar in town. The poor owner hadn't even had the chance to start a website for his place when I came in, and just two days after my awful experience, my review was the #1 Google search result for his establishment. The bar went out of business less than a year later.\r\n\r\nOne of the other articles that got the attention of UT's student base leaked the headliner to a major music festival on campus.  The event - called Volapalooza - is run by a group of students in a branch of the student government called the CEB (Campus Entertainment Board). It's their big event of the year, and they _love_ the fact that they can keep the headliner a secret until after tickets go on sale. It's a way to draw people in before the event even means anything, and it's totally stupid campus politics. Through friends of friends, I found out who would be the headliner, but of course, I didn't know for sure. It was just a solid rumor. So, I got one of my friends to write the article.\r\n\r\nNext thing you know, the president of the CEB finds me on Facebook and starts threatening me. He called me several times. He left voicemails, and he eventually offered to bribe me if I'd tell him how the information leaked. We never gave up our source, and had a lot of fun writing \"Find out who's headlining Volapalooza on VolBlogs.com\" all over campus and every chalk board we could find. That will go down as one of the most exciting and fun times I ever had in college.\r\n\r\n## My First \"Job\": Something I Love\r\n\r\nI started trying to expand my idea of college news blogs at business plan competitions for the next few months. I got very little traction, and eventually fell back on freelancing full time to pay my rent and buy enough spaghetti to live on. I kept plugging away though, and eventually, I got in contact with a startup called Uloop. They wanted to get into college news, and I was a go-getter who knew enough about it to add value to their company. Fast-forward a few months and now, as a member of Uloop's team, the news platform I developed is growing faster than I could have imagined with just enough funding for me to keep my 300 square foot apartment. Would I trade this for 40 hours of thankless work per week at GE making washing machines (my first college internship)? **Hell no.**\r\n\r\nI've realized that I love working with people, not working in a warehouse making money for someone I'll never even get to meet. I love owning my projects, taking responsibility when it doesn't work, and continuing to disrupt someone's way of thinking. I used to worry when people didn't like me for writing articles that offended them.\r\n\r\nAfter two years of offending people, I've realized that there's no way to create something meaningful without shaking up a market that previously found itself happy without me.  My goal is to continually offend if that means progress. My goal is to continually disrupt if that means evolution. Business and media and news are all variables - not constants - and I love every minute that I get to shake things up.","createdAt":{"$$date":1350622545000},"updatedAt":{"$$date":1487859540502},"imageUrl":"","postUrl":"http://karllhughes.com/?p=273","type":"blog","tags":[{"_id":"personal"}]}
{"_id":"the-hypocrisy-of-religious-business-leaders","title":"The Hypocrisy of Religious Business Leaders","content":"I was born and raised in the religious south - Tennessee to be specific. Business leaders are conservative; politicians talk about \"intelligent design\" in schools; workers don't get unions. This is all part of life in the \"Bible Belt.\"\r\n\r\nAs an agnostic in this environment, it has always amazed me how corrupt allegedly \"Christian\" business leaders can be. Now, I don't want to generalize here. Plenty of Christian business leaders are great people, just like plenty of atheist business leaders are great people. The point remains: how can someone who claims to follow Jesus' seminal words, \"[do to others as you would have them do to you](http://www.biblegateway.com/passage/?search=Luke+6%3A31&version=NIV),\" screw his employees, customers, and partners over in the name of making a few extra bucks?\r\n\r\n## Example 1: Ken Lay and Jeffery Skilling, Enron\r\n\r\nOne of the most infamous scandals in the past decade involved two highly visible Christian business members: [Ken Lay](http://www.chron.com/business/enron/article/Lay-praised-by-family-and-friends-1873904.php) and [Jeffery Skilling](http://www.legacy.com/obituaries/thisweeknews/obituary.aspx?pid=157146477#fbLoggedOut). Both were praised by their families and friends for their moral devotion to The Word, and [both were convicted](http://en.wikipedia.org/wiki/The_trial_of_Kenneth_Lay_and_Jeffrey_Skilling#Outcome) of dozens of counts of fraud and insider trading. While we can argue all day about the legitimacy of their religious claims, it's sickening to me that a church would even hold their funerals in good conscience. \r\n\r\n## Example 2: John Schnatter, Papa John's\r\n\r\nWhen John Schnatter, Papa John's CEO, announced that due to President Obama's new healthcare policy, he would [cut employees to just below full-time](http://www.forbes.com/sites/rickungar/2012/11/15/the-corporate-blackmailing-of-america-is-now-all-the-rage/) in order to avoid paying their health insurance, he earned a spot on the worst \"Christian\" leaders list. Schnatter attends [Southeast Christian Church](http://thedailybanter.com/tag/southeast-christian-church/) (which not surprisingly, leans strongly to the right), and received a lot of flack when observers noticed that [he made over $2.5 million annually](http://www.forbes.com/sites/calebmelby/2012/11/12/breaking-down-centi-millionaire-papa-john-schnatters-obamacare-math/) for the last few years. I suddenly don't feel so sorry for the guy who now has to pay a few extra cents to his employees who don't have health insurance, and I doubt Jesus would have either.\r\n\r\n## Example 3: Donald Trump\r\n\r\nThis [renowned Presbyterian](http://en.wikipedia.org/wiki/Donald_Trump) has made a horse's ass of himself by going on TV to [host his own reality show](http://en.wikipedia.org/wiki/The_Apprentice_(U.S._TV_series)), playing up a [dead-end run at the presidency](http://en.wikipedia.org/wiki/Donald_Trump#2012_politics_and_potential_presidential_candidacy), and according to his own account [\"screwing\" Muammar Qaddafi](http://www.businessinsider.com/donald-trump-birther-tv-fox-president-2011-4?op=1). If there's a worst example of humility out there, then I don't know it. As Jesus himself said, \"[Whoever wishes to become great among you must be your servant, and whoever wishes to be first among you must be slave of all.](http://www.jesuscentral.com/ji/jesus-parables-teachings/jesus-teachings/jesus-humility.php)\" For some reason, I can't see this American tycoon becoming a slave to anyone.\r\n\r\n> _\"Love him or hate him, Trump is a man who is certain about what he wants and sets out to get it, no holds barred. Women find his power almost as much of a turn-on as his money.\"_ - Donald Trump\r\n\r\nWhile not every Christian is this bad, I would encourage the _real_ followers of Christ's teachings to distance themselves from these obviously false prophets. Having known dozens of honest, benevolent, and truly good business people over the years, I can tell you that claiming a religious leaning is - for most of these hypocrites - just another stab at gaining profits. As always, look to logic and action for a true judgement of a man's virtue, but I will say that \"Christians\" are more likely to sell you something on the false brotherhood of religion than those of us who don't believe in fairy tales.","createdAt":{"$$date":1357878566000},"updatedAt":{"$$date":1488315709320},"imageUrl":"https://2.bp.blogspot.com/_OCWXw6InF70/TLHinmjgPNI/AAAAAAAAA0o/ODM4CsMeSsQ/s1600/Preacher_still_1.jpg","postUrl":"http://karllhughes.com/?p=332","type":"blog","tags":[{"_id":"business"},{"_id":"religion"}]}
{"_id":"the-journey-begins-homeless-for-a-summer","title":"The Journey Begins - Homeless for a Summer","content":"As many of you who follow me on Google+ know, this summer, I sold [almost all of my possessions](https://plus.google.com/101080316492181821858/posts/1KX5pX8FbgB) and [I'm going to be homeless](https://plus.google.com/101080316492181821858/posts/XzbbsDxcryh).\r\n\r\nBefore you jump to conclusions and think that I must be insane, let me explain.\r\n\r\nI currently have a remote job with a startup called [Uloop](http://uloop.com). My job consists of managing and recruiting writers and editors at colleges around the country, but it's the kind of thing that I can do from anywhere. All of my meetings are phone calls, and I can handle about 90% of other communication via email. It's a pretty unique situation, but it inevitably got me thinking, \"where do I want to live?\"\r\n\r\nI've lived in Tennessee pretty much my whole life (save for a brief stint in Kentucky), so I figured that it's time to explore some other options. I'm not a very sentimental person, so while it will be somewhat sad to leave behind friends and family, it's not a paralyzing idea for me to be alone in a new place. Plus, now is the only time in my life when a wild foray around the country makes any sense at all. I'm 23, unmarried, just graduated from college, and have the perfect job for traveling. I'm very fortunate to be in such a unique situation.\r\n\r\nMy lease is finally ending on May 30th, and my apartment is mostly bare. My few clothes are sitting in a duffle bag, and my other major possessions (a guitar and laptop) are packed and ready to go. Where will I go first? \r\n\r\n## First Stop: Folly Beach South Carolina\r\n\r\nI'll have much more on my journey as it plays out. I'll still be passing through Knoxville frequently to sleep on a friend's couch here and there, but by August, I am planning on being on the West Coast for the remainder of the summer. If you've ever got an open couch, I'm happy to [cook in exchange for a place](http://pinterest.com/karllhughes/culinary-creations/) to lay my head at night. Thanks for all the kind wishes, and have a great summer everyone!","createdAt":{"$$date":1338217421000},"updatedAt":{"$$date":1487037755116},"imageUrl":"https://i.imgur.com/SCW5Qkt.jpg","postUrl":"http://karllhughes.com/?p=184","type":"blog","tags":[{"_id":"roaming-summer"},{"_id":"personal-updates"}]}
{"_id":"the-key-to-networking-keeping-in-touch","title":"The Key to Networking: Keeping in Touch","content":"*I first wrote about my quarterly contact list in August, 2013, but I started following this pattern at least a year or two before that. Since then, my list of contacts has changed dramatically, but my method for keeping in touch with them hasn't. I've updated this post as I'm also including it in [CTO Patterns](https://github.com/karllhughes/cto-patterns) this year.*\r\n\r\n-----\r\n\r\nI first started using a system for keeping in touch with important people in my life in college. I realized that if I wasn't intentional about it, I wouldn't be able to keep up with a few dozen coworkers, mentors, friends, and peers, so I started keeping a list of people who I wanted to stay in touch with.\r\n\r\nI try to keep the number of people to less than 50, but sometimes it spills over a bit. In order to keep up with them, I set a reminder in my calendar to send each of them a personal email every three months. \r\n\r\nDoes this take a lot of time? Yes. \r\n\r\nIs this worth every second? Also, yes. \r\n\r\n### A guide to making your own quarterly contact list\r\n\r\n#### 1. Figure out who should be on your list\r\n\r\nGo through your LinkedIn contacts, Facebook friends, and Twitter followers looking for people from your network who you want to keep up with. Don't just choose people based on what they can do for you; choose people with high potential who are both above and below your professional level. Good networkers help more than they receive help, and you never know when that kid who just graduated might turn out to be the next Mark Zuckerburg.\r\n\r\n#### 2. Choose the best way to contact them\r\n\r\nIf you've emailed with them before, this is probably the best way to get in touch with them. If you've only talked to them on the phone, that's your ticket. Try to take your communication off of social media, but if you have to, send them a Twitter or Facebook message.\r\n\r\n#### 3. Save one piece of personal information about your relationship\r\n\r\nMy quarterly contact list has 4 columns: name, email, phone number, and relationship information. That last column is important because that's where I keep a record of the last thing we talked about or the last personal update I got from their life. You'd be amazed how excited people get when you send them an email and actually remember that they just had a baby 6 months ago.\r\n\r\n#### 4. Make a clear and unavoidable reminder\r\n\r\nIt's easy to forget to send everyone in your contact list a message every three months, so make your reminder unavoidable if possible. I set up a Google calendar event with an email alert to tell me when it's time to reach out to everyone on my list, but you should choose the method that works best for you. If you don't have a failsafe method, try [Follow Up Then](http://www.followupthen.com/) for making your reminder.\r\n\r\n#### 5. Don't just ask for something\r\n\r\nWhen you send each person in your list a personal email, it's okay to mention what you're working on, but it's not okay to simply ask them for something. Instead, ask them about what they're doing; offer to help them; show interest in their life. Good networkers help more than they ask for help.\r\n\r\n#### 6. Reserve time to send and respond to emails\r\n\r\nA lot of people avoid doing this because they don't want to invest the time required to follow up and read all the email messages that they'll inevitably get back. That's an extremely short-sighted way of looking at things, so reserve a day or two to read and respond to everyone individually. They'll be impressed with your effort, and know that you care enough to make time for them.\r\n\r\nBuilding and maintaining relationships with professional contacts takes time and effort, but if you take a focused approach, it shouldn't be hard to do. If you've got your own tips for keeping up with people, let me hear about them. I'm always looking to improve my tactics.","createdAt":{"$$date":1491206438000},"updatedAt":{"$$date":1491226047083},"imageUrl":"https://i.imgur.com/ukYykv1.jpg","postUrl":"http://karllhughes.com/?p=474","type":"blog","tags":[{"_id":"networking"}]}
{"_id":"the-key-to-success-never-stop-learning","title":"The Key to Success: Never Stop Learning","content":"*Back in July, 2012 when I wrote this article, I was barely a PHP novice and just starting to try Ruby on Rails. It's fun to look back at how little I knew just five years ago and realize that everything I've learned since then has propelled me to where I am now.*\r\n\r\n*I love learning, and I love pushing myself outside of my comfort zone. I try to do it in all aspects of my life from fitness to work to music and movies. While I know this can be hard for some people, every time you do push yourself a bit, the next push gets easier, so go out there and start learning today!*\r\n\r\n-----\r\n\r\nTonight, I decided to finally get outside of my bubble, and start learning a new programming language, [Ruby](http://www.ruby-lang.org/en/). My web development experience began back in December 2010 when I first got acquainted with [Wordpress](http://wordpress.org/), a [PHP](http://www.php.net/) based content management system. At that point, I was very familiar with HTML and CSS, and had worked a little bit with Javascript, but knew nothing about server-side scripting languages.\r\n\r\nAs I've probably lost my non-techie readers by now, I'll stop boring you and get to the point: **You must never stop learning.**\r\n\r\nNo matter your profession, field of study, or role in your company, continued learning is one of the many keys to success. This is true in technical fields like mine, but also just as true in management, the arts, and legal professions. The moment you turn your mind off and think that you know it all is the moment your personal and professional growth will stop. \r\n\r\n## Let's not limit this to business\r\n\r\nSure, you have to keep an open mind in your profession, but the same principle applies to personal relationships. We all have preconceived notions about people, politics, religion, entertainment, and recreation, but truly successful people always keep their minds open to change. There are, of course, hundreds of examples of great people who have changed their views or learned new skills later in life. Today, I will focus on just one: [Alton Brown](http://en.wikipedia.org/wiki/Alton_Brown). \r\n\r\n## A journey to fitness\r\n\r\n[![](http://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Alton_brown_2011.jpg/399px-Alton_brown_2011.jpg \"Alton Brown success\")](http://commons.wikimedia.org/wiki/File:Alton_brown_2011.jpg)\r\n\r\nIf you're a fan of the Food Network, you're probably familiar with Alton Brown. He hosts the shows \"Good Eats\" and \"Iron Chef America,\" as well as being involved in several other shows on the network. Alton's primary show, \"Good Eats,\" is about the science and health that works behind the scenes in food, but as Alton admits, he was a \"poor science student\" growing up, and more than that, he was [overweight](http://livinlavidalowcarb.com/blog/food-network-star-alton-brown-drops-50-pounds-on-a-sorta-low-carb-diet-set-to-write-a-book-about-it/6895).\r\n\r\nWell, Alton wanted to produce a great cooking show, but he knew that he had to learn a few new tricks to do it right. He went back to culinary school, lost 50 lbs., and created one of the most interesting TV shows on the network today. Did Alton reach a point in his life where he was satisfied to quit learning? Not at all. He went from being a well known producer of music videos ([he did REM's \"The One I Love\"](http://en.wikipedia.org/wiki/The_One_I_Love_(R.E.M._song))) to one of Food Network's biggest and sharpest personalities.\r\n\r\n> I can't talk about anything or write about anything if I don't understand it. So a lot of the stuff that I go through and a lot of the time that I spend is understanding. - Alton Brown\r\n\r\nMy final encouragement to you is to _just keep learning_. No matter how old, how bored, or how \"stuck\" you are, learning is one of the many keys to a successful and fulfilled life.","createdAt":{"$$date":1487224850000},"updatedAt":{"$$date":1487251961347},"imageUrl":"https://i.imgur.com/x5Bv3Za.jpg","postUrl":"http://karllhughes.com/?p=220","type":"blog","tags":[{"_id":"learning"},{"_id":"success"},{"_id":"fitness"}]}
{"_id":"the-power-of-responsiveness-web-design-for-multiple-platforms","title":"The Power of Responsiveness - Web Design for Multiple Platforms","content":"*Since writing this post in 2012, the case for responsive (and now [progressive](https://developers.google.com/web/progressive-web-apps/)) websites has gotten even stronger. The frameworks available make it easy to do, and the variety of screen sizes has only increased.*\r\n\r\n-----\r\n\r\nAs more and more content consumers use \"non-traditional\" devices to access the internet, content providers are offering a variety of solutions. While large organizations with lots of content may choose to develop a mobile app in house, that takes _a lot_ of work. Think about it, not only do you have to make a version for iOS and Android, you've then got to think about optimizing it for larger screen sizes used by tablets like the iPad. \r\n\r\n## But What About the Little Guys?\r\n\r\nFor smaller companies, individual bloggers, and resource-strapped news providers, there is a viable alternative: **Responsive Design**. \r\n\r\n## What is Responsive Design?\r\n\r\nA website that is responsive is one that essentially \"responds\" to the device accessing it. For example, if the reader is using a desktop computer, their screen resolution is likely high enough to support a wide page with lots of columns. But, if the reader is using a mobile phone, they probably only have room to see one narrow column, and wider sites will be cumbersome to read as they will likely have to do a lot of side scrolling. \r\n\r\nThere are several ways to approach responsive design. ~~For this site, I used a slightly modified version of [Scherzo](http://leonpaternoster.com/wp-themes/), a light, responsive Wordpress theme created by Leon Paternoster.~~ (I now use [Milligram](https://milligram.github.io/) to handle responsiveness here) If you resize your browser window, you'll notice that as your window gets narrower, the content shifts and column widths change. Since this site is a pretty simple blog without ads, this theme works great, but with more complicated sites, responsive design becomes a little more demanding. \r\n\r\n## A Demonstration with Media Queries\r\n\r\nHarnessing the power of CSS Media Queries, you can move elements around the page. The following screen shots are all from the same site that I created as a demo of how responsive design can optimize your site's appearance without changing the overall styling.  Another advantage is that you can use a single code base, eliminating the need for a \"mobile-only\" site that is styled completely independently of your primary site.\r\n\r\n## Examples of Responsive Layouts\r\n\r\n![](https://i.imgur.com/WJBvAJo.jpg)\r\n\r\n![](https://i.imgur.com/fMfDiZM.jpg)\r\n\r\n![](https://i.imgur.com/QPAYcp7.jpg)\r\n\r\n![](https://i.imgur.com/Yz8p7hE.jpg)\r\n\r\nAs you can see, the layout and section sizes change based on the screen width available, giving the reader more access to the higher priority items (the content) on the page. Without creating an app, it's very possible to give readers a good experience on mobile by harnessing responsive design.","createdAt":{"$$date":1487656899000},"updatedAt":{"$$date":1487684836925},"imageUrl":"https://i.imgur.com/QPAYcp7.jpg","postUrl":"http://karllhughes.com/?p=251","type":"blog","tags":[{"_id":"web-design"},{"_id":"responsive-design"},{"_id":"apps"}]}
{"_id":"training-for-focus-four-ways-eyes-big-picture","title":"Training for Focus: 4 Ways to Keep Your Eyes on the Big Picture","content":"*I used to struggle with staying focused. Since I first wrote this article in March, 2012, I've come up with a number of systems and routines to help me, including the items I mention in this article. Besides the bit mentioning Trello at the end (I used to just use paper lists), I've re-published this article in its original form.*\r\n\r\n-----\r\n\r\nOne of my biggest struggles is keeping my \"eyes on the prize,\" and staying focused on the most important tasks I have each day.  I like to do _a lot_ of different things, so I find myself coming up with more ideas than I _could ever pursue_.  Fortunately, I'm not alone in this struggle.\r\n\r\n> Believe it or not, there are a lot of successful business people and entrepreneurs who regularly exhibit symptoms of ADD. Their ADD often keeps them from being able to organize their thoughts and activities and impedes their ability to stay focused on the tasks at hand. - [Barry Selman](http://www.evancarmichael.com/Business-Coach/2822/5-Reasons-Why-Entrepreneurs-Fail-to-Reach-Their-Full-Potential.html)\r\n\r\n## Focus is a Make or Break Issue\r\n\r\nUnfortunately, lack of focus can derail everything you have worked so hard to accomplish, so it's something that I've had to make a conscious effort to improve.  Here are some techniques I use to keep myself focused on the things I _have_ to do before moving on to the next big new idea: \r\n\r\n### 1. Unplug from Social Media\r\n\r\nI _love_ social media.  While I do find that it is a valuable tool for making new connections and marketing, I had to learn to leave it alone for a while every day.  Once I've completed a major task for the day, I allow myself to plug back in and send out a few posts.  You can easily wait a few hours to reply to a mention on Twitter or Facebook, and it's not going to destroy your brand. \r\n\r\n### 2. Batch Menial Tasks\r\n\r\nChecking email, washing dishes, doing laundry, buying groceries, replying to comments on blogs, and a million other little tasks come up on a daily basis that _will_ throw off your focus...if you let them.  I set aside some time each day to just focus on these little day-to-day tasks, and ignore them in between.  If you spontaneously do them every time you think about it, you'll always find new ones to drive you off track. \r\n\r\n### 3. Plan for a Free Day\r\n\r\nFor me, it's really helpful to know that a \"free day\" is coming soon.  I _really like_ my work, but if I do it every day, seven days per week, I tend to burn out and get more easily distracted.  Once per week, I have to take a \"free day,\" where I just let myself work on a side project, meet up with friends, or write several articles for fun.  Once I get my distractions out of the way, I can spend the rest of the week focusing, knowing that another free day is just a short wait away. \r\n\r\n### 4. The Daily List\r\n\r\nI saved this one for last because it's probably my favorite tool for keeping focused. Every week, I compile a list of \"big things\" that I need to get done. Every day, I choose two to five of them to knock off the list. I finish one to two in the morning before lunch, and the other two to three afterwards. Between completing these tasks, I try to avoid all possible distractions, and _just push through it_. Originally I kept this list on paper, but for the past two years I've been [using Trello as a personal Kanban board](http://www.mikemcgarr.com/blog/how-i-kanban.html).\r\n\r\nHow about you? Do you have your own advice for keeping focused? Let me hear about it.","createdAt":{"$$date":1486557176000},"updatedAt":{"$$date":1486557150714},"imageUrl":"https://i.imgur.com/3ZFyeQ2.jpg","postUrl":"http://karllhughes.com/?p=153","type":"blog","tags":[{"_id":"focus"},{"_id":"organization"},{"_id":"Trello"}]}
{"_id":"trello-as-a-reading-list","title":"Trello as a Reading List","content":"*I first started using Trello and published this post in January, 2015, and since then I've used Trello exclusively as my engineering team's project management system and my personal to-do list. I seriously can't rave enough about Trello, and I've probably introduced a couple dozen people to it along the way. I [still publish a board for books](https://trello.com/b/2n8bdc12/books) that I'm reading or have read if you want to check that out.*\r\n\r\n-----\r\n\r\nI hated reading in high school and \"never had time,\" in college. I kind of regret that, but I guess there's a time in your life when you want to spend all your free time socializing and a time in your life when you want a little peace and quiet with a good book.\r\n\r\nAnyway, I started reading more when I was [living out of my car a couple summers ago](http://www.karllhughes.com/2012/the-journey-begins-homeless-for-a-summer/). I did a lot of driving, so I started with audiobooks, but I was also doing a lot of relaxing on the beach, so I started picking up business books and biographies whenever I'd see one at a second hand store that looked interesting.\r\n\r\nOver the past few years I've gotten more serious about reading regularly, and this year (2015) I decided that I would make it my main form of nightly entertainment before bed. So, with a 30 minute train ride to and from work every day and at least a few minutes before bed most nights, I get quite a lot of reading done, and I needed a way to keep it organized.\r\n\r\n## Keeping track of what I read and want to read\r\n\r\nI love organization in general, but especially when it's digital and therefore doesn't require a new physical object for me to hold on to. [Trello](https://trello.com/karllhughes/recommend) is an organizational system that centers around cards which you can put into lists that in turn live on a board. It's super-simple, whether you want to use it collaboratively or not. Just watch:\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/aaDf1RqeLfo\" frameborder=\"0\" allowfullscreen></iframe>\r\n\r\nSo as I've been reading more, I've found that I need some way to keep up with which books I want to read next and which books to ask for for Christmas next year or put on hold at the library. Trello can serve many purposes, and for me, it works great as a reading list.\r\n\r\n[**Here's my reading board on Trello**](https://trello.com/b/2n8bdc12/books). As you can see, I've got five columns (or lists) right now. Starting at the left, the first is my \"Wishlist.\" These are books that someone mentions to me or I find out about and think would be interesting. I try to keep a long, healthy wishlist here so I'm never left with a situation where I'm about to go on vacation and have no idea what I should download to my Kindle. I keep the wishlist more or less in order of what I would like to get first, but it's not super strict. If I happen to see a cheap copy of something further down the list, I might pick it up.\r\n\r\nThe next column is called \"Ready,\" and as you can probably guess, these are books that I own (in one form or fashion) and are ready to pick up and read. Some of these books I want to read and some are just there and may stay there forever. The ones at the top are generally ones I've deemed more interesting or likely to read first, but once again, if the mood strikes me to pull from the bottom half of this list, then so be it. These books are in my possession, so there's not really a hurry to read them, but I do like to keep things moving through my lists on Trello.\r\n\r\nI should say a quick bit about \"labels\" here. When I get a book, I like to keep track of what format the book is in. Some of them are audiobooks on Audible (the Orange label), some are ebooks that I own (Red), some are physical books that I own or have borrowed (Yellow), and some are available for rent at the Chicago Public Library (Green). Putting labels on them helps me remember which books I actually own and which I'm just borrowing, plus it reminds me to put a hold out on a couple CPL books before I'm ready to read them.\r\n\r\nThe next two - and eventually more - columns are books that I have finished. I only started keeping track of this at the end of 2014, so my list for 2013/2014 is incomplete, but I put books on there as I remember to. If you ever want to borrow a book or are curious about what I think of something, you can always consult my Finished lists to see if it's on there. So, [join me on Trello](https://trello.com/karllhughes/recommend), and let me see your reading list if you've got one!\r\n\r\n*Thanks goes to @[StevenMaguire](https://twitter.com/stevenmaguire) for bringing Trello into my life.*","createdAt":{"$$date":1492070433000},"updatedAt":{"$$date":1492089307509},"imageUrl":"https://i.imgur.com/8QeyNBk.png","postUrl":"http://www.karllhughes.com/?p=674","type":"blog","tags":[{"_id":"trello"},{"_id":"organization"},{"_id":"reading"}]}
{"_id":"trello-powered-movie-reviews","title":"Trello-Powered Movie Reviews","content":"Ever since I started using [Trello](http://www.karllhughes.com/tag/trello/) a few years ago, I've been finding new ways to use it for organizing and tracking things over time. I'm a huge fan of how versatile yet structured it is. One of my many personal boards is a [Movie Reviews board](https://trello.com/b/XJQWgIyI/movies). I started this board because I wanted to keep a running list of movies I wanted to see and how much I liked them. I'm not really any good at writing movie reviews, but as I compiled more and more of them, I started wondering if there was a good way to display them on a website somewhere? Sure, you could read them in Trello, but Trello is not optimized for readers, so I started looking into their API. [![](https://i.imgur.com/epQOO4R.png)](http://movies.khughes.me/#/)\n\n### Trello as a backend\n\nTrello's API allows you to grab all the data on a public board without authorization, so this is a perfect backend for a frontend Angular application. I started off thinking maybe I would write it in Angular 2, but the documentation was pretty sparse and reading source code isn't something I love doing in my free time. Instead I spun up an AngularJS 1.5 app using Babel and Browserify to allow me access to [ES2015](https://themeteorchef.com/blog/what-is-es2015/) (or ES6? I'm not sure what they're calling it these days...) features like modules. While the improvements are ultimately just syntactic helpers, I still think they help Javascript look much cleaner and more readable. I also like how they abstract away Angular, making it much easier to write true unit tests.\n\n### Turning a Trello Board into a website\n\nSo, after a few weekends hacking away at this thing, I finally came up with \"[Mellow](http://movies.khughes.me/#/)\" (a mashup of \"movies\" and \"trello\"), which I'm hosting at [movies.khughes.me](http://movies.khughes.me/#/). On its own, this isn't that exciting of a website. It's not super pretty, and there isn't a ton of content there yet, so it's got room for improvement. But, what this project did get me thinking about was the broader uses for Trello as a CMS. [![](https://i.imgur.com/iMGvYcI.jpg)](http://movies.khughes.me/#/)\n\n### Trello as a CMS\n\nThis isn't a completely original idea. I read an article in [The Changelog a few months back about how they use Trello to build their email newsletter](https://changelog.com/trello-as-a-cms/), and there's even a service someone set up called \"[Websites for Trello](https://websitesfortrello.com)\" that seems to be doing this. Still, I think there's probably use cases that would benefit from an open source framework that leans on Trello as a CMS. I can definitely imagine hosting simple blogs, recipe lists, book and movie review sites, etc. with Trello as a backend. If you're interested in picking up a project to build an open source CMS around Trello, [let me hear about it](https://twitter.com/KarlLHughes) or [fork my project on Github](https://github.com/karllhughes/trello-movie-reviews). If not, keep your eyes open because I might be tackling this project on my own soon.","createdAt":"2016-05-02 05:25:32","updatedAt":"2016-05-02 05:25:32","imageUrl":"","postUrl":"https://www.karllhughes.com/?p=897","type":"blog"}
{"_id":"what-being-made-u-as-a-swedish-drag-queen-taught-me-about-new-experiences","title":"What Being Made Up as a Swedish Drag Queen Taught Me About New Experiences","content":"A couple years ago, I had the opportunity to travel to Sweden to see some relatives over there. My aunt and uncle live in [Borlange](http://en.wikipedia.org/wiki/Borl%C3%A4nge), a small countryside town about three hours northwest of Stockholm. The trip itself was amazing, and I could write a dozen blog posts about it, but one of the most memorable stories was accidentally finding myself alone in a beauty shop with fake eyelashes, a silver wig, lipstick, and perfectly plucked eyebrows.\r\n\r\n## Hold on a minute, what?\r\n\r\nLet me back up. My family (mother, father, brother, aunt, and uncle) and I were walking around the mall in Borlange, looking for souvenirs and any cool European clothing we could find. I had wandered off alone in a store, when suddenly two young Swedish girls approached me. One of them, a cute blonde with huge light blue eyes (I just described every woman I met in Sweden), started speaking to me rapidly in Swedish. Now, I may _look_ Swedish (my mother's side of the family is close to 100%), but I am sadly not fluent in the language. I apologized, explained to her that I was an American, and asked if she could speak English.\r\n\r\n\"Ah, yes. We are in fashion school, and we are looking for a model. Can you be a model for hair and makeup?\"\r\n\r\nFirst off, everyone in Sweden speaks excellent English, but they're usually a little timid about using it in conversation with Americans.\r\n\r\nSecond, if this girl had asked me to jump off a bridge with her, I probably would have done it. Women in Sweden are _beautiful_, and I love their style.\r\n\r\nThird, I'm a pretty adventurous guy, and she didn't seem like a serial killer, so why not?\r\n\r\nAt this point, my family had found me talking to two cute Swedish girls, so naturally, they came up to see what was going on. My uncle spoke with the girls in Swedish for a couple minutes, then relayed the message back to me. The two young women were in the equivalent of cosmetology school, and they needed to show off their hair and makeup styling for a final exam. They wanted to know if I could go to the salon they were learning at and let them work their magic.\r\n\r\nMy family had a trip planned to the world's oldest mine that afternoon, so I was _more than happy_ to pass for a chance to hang out with the Swedish beauticians. A couple hours later, my uncle dropped me off at their building, and I awkwardly walked in.\r\n\r\n## Wait, where does the drag makeup come in?\r\n\r\n![Drag queen](http://farm1.staticflickr.com/174/390246623_f040e82746.jpg)\r\n\r\nAt this point, I only knew they were going to use me as a model for hair and makeup.  I had _no idea_ what that meant exactly, and since the girls in the beauty school were a little timid about speaking English, I couldn't really get a straight answer. I assumed they would put some light makeup on me (like actors and news anchors wear), style my hair, and then take some pictures. No big deal, right?\r\n\r\nWhen I got down to the training room, I saw the pair of Swedish girls and several guys lined up in barber's chairs in a long hallway-ish room. They were all speaking Swedish and laughing, but it seemed like everyone was having a good time, so I just smiled ignorantly and sat down. After a quick shave, the Swedish girl in charge of me - her name was Jenny - started plucking my eyebrows mercilessly. It took 30 minutes, and it was one of the most painful experiences in my life. It made getting a tattoo seem like cake, and by the end of it, tears were involuntarily washing my cheeks.\r\n\r\nNext, I asked her what else I was in for? \"First we do wedding makeup. Next, you get drag queen treatment,\" she giggled. I thought she was kidding, and she wasn't extremely confident in her English so I figured she might have just been attempting a joke. It didn't take long to realize that it wasn't. By this time, I noticed some of the other guys who were a little further along in the process. One was starting to get lip stick and heavy eye-liner. Another had glitter and blush on already. I knew I was in for one heck of an experience.\r\n\r\n## Grin and Bear it\r\n\r\n\"Well, I wanted a unique experience,\" I thought to myself, \"and there's no way I'm backing out now that I got my eyebrows plucked for free.\" I sat there patiently as Jenny applied a nice, light coat of makeup for the \"wedding\" shots, and she then took a picture. Her instructor came by and they talked in Swedish for a few minutes. They both laughed and the instructor walked away.\r\n\r\nThen, she pulled out the big guns. In a few minutes, I had wild green eye shadow, gold glittery eyelids, long faux eyelashes, and a painted on, lipstick smile. The eyeliner was the worst part. After the extreme plucking, my eyes were still watering, and not being used to having eyeliner on (okay, maybe I used it a couple times in high school), I was a real wimp to it.\r\n\r\nAll the guys at the table were in the same boat as me by this point. They were all laughing, taking pictures, and talking happily in Swedish. Naturally I had to get a photo with my artist, Jenny, before I left. I'm sure that photo will surface someday to haunt me, but until then, I'll leave it to your imagination.\r\n\r\nAfter several minutes of washing in the bathroom, I got most of the makeup off, but it probably took a week for all the glitter to dissipate. Overall, I can't say that it was a bad experience, mostly because it was such so unique. I'll admit, I won't be doing this on a weekly basis, but at least I can say I tried it, and that's more than most can do.\r\n\r\n## Do something every day that makes you uncomfortable\r\n\r\nAt some point in your life, you'll be asked to do something that makes you squirm or scares you.  People who continually avoid things that they don't like, tend to be very shallow, inverted thinkers who never open their mind up to innovative and revolutionary thinking. Make this your daily or weekly challenge: _do something that scares you_.\r\n\r\nIf you want to be successful, you do have to embrace things that make you uncomfortable; you have to be open to new places, people, ways of working, etc. Don't ever let your fear of things that are different dictate your life.","createdAt":{"$$date":1487311235000},"updatedAt":{"$$date":1487340726730},"imageUrl":"https://i.imgur.com/aRrYjLD.jpg?1","postUrl":"http://karllhughes.com/?p=160","type":"blog","tags":[{"_id":"success"},{"_id":"attitude"},{"_id":"fear"}]}
{"_id":"what-do-hashtags-mean-for-facebook","title":"What do #Hashtags Mean for Facebook?","content":"Facebook finally [unveiled the hashtag feature](https://www.facebook.com/KarlLHughes/posts/10101487297081615) that they've been [talking about for a few months now](http://techcrunch.com/2013/03/14/facebook-hashtags/). As an avid [Twitter](https://twitter.com/KarlLHughes) and [Google+](https://plus.google.com/101080316492181821858/posts) user, I've been comfortable with hashtags for a long time, but for many casual social media users, this will be the first time they are exposed to the search utility. For bloggers, marketers, and anyone who wants a public presence online, this feature might be the most important one that Facebook has released to date, and here's why:\r\n\r\n## Facebook posts aren't just about reaching your friends and followers anymore.\r\n\r\nOne of the best things about Twitter and Google+ is that they are designed for you to get found. You don't have to actually _know_ someone to get followed by them on Twitter, and if you utilize hashtags, you could get found by thousands of interested users. It's an incredibly powerful marketing tool. Before the release of the hashtag feature, it has always been really hard to find public (or private) posts with Facebook's search tool. Google rarely shows Facebook posts in their results, and Bing's social integration has been anemic at best. But, now that Facebook allows users to tag their own posts, it opens up a whole new world of opportunity for brands and bloggers trying to get noticed by more people.\r\n\r\n## The big question is, \"will people use it?\"\r\n\r\nIt's hard to say if the _average_ Facebook user will ever jump on board with hashtags. Do a search for something like #[Google](https://www.facebook.com/hashtag/Google), and you'll see a lot of marketing brands using the hashtag already. The problem is that most users aren't sharing things publicly, so you might not see much from normal people in the hashtag search page.\r\n\r\n## Either way, it's still great for Facebook\r\n\r\nFor Facebook, hashtags are a win either way. It allows them to more easily classify the context of posts within their network, it should allow them to more accurately present ads to users, and it might even open up some [new revenue possibilities](http://mashable.com/2013/06/12/facebook-hashtags-ads/). What do you think of the new feature? Will you use it to reach more people or is it just another annoying thing to ignore? Let me hear your thoughts in the comments below.","createdAt":{"$$date":1371176872000},"updatedAt":{"$$date":1491492109222},"imageUrl":"","postUrl":"http://karllhughes.com/?p=442","type":"blog","tags":[{"_id":"facebook"},{"_id":"social-media"}]}
{"_id":"what-will-you-regret-5-ways-to-live-without-any","title":"What Will You Regret? 5 Ways to Live Without Any","content":"*Reading back through this article to republish it helped me gain some perspective. Five years after I  wrote this, I still wonder if I'm doing a good enough job keeping up with old friends and living a life worth living. Am I making the impact I really could be? Sometimes I don't know.*\r\n\r\n*I'm republishing this post which I wrote in April, 2012 as part of my [2017 daily writing project](/posts/2017-writing-goal).*\r\n\r\n-----\r\n\r\nI recently stumbled on an article outlining the [top 5 regrets that dying people voice](http://www.guardian.co.uk/lifeandstyle/2012/feb/01/top-five-regrets-of-the-dying). While the article may sound kind of morose, the good news is that you can live without any regrets.\r\n\r\nHere are the five biggest regrets according to the piece and the way you can avoid them: \r\n\r\n**Regret:** I wish I'd had the courage to live a life true to myself, not the life others expected of me.\r\n\r\n**Fix:** Don't be afraid to change _everything_ if you have to.\r\n\r\nIt's inevitable. At some point, you will find yourself going down a road to an unfulfilled life.  You'll wake up every day, hating your job, and counting down the days to retirement. **Change it now.**  If you take a risk and find something that you love, you _can_ make it happen.  Don't wait. There will never be a better time to change your life than now.\r\n\r\n**Regret:** I wish I hadn't worked so hard.\r\n\r\n**Fix:** Love your work.\r\n\r\nOur society tells us that you have to work hard to get ahead. Working hard alone won't make you a success ([although it helps](http://localhost:43000/posts/one-thing-that-separates-successful-people-from-failures)).  _Working hard at something you love_ is the key. If your job allows you to live the life you want, and you love doing it then the whole, \"worked too hard\" regret flies out the window. \r\n\r\n**Regret:** I wish I'd had the courage to express my feelings.\r\n\r\n**Fix:** Find people you can trust and lay it all out there.\r\n\r\nYou may have to force yourself.  For many, expressing their feelings is not natural, but it allows you to truly connect with people. At the end of it all, your life's value will in large part be determined by _the impact you had on others_, and you won't impact anyone if you are never honest. Take some time every day to interact with _real_ people you enjoy.\r\n\r\n**Regret:** I wish I had stayed in touch with my friends.\r\n\r\n**Fix:** Keep a contact calendar.\r\n\r\nThanks to the internet, keeping up with old friends is easier than ever before, but that doesn't mean you'll _remember_ to reach out to them. Build an exclusive list of your best friends, mentors, and former coworkers, and schedule a regular time to reach out to each of them.  Don't expect them to contact you. Take the initiative, and don't lose touch with the truly meaningful people in your life.\r\n\r\nI use a system for reaching out to people once per quarter, and [I've written more details on this topic here](/posts/the-key-to-networking-keeping-in-touch).\r\n\r\n**Regret:** I wish that I had let myself be happier.\r\n\r\n**Fix:** Learn to recognize and recapture your happiness.\r\n\r\nContentment is not true happiness.  Plenty of people are just content enough to keep going, but are they really filled with joy and happiness? Rarely. Take time to reflect and meditate on your life every month. Stop. Don't work. Don't watch TV. Don't talk. Just sit and think. Where are you? Where do you want to be? What would allow you to recapture the childlike joy you once had? \r\n\r\nStop allowing yourself to remain content because you are afraid to pursue something more. A life of fear will end filled with regret.","createdAt":{"$$date":1486735738000},"updatedAt":{"$$date":1486692455604},"imageUrl":"https://i.imgur.com/gr1A11c.jpg","postUrl":"http://karllhughes.com/?p=157","type":"blog","tags":[{"_id":"inspiration"},{"_id":"success"}]}
{"_id":"when-to-launch","title":"Knowing When Your Business is Ready to Launch","content":"*I can't tell you how many conversations I've had with entrepreneurs who fit into the Founder A or Founder B boxes at this point, but it's probably in the dozens. It seems that more people I've talked to in the past couple years are like Founder A, but maybe that's because I'm being more selective with who I talk to.*\r\n\r\n*Anyway, since I published this in 2015, my thoughts remain the same, and if you need more motivation, check out [this post about creating a tech startup without a developer](/posts/creating-a-tech-startup-without-a-developer).*\r\n\r\n-----\r\n\r\nYesterday I had meetings with two aspiring young entrepreneurs. Both are at the ideation/pre-revenue stage; both are pursuing their first startup; both are young; both have solid ideas that probably have a way to make money; both have a first version of their product ready; both have relationships with potential paying customers.\r\n\r\nThe big difference between the two was their answer to the question, \"When will you be ready to launch?\"\r\n\r\n## Answer from Founder A: We already did.\r\n\r\nFounder A started his company with the help of a couple friends, and before they even had a \"real\" product, they hit the ground running. They figured out how to manually deliver their service and now they're testing pricing and the quality of their service with the hopes of turning it into a product someday. They could definitely have a sexy app with some awesome technology someday, but they don't have a technical cofounder or the money to hire someone, so they're figuring out product-market fit without a product.\r\n\r\n## Answer from Founder B: Our product needs to be \"cleaned up\" first.\r\n\r\nFounder B was waiting to launch his app until he felt really good about the product. Much like Founder A, Founder B is non-technical, and he's working with a cofounder who is slightly technical, but not an experience app developer. They did pay a couple developers to put together an app to test their idea, and it appeared to be working - at least on a small scale. Their fear is that they would launch the mostly-finished, mostly-working product and the experience would be so poor or insecure that people would hate it and never come back.\r\n\r\n## So which approach is \"right?\"\r\n\r\nThere is no right answer here, but I'll make a bit of commentary on each based on what I've seen in the past several years working at startups. \r\n\r\nFounder B suffers from the first-time founder paralysis that is dangerously common. The truth is that nobody's first iteration of a product hits it on the head. This is as true of funded startups with highly technical teams as it is of single founders with nothing more than an idea. He is legitimately concerned with attaching his name to a sub-par product, but I think that he's also a little afraid of failure in general - a bad trait for startup founders to have.\r\n\r\nFounder A has spent a little more time interning and working with early stage companies, so he understands that product-market fit is a journey, not a destination. He's initially concerned with finding a market and price point; not building a perfect product. I liked both founders, and I think they both have as good a shot as any at making their projects work, but if I were to place a bet based on one meeting, I'd go with Founder A.\r\n\r\nHow about you? Do you see yourself in these archetypical founders? When do you know that a product is ready to launch? [Let me hear your thoughts on Twitter](http://www.twitter.com/karllhughes).","createdAt":{"$$date":1493410145000},"updatedAt":{"$$date":1493385114989},"imageUrl":"https://i.imgur.com/WLV6LFF.jpg","postUrl":"http://www.karllhughes.com/?p=813","type":"blog","tags":[{"_id":"startups"},{"_id":"revenue"}]}
{"_id":"why-give-up-alcohol","title":"Why I Gave Up Alcohol","content":"*I first wrote about this three years ago when I had just given up alcohol. At that time, it was part of a burgeoning asceticism. I had given up meat, most of my possessions, and moved hours away from all my friends.*\r\n\r\n*The reasons I gave up drinking back then are different from the reasons I continue not to drink now - three years later - so I've updated this post to reflect my current philosophy rather than my old one. Life changes, and I'm getting more and more okay with that.*\r\n\r\n-----\r\n\r\nAbout six years ago I started to change my relationship with physical things. Up until that point, I think my aspirations were pretty typical of a middle class college student: graduate, get a decent job with a big company, save money, buy a house, retire at 65, etc., etc.\r\n\r\nI began to realize that these societal artifacts didn't really matter to me. Over the course of the next three years I quit my internship with a big company, got rid of (almost) all my possessions, spent a summer living in my car, moved to a tiny one-room apartment in Chicago, sold my car, and eventually [gave up meat](/posts/why-ive-decided-to-go-vegetarian/) and alcohol. I pretty effectively downsized my life and my footprint.\r\n\r\nSince then, I've reintroduced many of the luxuries that I chose to live without back then. One thing I've realized in the three years is that **you don't have to live at the extremes**.\r\n\r\n### What do you mean by that?\r\n\r\nI used to believe that things were black or white: that eating meat was bad; that buying things was wasteful; that drinking alcohol was unnecessary; that belief in god was pointless. These decisions were binaries, so it was easy for me to push myself into one category or the other and pursue that ideal completely.\r\n\r\nI don't know how that changed - meeting my future wife, Laura probably helped - but over the course of the past three years, I've come to learn that I can be happy without living completely in one extreme or the other. I've started to loosen up about eating meat (I'm back on fish now), I own a bed, I have an extra bedroom in my apartment, and I have money saved for retirement. It took about three years to remove things from my life, and in about three years I've brought many of them back.\r\n\r\n### So why not drink?\r\n\r\nThat's not to say I'm not still a bit of a minimalist, and not drinking is still one of the excesses I choose to skip. I also own only three pairs of pants; [I wear pretty much the same thing every day](http://www.becomingminimalist.com/wear-one/); my fiancee and I are having a quiet wedding with just our parents and brothers; I don't eat meat. There are plenty of things I do that are a little weird.\r\n\r\nThe truth is that many of these things are just habits now. They started off as philosophical \"truths,\" but now that I'm used to them, why change things?\r\n\r\nFor example, I've thought about having a beer a few times in the past year. It wouldn't kill me, but would it add anything to my life? I don't know. Would it make it harder to wake up and run the next day? Probably. Everybody solves this equation when they have a beer, but I've had a hard time justifying the option to partake.\r\n\r\n### I'm three years in and I barely miss it\r\n\r\nThe first few times I said \"no, thanks\" to a free beer at a party were weird, but I got used to it pretty quickly. I thought social settings might make me more nervous without the natural lubricant, but my experience has been pretty much the same as it was before. In many ways it's better because my head stays clear, I don't get tired as quickly, and I'm better at remembering names at parties.\r\n\r\nIt's easy to add up the other pros too. You save money when you go out to eat, you save empty calories that you can spend on something better for your body, and you maintain higher cognitive power.\r\n\r\nI can't say that I'll never have a drink again in my life. I probably will. I'll probably relax more and more of my self-imposed \"rules\" for life as I learn to live in a happy gray area, but I'm not there yet. There's still a part of me that likes knowing I can do without things that most people claim they can't.","createdAt":{"$$date":1492506011000},"updatedAt":{"$$date":1492526850889},"imageUrl":"","postUrl":"http://karllhughes.com/?p=539","type":"blog","tags":[{"_id":"personal"},{"_id":"health"}]}
{"_id":"why-ive-decided-to-go-vegetarian","title":"Why I've Decided to Go Vegetarian","content":"*I quit eating meat in the summer of 2013, when I first published this article. In 2017, I've loosened up a bit - I now occasionally eat fish - but I still believe that a plant-based diet is better for your body and the world at large. So, I've updated this post to reflect my current values and reasons for not eating meat, but the bulk of my logic from four years ago still applies.*\r\n\r\n-----\r\n\r\nThere was a time not too long ago when swearing off meat put you in a very strange, die-hard, animal-praising class of people. In 1970, only 1% of Americans self-identified as vegetarians. Since awareness of the health and environmental issues surrounding modern meat production has increased though, the number of vegetarians has risen dramatically ([somewhere around 13% as of 2013](http://en.wikipedia.org/wiki/Vegetarianism_by_country#United_States)).\r\n\r\nPeople go vegetarian or vegan for a number of reasons, although it seems that they boil down to three primary ones:\r\n\r\n- Better personal health\r\n- To minimize their environmental impact\r\n- To protect animals from abuse\r\n\r\nIn this post, I'll outline my personal rationale for each of these reasons. While my views are not necessarily shared by every vegetarian, I hope it gives you some insight into why people choose to limit or stop their meat intake.\r\n\r\n## Reason 1: Eating Less Meat is Generally Healthier\r\n\r\nThere was a time when I neglected to take very good care of my body. I was overweight, I didn't care what I ate, I drank a lot on the weekends, I smoked cigarettes, and I almost never exercised. Quitting meat was the first step I took in getting my health under control.\r\n\r\nThere are plenty of perfectly healthy people who eat meat, so I don't think that going meat-free is the only way to bring about good health, but I do believe that our meat and processed-food obsessed country is the ([second](http://www.cbsnews.com/8301-202_162-57592714/mexico-takes-title-of-most-obese-from-america/)) most obese in the world for a reason. Striking meat from your diet completely and instead focusing on getting as much raw, unprocessed food as possible is a quick way to consume fewer calories and up your vitamin intake dramatically.\r\n\r\nI won't get into all the health benefits, but check out [Forks Over Knives](http://www.forksoverknives.com/) if you're interested in learning more.\r\n\r\n**And before you ask me what _everybody_ else does, yes, I do get enough protein and no, it's not that hard.**\r\n\r\nThe truth is that a healthy vegetarian diet will supply you with much more protein per calorie than most red-meat loving American diet will do. For example, kale (my favorite green vegetable) has 1 gram of protein for every 11 calories and lentils have 1 gram of protein for every 13 calories. On the other hand, ground beef has 1 gram of protein for every 23 calories. In addition, kale and lentils have essentially zero fat and a ton of vitamins and minerals, while one ounce of ground beef offers you over 12% of the fat you should take in every day and almost no beneficial nutrients.\r\n\r\nLet me be clear here; not _every_ vegetarian diet will get you the nutrition you need, just as not _every_ omnivorous diet will get you the nutrition you need. I eat about 50% raw food, have removed almost all processed foods from my pantry, and eat out only when I have to. Making a \"vegetarian\" switch, and then just eating potato chips and french fries will not make you a healthier person than any decent omnivorous fare.\r\n\r\n## Reason 2: Meat is Destroying the Earth\r\n\r\nMy personal health is somewhat important to me, but even more so is the impact I have on the world around me. One of my goals in life has been to minimize the negative impact I have on the environment. In 2012-13, I sold my car, moved into an air-conditioning free apartment that's about 350 square feet, and I committed to removing meat from my diet. If you're like I was before I started, you probably don't realize how big an impact your meat consumption has on greenhouse gasses:\r\n\r\n> Five years ago, the United Nations Food and Agricultural Organization published a report called “[Livestock’s Long Shadow](http://www.fao.org/docrep/010/a0701e/a0701e00.HTM),” which maintained that 18 percent of greenhouse gases were attributable to the raising of animals for food. The number was startling. - [Mark Bittman](http://opinionator.blogs.nytimes.com/2012/05/15/we-could-be-heroes/), New York Times\r\n\r\nThat puts meat higher on the greenhouse gas offender list than emissions from traveling vehicles. Here's another tidbit that made me stop and think:\r\n\r\n> Producing half a pound of hamburger for someone's lunch a patty of meat the size of two decks of cards releases as much greenhouse gas into the atmosphere as driving a 3,000-pound car nearly 10 miles. - [Nathan Fiala](http://www.scientificamerican.com/article.cfm?id=the-greenhouse-hamburger), Scientific American\r\n\r\nTo think that a single hamburger makes that much impact on the environment is more than startling. It's sickening. Now, I'm not naive enough to think that scientists won't figure out ways to decrease meat's environmental impact, but in the mean time what can I do besides vote with my wallet? It's literally trading up to a healthier lifestyle in exchange for a healthier world, and in business we call that a win-win.\r\n\r\n## Reason 3: The Humane Treatment of Animals\r\n\r\nBefore you go thinking I've become a PETA-praising animal rights activist, let me just say that reason #3 means less to me personally than the other two. Yes, the pictures and videos from factory farms are difficult to take in, but I don't necessarily think it's wrong to kill animals for our own consumption.\r\n\r\nI do, however, think that it's wrong to [needlessly torture or maim them](http://www.rollingstone.com/feature/belly-beast-meat-factory-farms-animal-activists). The meat industry is set up to encourage subjecting animals to horrendous conditions, and even terms like \"[free-range](http://www.peta.org/issues/animals-used-for-food/organic-free-range-meat/)\" can be misleading. I believe that it devalues all life to allow helpless creatures to be tormented just because it saves us a few dollars on hamburgers at McDonald's.\r\n\r\n## But don't you crave meat?\r\n\r\nOddly enough, no, and knowing what I know about the harm that our modern system of meat production causes, and the deliciousness of a wholesome, well-planned, home-cooked vegetarian diet, it's hard to think that I'll ever be tempted by the red stuff again. I'd love to hear your thoughts. Have you gone vegetarian and succeeded or failed? What motivates you to eat (or not eat) meat? Can you justify consuming something that contributes as much as meat does to the overall deterioration of the earth? Let me [hear about it on Twitter](https://twitter.com/KarlLHughes).","createdAt":{"$$date":1488294043000},"updatedAt":{"$$date":1488317973163},"imageUrl":"https://s15.postimg.org/6n3lx4857/dan_gold_193498.jpg","postUrl":"http://karllhughes.com/?p=453","type":"blog","tags":[{"_id":"personal"},{"_id":"vegetarian"},{"_id":"health"}]}
{"_id":"women-entrepreneurs-why-are-good-ones-so-rare","title":"The Lack of Woman-Founded Tech Companies","content":"I was fortunate enough to sit down with a really interesting and exciting entrepreneur this week. The truth is, I sit down with a lot of really exciting entrepreneurs, but this one was different; she was a woman.\r\n\r\n### Plenty of women own and operate businesses, right?\r\nThe problem isn't that there aren't any entrepreneurs who are women. In fact, [47.1% of privately owned businesses](http://www.slideshare.net/michellevillalobos/female-entrepreneurs-key-statistics-insights) are at least half-owned by women. While fewer women own businesses than men, that's not a terribly huge gap.\r\n\r\nThe real disconnect comes in high-growth, technology based industries like those in Silicon Valley where a mere [3% of tech firms were started by women](http://www.pbs.org/newshour/businessdesk/2013/03/silicon-valleys-war-against-wo.html). That number is incredible, so think about it for a minute. In a place where hundreds - maybe thousands - of technology startups sprout each year, only _3% are founded by women_. How is that even possible?\r\n\r\nLet's look at some other areas of business and culture where women have more influence than they do in Silicon Valley:\r\n\r\n*   [School Principals](http://isites.harvard.edu/icb/icb.do?keyword=k74756&pageid=icb.page414550) **- 50% Women**\r\n*   [Sales Professionals](http://www.catalyst.org/knowledge/knowing-territory-women-sales) **- 26% Women**\r\n*   [US Military](http://usmilitary.about.com/od/womeninthemilitary/Women_in_the_United_States_Military.htm) **- 20% Women**\r\n*   [Engineering Graduates](http://en.wikipedia.org/wiki/Women_in_engineering_in_the_United_States)** - 20% Women**\r\n*   [Congress](http://www.wcffoundation.org/pages/research/women-in-politics-statistics.html) **- 17% Women**\r\n*   [Fortune 500 CEO's](http://www.huffingtonpost.com/2012/05/07/fortune-500-female-ceos_n_1495734.html) **- 3.6% Women**\r\n\r\n### So why the gap?\r\nI don't think there's a simple answer to this disparity, but I do think it's a problem worth addressing. Sheryl Sandberg's book, _[Lean In](http://www.amazon.com/gp/product/0385349947/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0385349947&linkCode=as2&tag=volb-20)_, is one example of how complex the issue of women in the workplace really is. She expresses her opinion that women need to \"lean in\" and force themselves onto the same playing field as men. While there is certainly some truth to that mentality, she's been openly criticized by many women who say that [Sandberg's movement isn't relatable enough](http://abcnews.go.com/GMA/video/sheryl-sandberg-book-lean-ignites-feminist-debate-work-18701490) to the average woman.\r\n\r\nPersonally, I don't think that argument gives women enough credit, and tries to overly victimize their gender, but there is a little truth to their side too. Clearly, women don't have as many relatable role models in the tech startup industry as men do, and with almost 90% of venture capitalists being men, you have to wonder how much that plays into this equation.\r\n\r\n### More importantly, what's the solution?\r\nClearly, fewer women are starting careers in high-tech industries than men, so addressing that gap would be the first step. There will never be as many women founding technology startups when they make up less than a quarter of the industry. Similarly, men need to understand the differences between women in leadership roles and men in similar positions. Just because men [tend to be able to compartmentalize their work](http://www.leadershipexcellencecenter.com/coaching/?p=313&option=com_wordpress&Itemid=11) and relationships doesn't mean that they're inherently any better at building a business.\r\n\r\nWhat do you think? Is the lack of women in high growth tech startups a problem? What can we do to fix it? Let me hear your opinion in the comments below.","createdAt":{"$$date":1364525717000},"updatedAt":{"$$date":1491225665921},"imageUrl":"https://i.imgur.com/ZwNujRX.jpg","postUrl":"http://karllhughes.com/?p=406","type":"blog","tags":[{"_id":"gender"},{"_id":"women"},{"_id":"startups"}]}
{"_id":"wordpress-1-second","title":"Sub 1-Second Page Load Time in Wordpress","content":"Wordpress has a bad reputation on the web for being bulky and slow, but that doesn't have to be the case. As most bloggers build up more content, add bigger images, install new plugins, and move to feature-rich themes they forget that [speed is a huge factor in their site's performance on the web](https://googlewebmastercentral.blogspot.com/2010/04/using-site-speed-in-web-search-ranking.html), especially with more consumers using mobile devices. \r\n\r\nSo, a few weeks ago, I decided to take my personal blog, which is hosted on a Hobby Heroku dyno ($7/month) and runs on Wordpress, and make it my goal to serve it up to users in less than 1 second. Now, Heroku hobby dynos are not exactly powerhouses in the server world. They just [have 512MB of ram](https://devcenter.heroku.com/articles/dyno-types#available-dyno-types) and moderate processing power, and unless you want to pay a bunch of money (I don't) for hosting, cranking up your servers is not the most efficient way to increase your Wordpress site's performance. Admittedly, some of these tips might require pretty involved development work, but a few of them are surprisingly easy to pull off, even for the casual tinkerer. Here are the six things that I did to get my Wordpress site to a sub 1-second load time:\r\n\r\n### 1\\. Run the latest version of PHP\r\n\r\nPHP 7 offers a lot of new features over PHP 5.X, but more interestingly, it offers a huge performance increase. While it looks like HHVM, Facebook's PHP compiler, may be a bit faster, the [results were pretty nominal](https://kinsta.com/blog/hhvm-vs-php-7/), and the switching cost is a bit higher for HHVM than for PHP 7, so I opted to just upgrade to PHP 7.0.0. Heroku is now running PHP 7 by default, so that's good news if you're already hosted there.\r\n\r\n### 2\\. Upgrade your Wordpress core\r\n\r\nUpdates to the Wordpress platform happen pretty frequently, but it's important not to get too far behind. Core updates [improve speed, security, and functionality](https://premium.wpmudev.org/blog/speeding-up-wordpress/#update-cms), so they're a no-brainer if you're trying to get the most speed out of your Wordpress install possible.\r\n\r\n### 3\\. Remove bulky plugins\r\n\r\nI've found that a lot of Wordpress plugins, even very popular ones, are very poorly written and not at all performant. If you have the resources, hire a developer to spend a couple hours taking a look at your plugins to make sure there aren't any red flags. If there are plugins that you know you don't use, you should definitely uninstall them as they may be slowing down your site behind the scenes.\r\n\r\n### 4\\. Strip down your theme\r\n\r\nThe other culprit in most slow Wordpress sites is a poorly built theme. It's relatively easy to test your theme, just make another version of your Wordpress site on another domain and change the theme. Compare the page load time between the two, and see if your theme in production is significantly slower. For my sub 1-second site, I customized a simple boilerplate theme called [HTML5 Blank](http://html5blank.com/) and added a few [Foundation components](http://foundation.zurb.com/sites/docs/) to handle buttons, grids, and icons. I also explicitly removed jQuery and all the Javascript that Wordpress automatically includes so the only Javascript the site loads is the script required by Google Analytics. There's a surprising amount of interactivity you can include in a site [without loading a massive Javascript library](https://www.smashingmagazine.com/2015/12/reimagining-single-page-applications-progressive-enhancement/). ![](https://i.imgur.com/Gj8qPGJ.png)\r\n\r\n### 5\\. Minify and cache your scripts\r\n\r\nAnother big performance boost that most Wordpress developers miss is in minification and caching. CSS and Javascript files can be minified, concatenated, and cached using a content delivery network, which means that browsers won't have to download 12 different supplemental files every time they load a page on your site.\r\n\r\n### 6\\. Cache static pages with Varnish\r\n\r\nAfter completing steps 1-5 above, I had my page load time down to a consistent 1.5 to 2 seconds, but I wanted to see if I could go further. In my site's case, most of the content is static (meaning users can't interact with or add to it), and I only post an update every week or so. I'd had a little exposure to [Varnish](https://www.varnish-cache.org/) from when [Packback was on Shark Tank](http://bluesky.chicagotribune.com/originals/chi-shark-tank-chicago-packback-bsi,0,0.story), so I decided to dig in deeper and set it up for my own site. Varnish is a complete page caching mechanism that basically saves a static version of any page on your website and serves that up to visitors unless you tell it to do otherwise. For static pages like blog posts and pages, Varnish is perfect, and thanks to services like [Section.io](https://www.section.io/), you don't even have to install it on your own server. So that's everything I did to get my Wordpress site to a sub 1-second load time. My blog's whole [code base is open source](https://github.com/karllhughes/KH-Blog), so if you're interested feel free to fork it for your own Wordpress site.\r\n\r\n#### Taking page load time further\r\n\r\nThere's plenty more that you could do to speed up a Wordpress site, depending on where you host it, how you set up your database, and how comfortable you are digging into code. If you've got your own tips or you'd like to hear more, [shoot me a message on Twitter](https://twitter.com/karllhughes).","createdAt":{"$$date":1452494646000},"updatedAt":{"$$date":1505263011401},"imageUrl":"https://i.imgur.com/51nbhGK.png","postUrl":"","type":"blog","tags":[{"_id":"wordpress"},{"_id":"php"}]}
{"_id":"working-hours","title":"Working Hours, Burnout, and Pacing","content":"*I am currently, and was when I wrote this post, a startup employee, and not a founder. Because of this, my advice here comes more from the perspective of the employee, but I hope that perspective makes it even more powerful to the founders who read it. In short: if you want to retain good employees, don't expect them to push it like you do.*\r\n\r\n-----\r\n\r\nRunning a small business or startup [can be taxing](http://www.quora.com/How-do-startup-employees-consistently-work-for-such-long-hours-for-years) - both mentally and physically - especially when long hours and tight deadlines are the norm.\r\n\r\nAt different stages of a company's life, different levels of commitment are required, but no matter what you're working on, it's not productive to keep grinding away month after month without giving yourself a break. Similarly, if you have employees then you can't expect them to selflessly spend their lives working long hours and holidays just to help you fulfill your dream. You _can_ push people to a certain point, but learning how to do so in a productive and worthwhile way is one of the best things you can learn if you want to retain your best employees.\r\n\r\n## Don't push people without a purpose\r\n\r\nIt's tempting as an entrepreneur to always want more from your employees, but just because you feel a sense of urgency in managing your business doesn't mean every one of your employees will feel the same. One of the most frustrating things for employees is being pushed to work harder, longer hours without a clear purpose that ties directly into their performance.\r\n\r\n## More work is not a good solution to poor planning\r\n\r\nIf one department in your company is behind on a deadline, figure out how you can work with them to either adjust expectations, change their requirements, or estimate better next time. Just because you or someone in your organization planned poorly does not mean it's a good idea to push everyone else to the breaking point.\r\n\r\n## Listen to employees' frustrations\r\n\r\nEven more important than avoiding situations that stress your employees is listening to them when they are feeling pressure. If you're cultivating the right atmosphere at the office, don't be surprised when someone shows up to tell you that they can't keep up the pace for another 60 hour week.\r\n\r\n## Trust your people\r\n\r\nFinally, as an entrepreneur you have to be able to trust your employees. If you don't, you need to ask yourself why you hired them or find a way to replace them. When you trust your employees, you'll know that when they insist they're working too much, they really are. How do you keep your employees from burning out? Do you let your boss know when the stress is getting to be too much? Let me hear your thoughts in the comments below.\r\n\r\n*Photo by [Valeria C★Preisler](https://www.flickr.com/photos/riot_/ \"Go to Valeria C★Preisler's photostream\") on flickr.com. This post was first published in November, 2014 and is being republished as part of my [2017 daily writing goal](https://www.karllhughes.com/posts/2017-writing-goal).*","createdAt":{"$$date":1491894029000},"updatedAt":{"$$date":1491914221382},"imageUrl":"https://i.imgur.com/4gJYXh3.jpg","postUrl":"http://www.karllhughes.com/?p=645","type":"blog","tags":[{"_id":"startups"},{"_id":"balance"},{"_id":"health"}]}
{"_id":"writing-a-slackbot-to-help-our-business-access-data-at-packback","title":"Packbot: Helping our Business Access Data at Packback","content":"[Slack](https://slack.com/) is a messaging tool that's quickly become ubiquitous in large and small companies alike. It's basically like a walled off version of AOL Instant Messenger (you guys remember that from the early 00's right?) for your company's internal communication. They have apps for iOS and Android, desktop clients, and a web interface, making Slack super accessible and easy to use, plus the allow you to create [Slackbots](https://api.slack.com/bot-users).\r\n\r\n## What is a Slackbot?\r\n\r\nSlackbots look like users on Slack in that they can write messages, mention other people, etc., but they're controlled by a computer not a real person. AIM had a similar bot construct that allowed people to make programs that told you the weather or dirty jokes when you contacted their bot. While it may be cute to make a Slackbot that makes jokes (I had one running for a few weeks that poked fun at one of our sales people), they can be genuinely useful, like the Slackbot we created for Packback called [Packbot](https://github.com/packbackbooks/packbot).\r\n\r\n## What is \"Packbot\"?\r\n\r\nFirst, I should back up and explain what we do at [Packback](http://packback.co/). We sell digital textbooks and offer professors and students a [question and answers platform centered around their class](https://www.packback.co/questions). One of the common problems we encounter is that while our salespeople are talking to professors about their classes, they may or may not know which textbook the professor is using. They may also not be sure if the textbook is available on our site yet, which may dictate the sales conversation moving forward. **In short, the sales team needed a way to quickly determine whether a book was available on Packback, and that's what Packbot does.** So, when you enter an ISBN number in any public slack channel, you'll get a response from Packbot with some basic info about the textbook:\r\n\r\n![](https://i.imgur.com/BhqV017.png)\r\n\r\n## Making Packbot\r\n\r\nThere's not much to creating a Slackbot. If you're familiar with NodeJS or at least some basic Javascript, you can [follow this tutorial to get your first one up and running](http://devdactic.com/first-slackbot/). In order to create Packbot, we used:\r\n\r\n*   Heroku for hosting/deployment\r\n*   NodeJS with Express to access our internal product API and respond when Slack sends a message its way\r\n*   Environmental variables to set our base API url and Slack Token\r\n\r\n### 1. Set up the application\r\n\r\nIf you've set up a Node app before, this one is about as easy as they come. There's a package.json file that includes the dependencies we'll need for running an Express server and parsing Slack's data:\r\n\r\n```\r\n{\r\n \"name\": \"packBot\",\r\n \"version\": \"0.1.0\",\r\n \"description\": \"Packback ISBN lookup bot\",\r\n \"main\": \"app.js\",\r\n \"author\": \"Karl L. Hughes <karl@packback.co>\",\r\n \"license\": \"MIT\",\r\n \"dependencies\": {\r\n    \"express\": \"^4.x.x\",\r\n    \"body-parser\": \"^1.x.x\",\r\n    \"request\": \"2.56.x\"\r\n  }\r\n}\r\n```\r\n\r\nThen there's an env.json file to hold our environmental variables on our local machine:\r\n\r\n```\r\n{\r\n \"pb_base_url\": \"<SUBDOMAIN>.<DOMAIN>.<EXTENSION>\",\r\n \"slack_token\": \"<SLACK_TOKEN>\"\r\n}\r\n```\r\n\r\nAnd finally a Procfile for Heroku. This just tells Heroku what kind of application we're running so it can set up the standard environment.\r\n\r\n`web: node app`\r\n\r\n### 2. Writing the Node app\r\n\r\nFirst, let's talk about what this app needs to do:\r\n\r\n1.  Receive a POST request from Slack with an ISBN to look up\r\n2.  Make a GET request to our internal product API to look up a book by ISBN\r\n3.  Respond with a JSON string that includes details about the book if it's found\r\n\r\nPretty straightforward, and Node makes doing things like web requests a breeze, so it's a great tool for this. I've done more PHP in my time at Packback, so it was nice to use something new for a change. Here's a breakdown of what the Node app does in the app.js file: First, we import the modules required and set the port for running Express locally:\r\n\r\n```\r\nvar express = require('express');\r\nvar bodyParser = require('body-parser');\r\nvar http = require('http');\r\n\r\nvar app = express();\r\nvar port = process.env.PORT || 1337;\r\n```\r\n\r\nNext, we import the environmental variables. On Heroku we have environmental variables, but locally I'm using an env.json file, so there's a bit of logic to handle that:\r\n\r\n```\r\nif (process.env.ENVIRONMENT === 'production') {\r\n  var config = {\r\n    'pb_base_url': process.env.PB_BASE_URL,\r\n    'slack_token': process.env.SLACK_TOKEN,\r\n  }\r\n} else {\r\n  var config = require('./env.json');\r\n}\r\n```\r\n\r\nAdding a POST request endpoint is super easy. Ours just grabs the input from Slack, checks that the token matches and that a Slackbot is not making this request, makes a GET request to our product search API, and returns the response if a single result is found:\r\n\r\n```\r\napp.post('/isbn', function (req, res, next) {\r\n    var token = req.body.token;\r\n    var inputText = req.body.text;\r\n    var userName = req.body.user_name;\r\n    if (token === config.slack_token && userName !== 'slackbot') {\r\n        inputText = inputText.split(\":\");\r\n        var isbn = inputText[1];\r\n        isbn = isbn.replace(/ /g,'');\r\n        var options = getOptions(isbn);\r\n        getJSON(options, function(statusCode, results) {\r\n            if (results.total_records === 1) {\r\n                var result = results.records[0];\r\n                var responseString = \"isbn13: '\" + result.isbn13;\r\n                responseString = responseString + \"' | isbn10: '\" + result.isbn10;\r\n                responseString = responseString + \"' | title: '\" + result.title;\r\n                responseString = responseString + \"' | inventory: '\" + result.inventory.toString() + \"' | link: http://packbackbooks.com/p/\" + result.isbn13;\r\n                var botPayload = {\r\n                    text : responseString\r\n                };\r\n                return res.status(200).json(botPayload);\r\n            } else {\r\n                res.status(404).end();\r\n            }\r\n        });\r\n    }\r\n});\r\n```\r\n\r\nThere's certainly some room to improve the logic here for parsing the request and results, but it serves its purpose as an internal tool.\r\n\r\n### 3. Testing locally\r\n\r\nOne of the problems I ran into was testing the Slackbot locally. After adding a function to run the server:\r\n\r\n```\r\napp.listen(port, function () {\r\n  console.log('Listening on port ' + port);\r\n});\r\n```\r\n\r\nI tried sending the POST request locally, but I couldn't get my body response parsed properly, so I just added a GET endpoint to the app.js file:\r\n\r\n```\r\napp.get('/', function (req, res) {\r\n  var isbn = req.query.isbn;\r\n  var options = getOptions(isbn);\r\n  getJSON(options, function(statusCode, results) {\r\n    if (results.total_records === 1) {\r\n      var result = results.records[0];\r\n      res.statusCode = statusCode;\r\n      res.status(200).send(result);\r\n    } else {\r\n       res.status(404).end();\r\n    }\r\n  });\r\n});\r\n```\r\n\r\nNow I can hit `http://localhost:1337/?isbn=<ISBN>` and see the response that would be returned to Slack.\r\n\r\n### 4. Deploying and configuring Slack\r\n\r\nFinally, once I had everything running locally I pushed the repo up to Heroku. To set up Slackbots, go to _Integrations_ then add one for _Outgoing Webhooks_.\r\n\r\n![](https://i.imgur.com/AEovub3l.png)\r\n\r\nFrom there, I added the URL to our Slackbot on Heroku and got the token for our environmental configurations.\r\n\r\n## Slackbots: just another tool to make your data accessible\r\n\r\nWe undoubtedly could have (in fact, we already have) built an internal tool to allow people to search for books on our platform, but that requires going to a new URL, logging in, and knowing how to use the tool. What I love about the Slackbot solution is that Slack offers a platform that makes data accessible and lowers the barrier to accessing it while maintaining security. We know that anyone with access to our Slack channels should also have access to our product data quickly, so this tool makes sense for us.\r\n\r\nIf you've got a use case for Slackbots, I'd love to hear about it. Also, if you'd like to build your own Slackbot, feel free to [grab Packbot's open source code](https://github.com/packbackbooks/packbot) as a starting point.","createdAt":{"$$date":1438816621000},"updatedAt":{"$$date":1505262541375},"imageUrl":"https://i.imgur.com/BhqV017.png","postUrl":"","type":"project","tags":[{"_id":"slack"},{"_id":"packback"},{"_id":"automation"},{"_id":"programming"}]}
{"_id":"writing-tests","title":"Start Writing Tests - They Don't Have to be Perfect","content":"I think a lot of developers are intimidated by the prospect of writing tests. When a project is small or \"just a side project\" it seems like it's more trouble than it's worth to include a testing library, refactor for testability, and write tests to cover a few hundred or few dozen lines of code. That is, until the project grows, another developer starts working on it, or its spec changes. [Testing always seems like it's not worth it until it really is](http://www.renaissancesoftware.net/blog/archives/206). ![](https://i.imgur.com/4qRG5bp.jpg) If you start with test coverage in mind from the beginning, testing is actually pretty easy, but what about writing tests for established, in production legacy applications? What can you do there? I recently started contributing to a little open source project that had almost zero test coverage. Worse, there were a few tests that the original maintainer had written, but he hadn't bothered to fix them as the library evolved, so they were actually failing. Still, the project was being used in production and it seemed to be functioning as expected, so I figured it would still be easier to help implement tests than to start from scratch. **What do you do with a working application that doesn't have tests?** Where do you start?\n\n*   Do you put a stop to any new features until you've got 100% coverage?\n*   Do you take it out of production until it meets the quality standards you'd like it to?\n*   Do you rewrite the whole thing?\n\nWhile these extreme solutions may seem like the best option from a developer's perspective, they rarely make good business sense. Implementing tests on an untested app is a process. Much like the [technical maturity level of a startup](http://www.karllhughes.com/2015/technical-maturity/), you can't expect every application to be perfect in an organization, but you can make gradual improvements to the test coverage and testability of an application as you work on it. Here's how I approach the problem:\n\n### 1\\. Acceptance tests\n\nUnit tests usually require refactoring, so while they're great when you're building an application from scratch, it's usually easier to start by writing acceptance tests for a working application. An automated test that makes sure all the critical features work the whole way through is usually a good place to start.\n\n### 2\\. Test for return types in big methods\n\nThe next thing to test are the most mission-critical methods in the biggest classes. Even if the code is a spaghetti string mess, you can at least test the return type from the method. If mocking dependencies isn't possible, then just test the whole application to get started. Refactoring isn't safe until you've got at least some simple tests in place.\n\n### 3\\. Add tests one piece at a time\n\nUnit testing a large application takes time and patience. Install a code coverage tool, and just start with one small piece at a time. If it's a big project and it's going to take a few weeks, try just doing a few classes per week rather than taking the whole thing on at once. This is a good thing for developers who are new to a project to do as it helps them get familiar with the application without being required to change core functionality.\n\n### 4\\. Start refactoring\n\nOnce you feel good about the level of test coverage, it's time to decide if refactoring is required or not. Now that tests are in place it's much easier to tell if you break something or at least if the key functionality doesn't work as expected. What tips do you have for adding automated tests to a legacy application? Have you ever had to take on a project like that? Let me [hear your thoughts on Twitter](https://twitter.com/karllhughes).","createdAt":"2016-01-04 05:19:23","updatedAt":"2016-01-04 05:19:23","imageUrl":"","postUrl":"http://www.karllhughes.com/?p=843","type":"blog"}
{"_id":"writing-you-dont-need-a-degree-for-it","title":"Writing - You Don't Need a Degree for it","content":"*Writing has been one of my favorite hobbies since high school, but I used to feel like an imposter  when I did it. I went to school with a lot of smart people who now write for a living, so I felt like a hack with my scant blog posts and shallow listicles, but I did it anyway.*\r\n\r\n*I still don't consider myself a great writer, but I have learned not to care as much what people think about it. If I could add one thing to this article from May 2012, I would say to ignore your own inner critic the most. He's the one who will really keep you from putting pen to paper.*\r\n\r\n-----\r\n\r\nI'm always struck by the fact that people believe you need some kind of college degree to be a writer. Writing is a basic form of modern communication, and it doesn't take years of training to produce a decent piece of work.  In fact, I think everyone, no matter their profession, should take some time to write on a regular basis. Here's how you can get started, no matter how little experience you have previously: \r\n\r\n## 1. Start Reading; Stop Watching TV\r\n\r\nI love a good TV show as much as the next guy, but it's not a great way to learn to be a better writer. [In order to write, you _have_ to read](http://www.huffingtonpost.com/mike-hanski/read-more_b_5192754.html). Seems obvious, right? Usually the best answers are the obvious ones. \r\n\r\n## 2. Pay Attention to Details\r\n\r\nWhen you read, get beyond the obvious plot-line, and pay attention to _how_ the story is presented. Talented writers are able to take a simple idea and convey it in a way that affects their audience's subconscious. It's not easy to do, but if you pay attention to how other writers are doing it, you'll pick up tricks along the way.\r\n\r\n## 3. Have a Conversation with Your Audience\r\n\r\nI think some writers try too hard to make their work sound like it was written by someone else. Remember, the point of writing is to convey an idea or tell a story, not to force a certain style. When you feel like you're trying too hard, you probably are. Just take a step back and write like you would speak.\r\n\r\n## 4. Find Someone to Give You Honest Feedback\r\n\r\nGood feedback is hard to find. Plenty of people will read your work, and once you get moderately good at writing, they'll say, \"Oh, great job writing.\"  _Honest_ feedback won't be all positive. Find people who are _better_ or _more experienced_ than you are, and ask them to tell you only the negatives if you have to.\r\n\r\n## 5. Just Start Writing\r\n\r\nBy far, the hardest thing to do is to pick up your pen (or open your laptop) and just start writing. You'll undoubtedly write your first blog post, article, or story and think, \"this can't be any good.\" The truth is, it probably isn't very good, but you'll have to get over it. Just start writing, and figure out what works and what doesn't as you go. If you never start, you'll never make any progress.\r\n\r\nWhat tips do you have for new or aspiring writers?  I'd love to hear more of your thoughts on [Twitter](https://twitter.com/KarlLHughes).","createdAt":{"$$date":1486991454397},"updatedAt":{"$$date":1486991454397},"imageUrl":"https://i.imgur.com/1887oc3.jpg","postUrl":"http://karllhughes.com/?p=178","type":"blog","tags":[{"_id":"writing"},{"_id":"education"}]}
{"_id":"yahoo-is-officially-an-uncool-company-oh-wait-thats-news","title":"Yahoo! is Officially an Uncool Company...Oh Wait, That's News?","content":"This week, Yahoo! launched their [first revamped home page in four years](http://www.fastcompany.com/3006068/fast-feed/yahoo-makes-over-its-homepage-bid-more-traffic)... _And nobody gave a shit._\r\n\r\nLet's be honest, the internet giant is now just a boring, stuffy, old curmudgeon in the world of the web, and they proved it doubly with their latest memo to employees today that [forbade them from telecommuting](http://venturebeat.com/2013/02/23/yahoo-work-from-home/).\r\n\r\nNone of this should really be news if you've paid any attention to them over the past...oh five years or so. Even their desperate attempt to bring in Google's Marissa Meyer as CEO in order to attract some press hasn't exactly [turned out to be magical](http://news.cnet.com/8301-1023_3-57566246-93/yahoo-q4-subtext-marissa-mayer-effect-starts-to-show-up/).\r\n\r\nThe point here is that you can paint a Kia any color you want, but if it's still got a puttering little four-cylinder engine and the cheapest components that Korea can buy, _it's still a damned Kia._ Maybe Yahoo!'s okay with being Kia? There's nothing wrong with being the funny little guy in the corner who tries to reinvent himself every three to five years, but it's nothing like being a Ferrari, Lamborghini, or even Honda.\r\n\r\nSo, what is your business going to be? Do you want to be a cheap copy-cat of the big guys, or do you want to build a valuable brand? Do you want to get giggled at by the experts or lead the charge in innovation?","createdAt":{"$$date":1361674368000},"updatedAt":{"$$date":1491142050210},"imageUrl":"","postUrl":"http://karllhughes.com/?p=368","type":"blog","tags":[{"_id":"yahoo"},{"_id":"business"}]}
{"_id":"you-need-a-financial-plan","title":"You Need a Financial Plan","content":"I know this is a little off base from my usual posts about software, technology, and startups, but hear me out because it's important. You might think that if you work hard, are good at your job, and you save some money in your 401(k) every year, you'll be in good shape to retire in 25, 35, or 45 years. The baby boomer generation assumed this formula would work, and now the average retiree only has [enough money for $230 per month in retirement](https://talkpoverty.org/2016/08/05/one-third-americans-nothing-saved-retirement/).\r\n\r\n## Where did retirement go?\r\n\r\nIn our grandparents' generation, retirement was less of an issue. Companies still handed out pensions, but now as private corporations have almost completed eliminated pensions and cash-strapped municipalities are going to have to start dropping them too, the retirement game has changed. Our parents' generation felt the worst of this because many of them assumed that a 401(k) was essentially the same as a pension, but **the difference is massive and practically significant.**\r\n\r\n**A pension is a guaranteed income for life after you retire.** Usually it requires a number of years of service or a certain paygrade to qualify, but it's safe and secure (so long as the company backing it stays solvent).\r\n\r\nA 401(k) on the other hand is essentially just a tax-sheltered shell around your money. Sometimes your employer will contribute, but you'll likely put more in yourself. This shell often limits *how* you can invest your money, but even if it doesn't, **you have to make the decision** about what to invest, and you have to hope you get it right. If you do, you might have enough saved to retire on, but if not, you might be forced to live off your children or massively downgrade your lifestyle.\r\n\r\n## The importance of saving as income\r\n\r\nThe problem is that people don't think about how important their financial decisions are. Let's take a quick look at how much money you might make in your lifetime.\r\n\r\nIf you made $50,000 every year for 45 working years, you would make a total of $2,250,000. Obviously you'll use much of that income to live on, but if you're smart, you'll save some. Let's say you're pretty conservative and you can save $10,000 every year. That $10,000 per year will turn into a total value of $2,800,000 by the time you retire, and the mind-blowing thing about that is that $2,400,000 of that money was generated from interest alone. With that much money in the bank, you could withdraw $50,000 per year for the rest of your life and still have a ton left over when you die.\r\n\r\n**In short, it is possible to make more income off your savings than you can by working.**\r\n\r\nNow, the example above assumes some things. First, you will need to get an average return of 7%, which means that you can't just put your 401(k) money into bonds or something super-safe. Second, you'll have to live pretty conservatively to sock away $10,000 every year when you only make $50,000, but the good news is you don't need to save nearly that much if you just want to live the same lifestyle you currently have. In fact, if you saved that much, you could probably retire early or enjoy a massive upgrade in lifestyle when you retire.\r\n\r\nThe point is though that **your financial plan is at least as important to your lifetime income as your salary.**\r\n\r\n## So how do you figure all this stuff out?\r\n\r\nMost middle-class people spend 4+ years and tens of thousands of dollars going to college because college helps you make more money over the course of your lifetime. Unfortunately, not many people spend more than a cursory glance every year thinking about their long-term financial plan. That's crazy to me because **if you can make more money saving and investing your money than you can working, you should look at time spent learning about personal finance as an invaluable investment in your future.**\r\n\r\nStart reading ([Gale MarkJarvis' _Saving for Retirement_ is a great place to start](http://amzn.to/2yFXuGh)), start reading some personal finance blogs ([Get Rich Slowly](http://www.getrichslowly.org/blog/) is good), and invest some time every month to getting your finances together. It may seem like a long way off, but financial education doesn't just magically come with age, and [you can't count on financial advisors to actually recommend what's right for you](https://www.youtube.com/watch?v=gvZSpET11ZY). If you ever want to quit working, save for a house, or invest in your childrens' education, getting things in order is essential, so start today.\r\n\r\nHave your own favorite personal finance resources or book recommendations? I'm always looking for new reads, so shoot me a message on [Twitter](https://twitter.com/KarlLHughes).","type":"blog","imageUrl":"https://i.imgur.com/OBnTjIV.jpg","postUrl":"","tags":[{"_id":"money"},{"_id":"retirement"},{"_id":"finances"}],"createdAt":{"$$date":1508689260850},"updatedAt":{"$$date":1508689260850}}
